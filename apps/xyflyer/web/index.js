// Generated by CoffeeScript 1.3.3
var xyflyer;

xyflyer = require('./lib/xyflyer');

window.app = {
  initialize: function() {
    var _this = this;
    if (!(this.width = window.innerWidth || window.landwidth) || !(this.height = window.innerHeight || window.landheight) || this.width < this.height) {
      $.timeout(100, function() {
        return window.app.initialize();
      });
      return;
    }
    document.addEventListener('touchmove', (function(e) {
      return e.preventDefault();
    }), false);
    this.el = $('.xyflyer');
    this.dynamicContent = this.el.find('.dynamic_content');
    this.el.bind('touchstart', function(e) {
      if (e.preventDefault) {
        return e.preventDefault();
      }
    });
    this.originalHTML = this.dynamicContent.html();
    this.worlds = require('./lib/xyflyer_objects/levels').WORLDS;
    this.levelId = 1364229884455;
    this.level = this.worlds[0].stages[0].levels[0];
    this.puzzleProgress = {};
    this.puzzleProgress[this.levelId] = {};
    this.initLevelSelector();
    this.initSettings();
    this.initWorlds();
    this.selectWorld(0);
    return this.showMenu(this.levelSelector);
  },
  $: function(selector) {
    return $(selector, this.el);
  },
  clear: function() {
    $('svg').remove();
    return this.dynamicContent.html(this.originalHTML);
  },
  load: function() {
    var asset, assets, index, _ref, _ref1, _ref2,
      _this = this;
    this.$('.level_selector_menu').bind('touchstart.menu', function() {
      _this.$('.level_selector_menu').one('touchend.menu', function() {
        return _this.showMenu(_this.levelSelector);
      });
      return $(document.body).one('touchend.menu', function() {
        return _this.$('.level_selector_menu').unbind('touchend.menu');
      });
    });
    this.$('.settings_menu').bind('touchstart.settings_menu', function() {
      _this.$('.settings_menu').one('touchend.settings_menu', function() {
        return _this.showMenu(_this.settings);
      });
      return $(document.body).one('touchend.settings_menu', function() {
        return _this.$('.settings_menu').unbind('touchend.settings_menu');
      });
    });
    assets = {
      person: 1,
      island: 1,
      plane: 1,
      background: 1
    };
    _ref = this.worlds[this.currentWorld()].assets || {};
    for (asset in _ref) {
      index = _ref[asset];
      assets[asset] = index;
    }
    _ref1 = this.currentStage().assets || {};
    for (asset in _ref1) {
      index = _ref1[asset];
      assets[asset] = index;
    }
    _ref2 = this.level.assets || {};
    for (asset in _ref2) {
      index = _ref2[asset];
      assets[asset] = index;
    }
    for (asset in assets) {
      index = assets[asset];
      if (asset === 'background') {
        this.dynamicContent.css('backgroundImage', this.dynamicContent.css('backgroundImage').replace(/\d+\.jpg/, "" + index + ".jpg"));
      } else {
        this.$(".objects ." + asset).removeClass(asset);
        this.$(".objects ." + asset + index).addClass(asset);
      }
    }
    if (this.helper) {
      this.helper.reinitialize({
        boardElement: this.$('.board'),
        objects: this.$('.objects'),
        equationArea: this.$('.equation_area'),
        grid: this.level.grid,
        islandCoordinates: this.level.islandCoordinates
      });
    } else {
      this.helper = new xyflyer.ViewHelper({
        el: this.dynamicContent,
        boardElement: this.$('.board'),
        objects: this.$('.objects'),
        equationArea: this.$('.equation_area'),
        grid: this.level.grid,
        islandCoordinates: this.level.islandCoordinates,
        nextLevel: function() {
          return _this.nextLevel();
        },
        registerEvent: function(eventInfo) {}
      });
    }
    return this.loadLevel();
  },
  initWorlds: function() {
    var worldLinks,
      _this = this;
    worldLinks = this.$('.world_link');
    return worldLinks.bind('touchstart.select_world', function(e) {
      return worldLinks.one('touchend.select_world', function(e) {
        var worldLink;
        e.stop();
        worldLink = $(e.currentTarget);
        return _this.selectWorld(parseInt(worldLink.data('world')) - 1);
      });
    });
  },
  currentWorld: function() {
    var index, level, stage, world, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
    if (!((_ref = this.level) != null ? _ref.id : void 0)) {
      return 0;
    }
    _ref1 = this.worlds;
    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
      world = _ref1[index];
      _ref2 = world.stages;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        stage = _ref2[_j];
        _ref3 = stage.levels;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          level = _ref3[_k];
          if (level.id === this.level.id) {
            return index;
          }
        }
      }
    }
  },
  currentStage: function() {
    var level, stage, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    if (!((_ref = this.level) != null ? _ref.id : void 0)) {
      return 0;
    }
    _ref1 = this.worlds[this.currentWorld()].stages;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      stage = _ref1[_i];
      _ref2 = stage.levels;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        level = _ref2[_j];
        if (level.id === this.level.id) {
          return stage;
        }
      }
    }
  },
  loadLevel: function() {
    var equation, fragment, info, ring, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if ((_ref = this.level) != null ? _ref.fragments : void 0) {
      _ref1 = this.level.fragments;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        fragment = _ref1[_i];
        this.helper.addEquationComponent(fragment);
      }
    } else if (this.levelId !== 'editor') {
      this.$('.possible_fragments').hide();
    }
    _ref3 = ((_ref2 = this.level) != null ? _ref2.equations : void 0) || {
      '': {}
    };
    for (equation in _ref3) {
      info = _ref3[equation];
      this.helper.addEquation(equation, info.start, info.solutionComponents, (_ref4 = this.level) != null ? _ref4.variables : void 0);
    }
    _ref6 = ((_ref5 = this.level) != null ? _ref5.rings : void 0) || [];
    for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
      ring = _ref6[_j];
      this.helper.addRing(ring.x, ring.y);
    }
    return this.selectWorld(this.currentWorld());
  },
  centerAndShow: function(element, board) {
    var areaOffset, boardOffset, offset;
    offset = element.offset();
    boardOffset = this.$('.board').offset();
    areaOffset = this.el.offset();
    element.css({
      opacity: 0,
      top: (boardOffset.top - areaOffset.top) + (boardOffset.height / 2) - (offset.height / 2),
      left: (boardOffset.left - areaOffset.left) + (boardOffset.width / 2) - (offset.width / 2)
    });
    return element.animate({
      opacity: 0.9,
      duration: 500
    });
  },
  showMessage: function(type) {
    var equationArea,
      _this = this;
    this.$('.board').hide();
    equationArea = this.$('.equation_area');
    equationArea.html(this.$("." + type + "_message").html());
    equationArea.css({
      padding: '0 12px',
      textAlign: 'center'
    });
    return equationArea.find('.button').bind('touchstart', function() {
      return _this.showMenu(_this.levelSelector);
    });
  },
  isIos: function() {
    return navigator.userAgent.match(/(iPad|iPhone|iPod)/i);
  },
  selectWorld: function(index) {
    this.$('.world_link').removeClass('selected');
    $(this.$('.world_link')[index]).addClass('selected');
    this.$('.world').removeClass('selected');
    return $(this.$('.world')[index]).addClass('selected');
  },
  findLevel: function(levelId) {
    var level, stage, world, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.worlds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      world = _ref[_i];
      _ref1 = world.stages;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        stage = _ref1[_j];
        level = ((function() {
          var _k, _len2, _ref2, _results;
          _ref2 = stage.levels;
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            level = _ref2[_k];
            if (level.id === levelId) {
              _results.push(level);
            }
          }
          return _results;
        })())[0];
        if (level) {
          return JSON.parse(JSON.stringify(level));
        }
      }
    }
  },
  initLevel: function() {
    var _this = this;
    return setTimeout((function() {
      var _base, _base1, _name, _ref;
      (_base = _this.puzzleProgress)[_name = _this.level.id] || (_base[_name] = {});
      _this.load();
      (_base1 = _this.puzzleProgress[_this.level.id]).started || (_base1.started = new Date().getTime());
      return _this.setLevelIcon({
        id: _this.level.id,
        started: true,
        completed: (_ref = _this.puzzleProgress[_this.level.id]) != null ? _ref.completed : void 0
      });
    }), 100);
  },
  initSettings: function() {
    var _this = this;
    this.settings || (this.settings = this.$('.settings'));
    this.settings.bind('touchstart', function(e) {
      return e.stop();
    });
    this.settings.find('.add_player').bind('touchstart.add_player', function(e) {
      return _this.settings.find('.add_player').one('touchend.add_player', function(e) {
        return _this.addPlayer();
      });
    });
    this.settings.find('.edit_player').bind('touchstart.edit_player', function(e) {
      return _this.settings.find('.edit_player').one('touchend.edit_player', function(e) {
        return _this.editPlayer();
      });
    });
    return this.settings.find('.delete_player').bind('touchstart.delete_player', function(e) {
      return _this.settings.find('.delete_player').one('touchend.delete_player', function(e) {
        return _this.deletePlayer();
      });
    });
  },
  initLevelSelector: function(changedLevelId) {
    var previousCompleted, stageElement, _i, _len, _ref, _results,
      _this = this;
    this.levelSelector || (this.levelSelector = this.$('.level_selector'));
    this.levelSelector.bind('touchstart', function(e) {
      return e.stop();
    });
    previousCompleted = true;
    _ref = this.levelSelector.find('.stage');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      stageElement = _ref[_i];
      _results.push((function(stageElement) {
        var id, index, lastLevelId, levelElement, stageCompleted, _j, _len1, _ref1, _results1;
        stageCompleted = 0;
        _ref1 = $(stageElement).find('.level');
        _results1 = [];
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          levelElement = _ref1[index];
          levelElement = $(levelElement);
          lastLevelId = id;
          id = levelElement.data('id');
          if (!changedLevelId || changedLevelId === id || changedLevelId === lastLevelId) {
            _results1.push((function(levelElement, index) {
              var levelInfo, locked, _ref2, _ref3, _ref4;
              levelInfo = _this.findLevel(id);
              locked = !previousCompleted;
              if (index === 0) {
                locked = false;
              }
              _this.setLevelIcon({
                id: id,
                started: (_ref2 = _this.puzzleProgress[id]) != null ? _ref2.started : void 0,
                completed: (_ref3 = _this.puzzleProgress[id]) != null ? _ref3.completed : void 0,
                locked: locked
              });
              levelElement.unbind('touchstart.select_level');
              levelElement.bind('touchstart.select_level', function(e) {
                e.stop();
                if (!locked) {
                  levelElement.addClass('clicking');
                  _this.clear();
                  _this.level = levelInfo;
                  _this.initLevel();
                }
                return levelElement.one('touchend.select_level', function(e) {
                  levelElement.removeClass('clicking');
                  $(document.body).unbind('touchstart.level_selector');
                  if (locked) {
                    return alert('This level is locked.');
                  } else {
                    return _this.hideMenu(_this.levelSelector);
                  }
                });
              });
              if ((_ref4 = _this.puzzleProgress[id]) != null ? _ref4.completed : void 0) {
                stageCompleted += 1;
                return previousCompleted = true;
              } else {
                return previousCompleted = false;
              }
            })(levelElement, index));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })(stageElement));
    }
    return _results;
  },
  setLevelIcon: function(_arg) {
    var completed, id, level, locked, started;
    id = _arg.id, started = _arg.started, completed = _arg.completed, locked = _arg.locked;
    if (!id) {
      return;
    }
    level = this.$("#level_" + id);
    level.removeClass('locked').removeClass('completed');
    if (locked) {
      return level.addClass('locked');
    } else if (completed) {
      return level.addClass('completed');
    }
  },
  nextLevel: function() {
    var _this = this;
    this.puzzleProgress[this.level.id].completed = new Date().getTime();
    return $.timeout(1000, function() {
      var index, level, _i, _len, _ref;
      _this.initLevelSelector(_this.level.id);
      _ref = _this.$('.stage .level:last-child');
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        level = _ref[index];
        if (index % 2 === 1) {
          if (parseInt(_this.level.id) === parseInt($(level).data('id'))) {
            _this.selectWorld(Math.floor(index / 2) + 1);
          }
        }
      }
      return _this.showMenu(_this.levelSelector, true);
    });
  },
  showMenu: function(menu, success) {
    var _this = this;
    $(document.body).unbind('touchstart.hide_menu');
    if (parseInt(menu.css('opacity')) === 1) {
      this.hideMenu(menu);
      return;
    }
    menu.css({
      opacity: 1,
      top: 45,
      left: (this.el.width() - menu.width()) / 2
    });
    return $.timeout(50, function() {
      return $(document.body).one('touchstart.hide_menu', function() {
        return $(document.body).one('touchend.hide_menu', function() {
          return _this.hideMenu(menu);
        });
      });
    });
  },
  hideMenu: function(menu) {
    $(document.body).unbind('touchstart.hide_menu touchend.hide_menu');
    return menu.css({
      opacity: 0,
      top: -1000,
      left: -1000
    });
  }
};
