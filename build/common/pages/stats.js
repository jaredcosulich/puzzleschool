// Generated by CoffeeScript 1.3.3
var soma, sortLevels, wings;

soma = require('soma');

wings = require('wings');

sortLevels = function(levels) {
  return levels.sort(function(level1, level2) {
    var a, b;
    a = level1.difficulty + level1.id;
    b = level2.difficulty + level2.id;
    if (a === b) {
      return 0;
    } else {
      if (a < b) {
        return -1;
      } else {
        return 1;
      }
    }
  });
};

soma.chunks({
  Stats: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var page,
        _this = this;
      this.classId = _arg.classId, page = _arg.page;
      this.page = parseInt(page || 0);
      this.template = this.loadTemplate('/build/common/templates/stats.html');
      return this.loadData({
        url: "/api/classes/info/" + this.classId,
        success: function(data) {
          var level, levelClassInfos, _i, _len, _ref;
          _this.classInfo = data;
          _this.classInfo.levels = sortLevels(_this.classInfo.levels);
          levelClassInfos = [
            {
              objectType: 'class',
              objectId: _this.classId
            }
          ];
          _ref = _this.classInfo.levels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            level = _ref[_i];
            levelClassInfos.push({
              objectType: 'level_class',
              objectId: "" + level.id + "/" + _this.classId
            });
          }
          return _this.loadData({
            url: "/api/stats",
            data: {
              objectInfos: levelClassInfos
            },
            success: function(levelClassStats) {
              var i, stats, userId, userIdHash, userLevelClassInfos, _j, _k, _l, _len1, _len2, _len3, _len4, _m, _n, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
              userIdHash = {};
              _ref1 = levelClassStats.stats;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                stats = _ref1[_j];
                _ref2 = stats.users || [];
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  userId = _ref2[_k];
                  userIdHash[userId] = true;
                }
              }
              _this.users = ((function() {
                var _results;
                _results = [];
                for (userId in userIdHash) {
                  _results.push(userId);
                }
                return _results;
              })()).sort().slice(_this.page * 5, (_this.page + 1) * 5);
              if (_this.users.length >= (_this.page + 1) * 5) {
                _this.nextPage = true;
              }
              userLevelClassInfos = [];
              _ref3 = _this.classInfo.levels;
              for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                level = _ref3[_l];
                _ref4 = _this.users;
                for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                  userId = _ref4[_m];
                  userLevelClassInfos.push({
                    objectType: 'user_level_class',
                    objectId: "" + userId + "/" + level.id + "/" + _this.classId
                  });
                }
              }
              _this.stats = [];
              _results = [];
              for (i = _n = 0, _ref5 = userLevelClassInfos.length; _n <= _ref5; i = _n += 100) {
                _this.loadData({
                  url: "/api/stats",
                  data: {
                    objectInfos: userLevelClassInfos.slice(i, i + 100)
                  },
                  success: function(userLevelClassStats) {
                    var duration, levelId, minutes, seconds, stat, statsHash, userInfo, userStat, _len5, _len6, _len7, _o, _p, _q, _ref10, _ref11, _ref12, _ref13, _ref14, _ref6, _ref7, _ref8, _ref9, _results1;
                    statsHash = {};
                    _ref6 = userLevelClassStats.stats;
                    for (_o = 0, _len5 = _ref6.length; _o < _len5; _o++) {
                      stat = _ref6[_o];
                      userId = stat.objectId.split('/')[0];
                      levelId = stat.objectId.split('/')[1];
                      statsHash[levelId] || (statsHash[levelId] = {});
                      statsHash[levelId][userId] = stat;
                    }
                    _ref7 = _this.classInfo.levels;
                    _results1 = [];
                    for (_p = 0, _len6 = _ref7.length; _p < _len6; _p++) {
                      level = _ref7[_p];
                      userInfo = [];
                      _ref8 = _this.users;
                      for (_q = 0, _len7 = _ref8.length; _q < _len7; _q++) {
                        userId = _ref8[_q];
                        userStat = (_ref9 = statsHash[level.id]) != null ? _ref9[userId] : void 0;
                        duration = (userStat != null ? userStat.duration : void 0) || 0;
                        seconds = Math.round(duration / 1000);
                        minutes = Math.floor(seconds / 60);
                        seconds = seconds - (minutes * 60);
                        userInfo.push({
                          level: level.name,
                          user: userId,
                          attempted: (userStat ? true : false),
                          moves: (userStat != null ? userStat.moves : void 0) || 0,
                          hints: (userStat != null ? userStat.hints : void 0) || 0,
                          success: ((userStat != null ? (_ref10 = userStat.success) != null ? _ref10.length : void 0 : void 0) ? true : false),
                          successClass: ((userStat != null ? (_ref11 = userStat.hints) != null ? _ref11.length : void 0 : void 0) ? 'hard' : userStat != null ? (_ref12 = userStat.challenge) != null ? _ref12[0] : void 0 : void 0),
                          duration: "" + minutes + " min, " + seconds + " sec",
                          assessment: userStat != null ? (_ref13 = userStat.challenge) != null ? _ref13.length : void 0 : void 0,
                          challenge: userStat != null ? (_ref14 = userStat.challenge) != null ? _ref14[0] : void 0 : void 0
                        });
                      }
                      _results1.push(_this.stats.push({
                        levelName: level.name,
                        users: userInfo
                      }));
                    }
                    return _results1;
                  }
                });
                _results.push({
                  error: function() {
                    if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
                      return alert('We were unable to load stats for this class. Please check your internet connection.');
                    }
                  }
                });
              }
              return _results;
            },
            error: function() {
              if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
                return alert('We were unable to load stats for this class. Please check your internet connection.');
              }
            }
          });
        },
        error: function() {
          if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
            return alert('We were unable to load info for this class. Please check your internet connection.');
          }
        }
      });
    },
    build: function() {
      this.setTitle("Stats - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        className: this.classInfo.name,
        users: this.users,
        stats: this.stats,
        nextPage: this.nextPage,
        nextPageLink: "/stats/" + this.classId + "/{@page + 1}"
      });
    }
  }
});

soma.views({
  Stats: {
    selector: '#content .stats',
    create: function() {
      return $('.register_flag').hide();
    }
  }
});

soma.routes({
  '/stats/class/:classId': function(_arg) {
    var classId;
    classId = _arg.classId;
    return new soma.chunks.Stats({
      classId: classId
    });
  },
  '/stats/class/:classId/:page': function(_arg) {
    var classId, page;
    classId = _arg.classId, page = _arg.page;
    return new soma.chunks.Stats({
      classId: classId,
      page: page
    });
  }
});
