// Generated by CoffeeScript 1.3.3
var soma, sortLevels, wings;

soma = require('soma');

wings = require('wings');

sortLevels = function(levels) {
  return levels.sort(function(level1, level2) {
    var a, b;
    a = level1.difficulty + level1.id;
    b = level2.difficulty + level2.id;
    if (a === b) {
      return 0;
    } else {
      if (a < b) {
        return -1;
      } else {
        return 1;
      }
    }
  });
};

soma.chunks({
  Stats: {
    pageSize: 10,
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var page,
        _this = this;
      this.classId = _arg.classId, page = _arg.page;
      this.page = parseInt(page || 0);
      this.template = this.loadTemplate('/build/common/templates/stats.html');
      return this.loadData({
        url: "/api/classes/info/" + this.classId,
        success: function(data) {
          var info, levelClassInfos, levelId, _i, _len, _ref;
          _this.classInfo = data;
          _this.classInfo.levels = sortLevels(_this.classInfo.levels);
          levelClassInfos = [
            {
              objectType: 'class',
              objectId: _this.classId
            }
          ];
          _ref = _this.classInfo.levels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            info = _ref[_i];
            levelId = info.id || info;
            levelClassInfos.push({
              objectType: 'level_class',
              objectId: "" + levelId + "/" + _this.classId
            });
          }
          return _this.loadData({
            url: "/api/stats",
            data: {
              objectInfos: levelClassInfos
            },
            success: function(levelClassStats) {
              var i, stats, userId, userIdHash, userLevelClassInfos, _j, _k, _l, _len1, _len2, _len3, _len4, _m, _n, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
              userIdHash = {};
              _ref1 = levelClassStats.stats;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                stats = _ref1[_j];
                _ref2 = stats.users || [];
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  userId = _ref2[_k];
                  userIdHash[userId] = true;
                }
              }
              _this.users = ((function() {
                var _results;
                _results = [];
                for (userId in userIdHash) {
                  _results.push(userId);
                }
                return _results;
              })()).sort();
              if (_this.users.length >= (_this.page + 1) * _this.pageSize) {
                _this.nextPage = true;
              }
              userLevelClassInfos = [];
              _ref3 = _this.classInfo.levels;
              for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                info = _ref3[_l];
                levelId = info.id || info;
                _ref4 = _this.users.slice(_this.pageSize * _this.page, _this.pageSize * (_this.page + 1));
                for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                  userId = _ref4[_m];
                  userLevelClassInfos.push({
                    objectType: 'user_level_class',
                    objectId: "" + userId + "/" + levelId + "/" + _this.classId
                  });
                }
              }
              _this.statsHash = {};
              _results = [];
              for (i = _n = 0, _ref5 = userLevelClassInfos.length; _n <= _ref5; i = _n += 100) {
                _this.loadData({
                  url: "/api/stats",
                  data: {
                    objectInfos: userLevelClassInfos.slice(i, i + 100)
                  },
                  success: function(userLevelClassStats) {
                    var duration, minutes, seconds, stat, _base, _len5, _o, _ref10, _ref11, _ref6, _ref7, _ref8, _ref9, _results1;
                    _ref6 = userLevelClassStats.stats;
                    _results1 = [];
                    for (_o = 0, _len5 = _ref6.length; _o < _len5; _o++) {
                      stat = _ref6[_o];
                      userId = stat.objectId.split('/')[0];
                      levelId = stat.objectId.split('/')[1];
                      (_base = _this.statsHash)[userId] || (_base[userId] = {});
                      duration = stat.duration || 0;
                      seconds = Math.round(duration / 1000);
                      minutes = Math.floor(seconds / 60);
                      seconds = seconds - (minutes * 60);
                      _results1.push(_this.statsHash[userId][levelId] = {
                        level: levelId,
                        user: userId,
                        attempted: true,
                        moves: stat.moves || 0,
                        hints: stat.hints || 0,
                        success: (((_ref7 = stat.success) != null ? _ref7.length : void 0) ? true : false),
                        successClass: (((_ref8 = stat.hints) != null ? _ref8.length : void 0) ? 'hard' : (_ref9 = stat.challenge) != null ? _ref9[0] : void 0),
                        duration: "" + minutes + " min, " + seconds + " sec",
                        assessment: (_ref10 = stat.challenge) != null ? _ref10.length : void 0,
                        challenge: (_ref11 = stat.challenge) != null ? _ref11[0] : void 0
                      });
                    }
                    return _results1;
                  }
                });
                _results.push({
                  error: function() {
                    if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
                      return alert('We were unable to load stats for this class. Please check your internet connection.');
                    }
                  }
                });
              }
              return _results;
            },
            error: function() {
              if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
                return alert('We were unable to load stats for this class. Please check your internet connection.');
              }
            }
          });
        },
        error: function() {
          if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
            return alert('We were unable to load info for this class. Please check your internet connection.');
          }
        }
      });
    },
    build: function() {
      var info, levelId, levelInfo, levels, user, _i, _len, _ref, _ref1;
      this.stats = [];
      _ref = this.statsHash;
      for (user in _ref) {
        levelInfo = _ref[user];
        levels = [];
        _ref1 = this.classInfo.levels;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          info = _ref1[_i];
          levelId = info.id || info;
          info = levelInfo[levelId] || {
            user: user,
            attempted: false,
            moves: 0,
            hints: 0,
            success: false
          };
          info.level = info.name || levelId;
          levels.push(info);
        }
        this.stats.push({
          user: user,
          levels: levels
        });
      }
      this.stats.sort(function(a, b) {
        if (a.user > b.user) {
          return 1;
        } else {
          if (a.user < b.user) {
            return -1;
          } else {
            return 0;
          }
        }
      });
      this.setTitle("Stats - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        className: this.classInfo.name,
        users: this.users,
        stats: this.stats,
        nextPage: this.nextPage,
        nextPageLink: "/stats/class/" + this.classId + "/" + (this.page + 1),
        previousPage: this.page > 0,
        previousPageLink: "/stats/class/" + this.classId + "/" + (this.page - 1)
      });
    }
  }
});

soma.views({
  Stats: {
    selector: '#content .stats',
    create: function() {
      return $('.register_flag').hide();
    }
  }
});

soma.routes({
  '/stats/class/:classId': function(_arg) {
    var classId;
    classId = _arg.classId;
    return new soma.chunks.Stats({
      classId: classId
    });
  },
  '/stats/class/:classId/:page': function(_arg) {
    var classId, page;
    classId = _arg.classId, page = _arg.page;
    return new soma.chunks.Stats({
      classId: classId,
      page: page
    });
  }
});
