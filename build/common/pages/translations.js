// Generated by CoffeeScript 1.3.3
var soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  Translations: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function() {
      var _this = this;
      this.template = this.loadTemplate('/build/common/templates/translations.html');
      return this.loadData({
        url: '/api/language_scramble/translations/incomplete',
        success: function(incomplete) {
          var _ref, _ref1, _ref2, _ref3;
          _this.incomplete = incomplete;
          _this.incomplete.noTranslationCount = ((_ref = _this.incomplete.noTranslation) != null ? _ref.length : void 0) || 0;
          _this.incomplete.noBundleCount = ((_ref1 = _this.incomplete.noBundle) != null ? _ref1.length : void 0) || 0;
          _this.incomplete.notNativeVerifiedCount = ((_ref2 = _this.incomplete.notNativeVerified) != null ? _ref2.length : void 0) || 0;
          return _this.incomplete.notForeignVerifiedCount = ((_ref3 = _this.incomplete.notForeignVerified) != null ? _ref3.length : void 0) || 0;
        }
      });
    },
    build: function() {
      this.setTitle("Translations - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, this.incomplete);
    }
  }
});

soma.views({
  Translations: {
    selector: '#content .translations',
    create: function() {
      $('.register_flag').hide();
      this.initShowSection();
      this.initSaveButtons();
      this.initDatas();
      return this.initVerification();
    },
    initShowSection: function() {
      var link, _i, _len, _ref, _results,
        _this = this;
      _ref = this.$('.show_translation');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        _results.push((function(link) {
          _this.registerHashChange(link.id, function() {
            return _this.showSection(link.id);
          });
          return _this.$(link).bind('click', function() {
            return location.hash = link.id;
          });
        })(link));
      }
      return _results;
    },
    initSaveButtons: function() {
      var button, _i, _len, _ref, _results,
        _this = this;
      _ref = this.$('.save_button');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        _results.push((function(button) {
          return $(button).bind('click', function() {
            return _this.saveNewTranslation(button);
          });
        })(button));
      }
      return _results;
    },
    initDatas: function() {
      var dataLink, _i, _len, _ref, _results,
        _this = this;
      _ref = this.$('.data a');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dataLink = _ref[_i];
        _results.push((function(dataLink) {
          return $(dataLink).bind('click', function() {
            return _this.displayData(dataLink);
          });
        })(dataLink));
      }
      return _results;
    },
    initBundles: function() {
      var bundle, _i, _len, _ref, _results,
        _this = this;
      _ref = this.$('.bundles a');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bundle = _ref[_i];
        _results.push((function(bundle) {
          return $(bundle).bind('click', function() {
            return _this.setBundle($(bundle).html());
          });
        })(bundle));
      }
      return _results;
    },
    initVerification: function() {
      var verifyButton, _i, _len, _ref, _results,
        _this = this;
      _ref = this.$('.verify_button');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        verifyButton = _ref[_i];
        _results.push((function(verifyButton) {
          return $(verifyButton).bind('click', function() {
            var form;
            form = $(verifyButton).closest('.form_container').find('form');
            form.find('.verification_field').val('1');
            return _this.saveNewTranslation(verifyButton);
          });
        })(verifyButton));
      }
      return _results;
    },
    showSection: function(sectionName) {
      this.$('#translation_container')[0].className = sectionName;
      if (sectionName === 'no_translation') {
        this.loadNoTranslations();
      }
      if (sectionName === 'no_bundle') {
        this.loadNoBundle();
      }
      if (sectionName === 'not_native_verified') {
        this.loadNotNativeVerified();
      }
      if (sectionName === 'not_foreign_verified') {
        this.loadNotForeignVerified();
      }
      if (sectionName === 'bundle_list') {
        return this.loadBundleList();
      }
    },
    saveNewTranslation: function(button) {
      var form,
        _this = this;
      form = $(button).closest('.form_container').find('form');
      return $.ajaj({
        url: '/api/language_scramble/translations/save',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: form.data('form').dataHash(),
        success: function(data) {
          _this.data = data;
          form.find('input').val('');
          $(button).data('form-button').success();
          _this.updateIncomplete();
          if ($(button).data('callback')) {
            return _this[$(button).data('callback')]();
          }
        }
      });
    },
    loadIncompleteTranslations: function(callback) {
      var _this = this;
      return $.ajaj({
        url: '/api/language_scramble/translations/incomplete',
        method: 'GET',
        success: function(data) {
          _this.data = data;
          return callback();
        }
      });
    },
    getBundleList: function(callback) {
      var _this = this;
      return $.ajaj({
        url: '/api/language_scramble/bundles',
        method: 'GET',
        success: function(bundles) {
          return callback(bundles);
        }
      });
    },
    getBundle: function(name, callback) {
      var _this = this;
      return $.ajaj({
        url: "/api/language_scramble/bundle/" + name,
        method: 'GET',
        success: function(bundle) {
          return callback(bundle);
        }
      });
    },
    loadBundles: function(callback) {
      var _this = this;
      return this.getBundleList(function(bundles) {
        _this.displayBundles(bundles);
        return callback();
      });
    },
    loadBundleList: function() {
      var _this = this;
      return this.getBundleList(function(bundles) {
        return _this.displayBundleList(bundles);
      });
    },
    displayBundleList: function(bundles) {
      var bundle, dataArea, _i, _len, _results,
        _this = this;
      if (!(bundles != null ? bundles.length : void 0)) {
        return;
      }
      dataArea = this.$('#translation_container .bundle_list .bundle_list');
      dataArea.html('');
      _results = [];
      for (_i = 0, _len = bundles.length; _i < _len; _i++) {
        bundle = bundles[_i];
        _results.push((function(bundle) {
          var bundleLink;
          dataArea.append("<a>" + bundle + "</a>");
          bundleLink = dataArea.lastChild;
          return bundleLink.bind('click', function() {});
        })(bundle));
      }
      return _results;
    },
    displayBundles: function(bundles) {
      var bundle, dataArea, _i, _len;
      if (!(bundles != null ? bundles.length : void 0)) {
        return;
      }
      dataArea = this.$('#translation_container .no_bundle .bundles');
      dataArea.html('');
      for (_i = 0, _len = bundles.length; _i < _len; _i++) {
        bundle = bundles[_i];
        dataArea.append("<a>" + bundle + "</a>");
      }
      return this.initBundles();
    },
    setBundle: function(bundle) {
      return this.$('#translation_container .no_bundle .data').closest('.translation_area').find('input[name=\'bundle\']').val(bundle);
    },
    loadNoTranslations: function() {
      var _this = this;
      return this.loadIncompleteTranslations(function() {
        return _this.displayNoTranslations();
      });
    },
    loadNoBundle: function() {
      var _this = this;
      return this.loadBundles(function() {
        return _this.loadIncompleteTranslations(function() {
          return _this.displayTranslation(_this.$('.no_bundle'), _this.data.noBundle[0]);
        });
      });
    },
    loadNotNativeVerified: function() {
      var _this = this;
      return this.loadIncompleteTranslations(function() {
        return _this.displayNotNativeVerifieds();
      });
    },
    loadNotForeignVerified: function() {
      var _this = this;
      return this.loadIncompleteTranslations(function() {
        return _this.displayNotForeignVerifieds();
      });
    },
    updateIncomplete: function() {
      var _ref, _ref1, _ref2, _ref3;
      this.$('.no_translation_count').html("" + (((_ref = this.data.noTranslation) != null ? _ref.length : void 0) || 0));
      this.$('.no_bundle_count').html("" + (((_ref1 = this.data.noBundle) != null ? _ref1.length : void 0) || 0));
      this.$('.not_native_verified_count').html("" + (((_ref2 = this.data.notNativeVerified) != null ? _ref2.length : void 0) || 0));
      return this.$('.not_foreign_verified_count').html("" + (((_ref3 = this.data.notForeignVerified) != null ? _ref3.length : void 0) || 0));
    },
    displayTranslation: function(area, id) {
      var _this = this;
      return $.ajaj({
        url: "/api/language_scramble/translation/" + id,
        method: 'GET',
        success: function(translation) {
          return _this.fillInTranslationForm(area.find('.form_container'), translation);
        }
      });
    },
    displayNoTranslations: function() {
      var dataArea, noTranslation, _i, _len, _ref;
      if (!this.data.noTranslation) {
        return;
      }
      dataArea = this.$('#translation_container .no_translation .data');
      dataArea.html('');
      _ref = this.data.noTranslation;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        noTranslation = _ref[_i];
        dataArea.append("<a>" + noTranslation + "</a>");
      }
      this.initDatas();
      return this.displayData(dataArea.find('a')[0]);
    },
    displayNotNativeVerifieds: function() {
      var dataArea, notVerified, _i, _len, _ref;
      dataArea = this.$('#translation_container .not_native_verified .data');
      dataArea.html('');
      _ref = this.data.notNativeVerified;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        notVerified = _ref[_i];
        dataArea.append("<a>" + notVerified + "</a>");
      }
      this.initDatas();
      return this.displayData(dataArea.find('a')[0]);
    },
    displayNotForeignVerifieds: function() {
      var dataArea, notVerified, _i, _len, _ref;
      dataArea = this.$('#translation_container .not_foreign_verified .data');
      dataArea.html('');
      _ref = this.data.notForeignVerified;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        notVerified = _ref[_i];
        dataArea.append("<a>" + notVerified + "</a>");
      }
      this.initDatas();
      return this.displayData(dataArea.find('a')[0]);
    },
    displayData: function(element) {
      var area, data, formContainer, html;
      area = $(element).closest('.translation_area');
      formContainer = area.find('.form_container');
      if ((html = $(element).html()).indexOf('{') === 0) {
        data = JSON.parse(html);
        return this.fillInTranslationForm(formContainer, data);
      } else {
        return this.displayTranslation(area, html);
      }
    },
    fillInTranslationForm: function(formContainer, data) {
      var input, _i, _len, _ref, _results;
      _ref = formContainer.find('input');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        $(input).val(data[input.name] || '');
        if (input.name === 'noTranslation') {
          _results.push($(input).val(JSON.stringify(data)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  }
});

soma.routes({
  '/translations': function() {
    return new soma.chunks.Translations;
  }
});
