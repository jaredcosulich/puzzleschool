// Generated by CoffeeScript 1.3.3
var soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  Class: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var _this = this;
      this.id = _arg.id;
      this.template = this.loadTemplate('/build/common/templates/class.html');
      if (this.id) {
        return this.loadData({
          url: "/api/classes/info/" + this.id,
          success: function(data) {
            var level, _i, _len, _ref, _results;
            _this.classInfo = data;
            _ref = _this.classInfo.levels;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              level = _ref[_i];
              _results.push(level.classId = _this.classInfo.id);
            }
            return _results;
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load the information for this class. Please check your internet connection.');
            }
          }
        });
      }
    },
    build: function() {
      var _ref, _ref1, _ref2;
      this.setTitle("Your Class - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        id: (_ref = this.classInfo) != null ? _ref.id : void 0,
        className: ((_ref1 = this.classInfo) != null ? _ref1.name : void 0) || 'New Class',
        newClass: !(this.classInfo != null),
        levels: (_ref2 = this.classInfo) != null ? _ref2.levels : void 0
      });
    }
  }
});

soma.views({
  Class: {
    selector: '#content .class',
    create: function() {
      var _this = this;
      $('.register_flag').hide();
      this.$('form').bind('submit', function(e) {
        return e.stop();
      });
      this.$('button').bind('click', function(e) {
        return e.stop();
      });
      this.classInfo = {
        id: this.el.data('id')
      };
      this.initSaveClass();
      return this.initAddALevel();
    },
    initSaveClass: function() {
      var _this = this;
      this.$('.class_update').bind('submit', function() {
        return _this.saveClass();
      });
      this.$('.save_button').bind('click', function() {
        return _this.saveClass();
      });
      return this.$('.cancel_button').bind('click', function() {
        return _this.go('/');
      });
    },
    saveClass: function() {
      var dataHash,
        _this = this;
      dataHash = this.$('.class_update').data('form').dataHash();
      dataHash.id = this.el.data('id');
      return $.ajaj({
        url: '/api/classes/update',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: dataHash,
        success: function(classInfo) {
          return _this.go("/class/" + classInfo.id);
        }
      });
    },
    initAddALevel: function() {
      var _this = this;
      this.puzzles = {
        fractions: {
          levels: []
        }
      };
      this.$('.add_a_level').bind('click', function(e) {
        return _this.displayLevelSelector();
      });
      this.$('.create_level').bind('click', function(e) {
        return _this.showNewLevelForm($(e.currentTarget).closest('.level_selector').find('.new_level'));
      });
      this.$('.save_new_level_button').bind('click', function(e) {
        return _this.addNewLevel($(e.currentTarget).closest('.new_level'));
      });
      return this.$('.cancel_new_level_button').bind('click', function(e) {
        return _this.hideNewLevelForm($(e.currentTarget).closest('.new_level'));
      });
    },
    displayLevels: function(puzzle, area) {
      var level, levelNameComponents, tableHtml, _i, _len, _ref;
      area.html('');
      tableHtml = '<table>\n    <tbody>\n        <th>Name</th>\n        <th>Difficulty</th>\n        <th>Select</th>';
      _ref = this.puzzles[puzzle].levels.sort(function(a, b) {
        return a.difficulty - b.difficulty;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        level = _ref[_i];
        levelNameComponents = level.id.split(/\//g);
        tableHtml += "<tr>\n    <td>\n        <a href='/puzzles/light_it_up/" + level.id + "' target='_blank'>\n            " + level.name + "\n        </a>\n    </td>\n    <td>\n        " + level.difficulty + "\n    </td>\n    <td>\n        <a class='select_level' data-level=\"" + level.id + "\">\n            Select\n        </a>\n    </td>\n</tr>";
      }
      tableHtml += '</tbody></table>';
      area.html(tableHtml);
      return this.bindLevelLinks();
    },
    bindLevelLinks: function() {
      var _this = this;
      this.$('.select_level').unbind('click');
      return this.$('.select_level').bind('click', function(e) {
        return _this.selectLevel($(e.currentTarget).data('level'));
      });
    },
    showNewLevelForm: function(newLevel) {
      newLevel.css({
        display: 'block'
      });
      return newLevel.animate({
        opacity: 1,
        duration: 250
      });
    },
    hideNewLevelForm: function(newLevel) {
      return newLevel.animate({
        opacity: 0,
        duration: 250,
        complete: function() {
          return newLevel.css({
            display: 'none'
          });
        }
      });
    },
    selectLevel: function(levelId) {
      var _this = this;
      return $.ajaj({
        url: "/api/classes/levels/add/" + this.classInfo.id,
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: {
          level: levelId
        },
        success: function(classLevels) {
          var level, levelsListHtml, _i, _len, _ref;
          levelsListHtml = '';
          _ref = classLevels.levels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            level = _ref[_i];
            levelsListHtml += "<li><a href='/puzzles/fractions/" + _this.classInfo.id + "/{level.id}' target='_blank'>\n    " + level.name + "\n</a></li>";
          }
          _this.$('.class_puzzles').html(levelsListHtml);
          return _this.hideLevelSelector();
        }
      });
    },
    addNewLevel: function(newLevelContainer) {
      var dataHash,
        _this = this;
      dataHash = newLevelContainer.find('form').data('form').dataHash();
      dataHash.classId = this.classInfo.id;
      return $.ajaj({
        url: '/api/puzzles/fractions/add_level',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: dataHash,
        success: function(levelInfo) {
          _this.puzzles.fractions.levels.push(levelInfo);
          _this.displayLevels('fractions', newLevelContainer.closest('.level_selector').find('.levels'));
          return _this.hideNewLevelForm(newLevelContainer);
        }
      });
    },
    displayLevelSelector: function() {
      var levelSelector,
        _this = this;
      levelSelector = this.$('.level_selector');
      levelSelector.css({
        opacity: 0,
        top: 100,
        left: 100
      });
      levelSelector.animate({
        opacity: 1,
        duration: 250
      });
      return $.ajaj({
        url: '/api/puzzles/fractions/levels',
        method: 'GET',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        success: function(levelData) {
          _this.puzzles.fractions.levels = levelData.levels || [];
          return _this.displayLevels('fractions', levelSelector.find('.levels'));
        },
        error: function() {
          return levelSelector.find('.levels').html('No levels yet');
        }
      });
    },
    hideLevelSelector: function() {
      var levelSelector,
        _this = this;
      levelSelector = this.$('.level_selector');
      return levelSelector.animate({
        opacity: 0,
        duration: 250,
        complete: function() {
          return levelSelector.css({
            top: -1000,
            left: -1000
          });
        }
      });
    }
  }
});

soma.routes({
  '/class': function() {
    return new soma.chunks.Class;
  },
  '/class/:id': function(data) {
    return new soma.chunks.Class({
      id: data.id
    });
  }
});
