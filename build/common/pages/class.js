// Generated by CoffeeScript 1.3.3
var soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  Class: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var _this = this;
      this.id = _arg.id;
      this.template = this.loadTemplate('/build/common/templates/class.html');
      if (this.id) {
        return this.loadData({
          url: "/api/classes/info/" + this.id,
          success: function(data) {
            return _this.classInfo = data;
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load the information for this class. Please check your internet connection.');
            }
          }
        });
      }
    },
    build: function() {
      var _ref, _ref1;
      this.setTitle("Your Class - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        id: (_ref = this.classInfo) != null ? _ref.id : void 0,
        className: ((_ref1 = this.classInfo) != null ? _ref1.name : void 0) || 'New Class'
      });
    }
  }
});

soma.views({
  Class: {
    selector: '#content .class',
    create: function() {
      var _this = this;
      $('.register_flag').hide();
      this.form = this.$('form');
      this.form.bind('submit', function(e) {
        e.stop();
        return _this.save();
      });
      this.$('.save_button').bind('click', function(e) {
        e.stop();
        return _this.save();
      });
      return this.$('.cancel_button').bind('click', function(e) {
        e.stop();
        return _this.go('/');
      });
    },
    save: function() {
      var dataHash,
        _this = this;
      dataHash = this.form.data('form').dataHash();
      dataHash.id = this.el.data('id');
      return $.ajaj({
        url: '/api/classes/update',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: dataHash,
        success: function(classInfo) {
          return _this.go("/class/" + classInfo.id);
        }
      });
    }
  }
});

soma.routes({
  '/class': function() {
    return new soma.chunks.Class;
  },
  '/class/:id': function(data) {
    return new soma.chunks.Class({
      id: data.id
    });
  }
});
