// Generated by CoffeeScript 1.3.3
var soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  LanguageScramble: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var _this = this;
      this.languages = _arg.languages, this.levelName = _arg.levelName;
      this.template = this.loadTemplate('/build/common/templates/puzzles/language_scramble.html');
      this.loadScript('/build/common/pages/puzzles/lib/language_scramble.js');
      this.loadStylesheet('/build/client/css/puzzles/language_scramble.css');
      this.puzzleData = {
        levels: {}
      };
      if (this.cookies.get('user')) {
        return this.loadData({
          url: '/api/puzzles/language_scramble',
          success: function(data) {
            var level, levelInfo, _ref, _results;
            if (data.puzzle != null) {
              _this.puzzleData = data.puzzle;
              _ref = _this.puzzleData.levels;
              _results = [];
              for (levelName in _ref) {
                levelInfo = _ref[levelName];
                languages = levelName.split(/\//)[0];
                level = levelName.split(/\//)[1];
                if (!_this.puzzleData.levels[languages]) {
                  _this.puzzleData.levels[languages] = {};
                }
                _this.puzzleData.levels[languages][level] = levelInfo;
                _results.push(delete _this.puzzleData.levels[levelName]);
              }
              return _results;
            }
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load your account information. Please check your internet connection.');
            }
          }
        });
      }
    },
    build: function() {
      var languageScramble;
      this.setTitle("Language Scramble - The Puzzle School");
      this.setMeta('og:title', 'Language Scramble - The Puzzle School');
      this.setMeta('og:url', 'http://www.puzzleschool.com/puzzles/language_scramble');
      this.setMeta('og:image', 'http://www.puzzleschool.com/assets/images/reviews/language_scramble.jpg');
      this.setMeta('og:site_name', 'The Puzzle School');
      this.setMeta('og:description', 'Practice vocabulary and common sentences in your favorite foreign language. Much more fun than flash cards.');
      languageScramble = require('./lib/language_scramble');
      if (!(this.languages && this.languages.length)) {
        this.languages = this.puzzleData.lastLanguages || 'english_italian';
      }
      if (!(this.levelName && this.levelName.length)) {
        this.levelName = this.puzzleData.lastLevelPlayed || 'top10words';
      }
      if (!this.puzzleData.levels[this.languages]) {
        this.puzzleData.levels[this.languages] = {};
      }
      this.chunkHelper = new languageScramble.ChunkHelper(this.languages, this.levelName, this.puzzleData);
      return this.html = wings.renderTemplate(this.template, {
        puzzleData: JSON.stringify(this.puzzleData),
        languages: this.languages,
        displayLanguages: this.chunkHelper.displayLanguages(),
        title: this.chunkHelper.level.title,
        subtitle: this.chunkHelper.level.subtitle,
        data: this.chunkHelper.level.data,
        levelName: this.levelName,
        allLevels: this.chunkHelper.allLevels()
      });
    }
  }
});

soma.views({
  LanguageScramble: {
    selector: '#content .language_scramble',
    create: function() {
      var languageScramble,
        _this = this;
      languageScramble = require('./lib/language_scramble');
      this.puzzleData = JSON.parse(this.el.data('puzzle_data'));
      this.languages = this.el.data('languages');
      this.levelName = this.el.data('level_name');
      this.viewHelper = new languageScramble.ViewHelper({
        el: $(this.selector),
        puzzleData: this.puzzleData,
        languages: this.languages,
        saveProgress: function(puzzleProgress) {
          return _this.saveProgress(puzzleProgress);
        }
      });
      this.viewHelper.setLevel(this.levelName);
      this.viewHelper.bindWindow();
      this.viewHelper.bindKeyPress();
      return this.viewHelper.newScramble();
    },
    saveProgress: function(puzzleProgress, callback) {
      var languages, levelInfo, levelName, levelUpdates, levels, puzzleUpdates, _ref,
        _this = this;
      if (this.cookies.get('user')) {
        puzzleUpdates = this.getUpdates(puzzleProgress);
        if (!puzzleUpdates) {
          return;
        }
        levelUpdates = {};
        _ref = puzzleUpdates.levels;
        for (languages in _ref) {
          levels = _ref[languages];
          for (levelName in levels) {
            levelInfo = levels[levelName];
            levelUpdates["" + languages + "/" + levelName] = levelInfo;
          }
        }
        delete puzzleUpdates.levels;
        return $.ajaj({
          url: "/api/puzzles/language_scramble/update",
          method: 'POST',
          headers: {
            'X-CSRF-Token': this.cookies.get('_csrf', {
              raw: true
            })
          },
          data: {
            puzzleUpdates: puzzleUpdates,
            levelUpdates: levelUpdates
          },
          success: function() {
            _this.puzzleData = JSON.parse(JSON.stringify(puzzleProgress));
            if (callback) {
              return callback();
            }
          }
        });
      } else if (puzzleProgress.levels) {
        window.postRegistration.push(function(callback) {
          return _this.saveProgress(puzzleProgress, callback);
        });
        if (!this.answerCount) {
          this.answerCount = 0;
        }
        this.answerCount += 1;
        if (this.answerCount > 7) {
          if (this.answerCount % 8 === 0) {
            return this.showRegistrationFlag();
          }
        }
      }
    },
    compareItem: function(current, original) {
      if (!original) {
        return current;
      }
      if (typeof current === 'object') {
        return this.compareHashes(current, original);
      } else if (Array.isArray(current)) {
        return this.compareArrays(current, original);
      } else {
        if (current !== original) {
          return current;
        }
      }
    },
    compareHashes: function(current, original) {
      var diff, diffValue, key, value;
      diff = {};
      for (key in current) {
        value = current[key];
        diffValue = this.compareItem(value, original[key]);
        if (diffValue != null) {
          diff[key] = diffValue;
        }
      }
      if (Object.keys(diff).length > 0) {
        return diff;
      }
    },
    compareArrays: function(current, original) {
      var diff, diffValue, index, item, _i, _len;
      diff = [];
      for (index = _i = 0, _len = current.length; _i < _len; index = ++_i) {
        item = current[index];
        diffValue = this.compareItem(item, original[index]);
        if (diffValue != null) {
          diff.push(diffValue);
        }
      }
      if (diff.length > 0) {
        return diff;
      }
    },
    getUpdates: function(progress) {
      return this.compareHashes(progress, this.puzzleData);
    }
  }
});

soma.routes({
  '/puzzles/language_scramble/:languages/:levelName': function(data) {
    return new soma.chunks.LanguageScramble({
      languages: data.languages,
      levelName: data.levelName
    });
  },
  '/puzzles/language_scramble/:languages': function(data) {
    return new soma.chunks.LanguageScramble({
      languages: data.languages
    });
  },
  '/puzzles/language_scramble': function() {
    return new soma.chunks.LanguageScramble;
  }
});
