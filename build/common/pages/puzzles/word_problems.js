// Generated by CoffeeScript 1.3.3
var LEVELS, soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  WordProblems: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      this.classId = _arg.classId, this.levelId = _arg.levelId;
      this.template = this.loadTemplate("/build/common/templates/puzzles/word_problems.html");
      this.loadScript('/build/common/pages/puzzles/lib/word_problems.js');
      return this.loadStylesheet('/build/client/css/puzzles/word_problems.css');
    },
    build: function() {
      this.setTitle("Interactive Word Problems - The Puzzle School");
      return this.html = wings.renderTemplate(this.template);
    }
  }
});

soma.views({
  WordProblems: {
    selector: '#content .word_problems',
    create: function() {
      this.level = LEVELS[0];
      return this.initLevel();
    },
    initLevel: function() {
      this.$('.problem').html(this.highlightProblem(this.level.problem));
      return this.initNumbers();
    },
    highlightProblem: function(problem) {
      return problem.replace(/(\d+)/g, '<span class=\'number\'>$1</span>');
    },
    initNumbers: function() {
      var index, number, _i, _len, _ref, _results;
      _ref = this.$('.problem .number');
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        number = _ref[index];
        number = $(number);
        number.addClass("color_" + (index + 1));
        _results.push(this.createNumber(number.html(), index + 1));
      }
      return _results;
    },
    createNumber: function(value, index) {
      var number;
      number = $(document.createElement('DIV'));
      number.addClass('number');
      number.addClass("color_" + index);
      number.html("<div class='settings'>\n    <i class='icon-cog'></i>\n</div>\n<h3 class='value'>" + value + "</h3>\n<div class='ranges'></div>");
      this.$('.numbers').append(number);
      return this.setNumber(number, value);
    },
    createRange: function(container, magnitude) {
      var i, range, _fn, _i,
        _this = this;
      range = $(document.createElement('DIV'));
      range.addClass('range');
      range.addClass("range_" + magnitude);
      _fn = function(i) {
        var index, label;
        index = $(document.createElement('DIV'));
        index.addClass('index');
        label = $(document.createElement('DIV'));
        label.addClass('label');
        label.html("" + (i * Math.pow(10, magnitude)));
        index.append(label);
        range.append(index);
        return index.bind('click', function() {
          var digits;
          digits = _this.getDigits(_this.getNumber(container));
          digits[digits.length - magnitude - 1] = i;
          return _this.setNumber(container, digits.join(''));
        });
      };
      for (i = _i = 1; _i <= 10; i = ++_i) {
        _fn(i);
      }
      container.find('.ranges').prepend(range);
      return range;
    },
    getNumber: function(container) {
      return container.data('value');
    },
    getDigits: function(number) {
      return number.toString().match(/\d/g);
    },
    setNumber: function(container, value) {
      var digit, digits, i, index, m, magnitude, range, _i, _j, _len, _len1, _ref;
      value = parseInt(value);
      digits = this.getDigits(value);
      for (m = _i = 0, _len = digits.length; _i < _len; m = ++_i) {
        digit = digits[m];
        magnitude = digits.length - m - 1;
        if (!(range = container.find(".range_" + magnitude)).length) {
          range = this.createRange(container, magnitude, digit);
        }
        range.css({
          fontSize: 50 - (10 * m)
        });
        _ref = range.find('.index');
        for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
          index = _ref[i];
          index = $(index);
          if ((i + 1) > parseInt(digit)) {
            index.removeClass('icon-circle');
            if (!index.hasClass('icon-circle-blank')) {
              index.addClass('icon-circle-blank');
            }
          } else {
            index.removeClass('icon-circle-blank');
            if (!index.hasClass('icon-circle')) {
              index.addClass('icon-circle');
            }
          }
        }
      }
      container.find('.value').html("" + value);
      return container.data('value', value);
    }
  }
});

soma.routes({
  '/puzzles/word_problems/:classId/:levelId': function(_arg) {
    var classId, levelId;
    classId = _arg.classId, levelId = _arg.levelId;
    return new soma.chunks.WordProblems({
      classId: classId,
      levelId: levelId
    });
  },
  '/puzzles/word_problems/:levelId': function(_arg) {
    var levelId;
    levelId = _arg.levelId;
    return new soma.chunks.WordProblems({
      levelId: levelId
    });
  },
  '/puzzles/word_problems': function() {
    return new soma.chunks.WordProblems;
  }
});

LEVELS = [
  {
    id: 1367965328479,
    difficulty: 1,
    problem: 'Jane has 9 balloons. 6 are green and the rest are blue. How many balloons are blue?'
  }
];
