// Generated by CoffeeScript 1.3.3
var soma, sortLevels, wings;

soma = require('soma');

wings = require('wings');

sortLevels = function(levels) {
  return levels.sort(function(level1, level2) {
    var a, b;
    a = level1.difficulty + level1.name;
    b = level2.difficulty + level2.name;
    if (a === b) {
      return 0;
    } else {
      if (a < b) {
        return -1;
      } else {
        return 1;
      }
    }
  });
};

soma.chunks({
  SpaceFractions: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var _this = this;
      this.classId = _arg.classId, this.levelId = _arg.levelId;
      this.template = this.loadTemplate("/build/common/templates/puzzles/space_fractions.html");
      this.loadScript('/build/common/pages/puzzles/lib/space_fractions.js');
      if (this.levelId === 'editor') {
        this.loadScript('/build/common/pages/puzzles/lib/space_fractions_editor.js');
      }
      this.loadStylesheet('/build/client/css/puzzles/space_fractions.css');
      if (this.levelId && !isNaN(this.levelId)) {
        this.loadData({
          url: "/api/puzzles/levels/" + this.levelId,
          success: function(levelInfo) {
            _this.levelInfo = levelInfo;
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load the information for this level. Please check your internet connection.');
            }
          }
        });
      }
      if (this.classId) {
        return this.loadData({
          url: "/api/classes/info/" + this.classId,
          success: function(data) {
            var level, _i, _len, _ref;
            _this.classInfo = data;
            _ref = _this.classInfo.levels;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              level = _ref[_i];
              level.classId = _this.classInfo.id;
            }
            return _this.classInfo.levels = sortLevels(_this.classInfo.levels);
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load the information for this class. Please check your internet connection.');
            }
          }
        });
      }
    },
    build: function() {
      var row, rows, _ref, _ref1;
      this.setTitle("Light It Up - The Puzzle School");
      rows = (function() {
        var _i, _results;
        _results = [];
        for (row = _i = 0; _i < 10; row = ++_i) {
          _results.push({
            columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          });
        }
        return _results;
      })();
      return this.html = wings.renderTemplate(this.template, {
        levelId: this.levelId || 0,
        classId: this.classId || 0,
        custom: this.levelId === 'custom',
        editor: this.levelId === 'editor',
        rows: rows,
        instructions: (_ref = this.levelInfo) != null ? _ref.instructions : void 0,
        isClass: (this.classInfo ? true : false),
        levels: (_ref1 = this.classInfo) != null ? _ref1.levels : void 0
      });
    }
  }
});

soma.views({
  SpaceFractions: {
    selector: '#content .space_fractions',
    create: function() {
      var existingHashChange, introMessage, spaceFractions, spaceFractionsEditor,
        _this = this;
      spaceFractions = require('./lib/space_fractions');
      this.viewHelper = new spaceFractions.ViewHelper({
        el: $(this.selector),
        rows: 10,
        columns: 10,
        registerEvent: function(eventInfo) {
          return _this.registerEvent(eventInfo);
        }
      });
      this.user = this.cookies.get('user');
      this.initEncode();
      this.classId = this.el.data('class_id');
      if (this.classId && (isNaN(this.classId) && !this.classId.length)) {
        this.classId = null;
      }
      if (this.classId) {
        if (!this.user) {
          $('#base').data().base.showRegistration();
        }
      }
      this.levelId = this.el.data('level_id');
      if (this.levelId && (isNaN(this.levelId) && !this.levelId.length)) {
        this.levelId = null;
      }
      if (!this.levelId) {
        introMessage = this.$('.intro');
        introMessage.css({
          top: ($.viewport().height / 2) - (introMessage.height() / 2) + window.scrollY,
          left: ($.viewport().width / 2) - (introMessage.width() / 2)
        });
        introMessage.animate({
          opacity: 1,
          duration: 500
        });
      } else if (this.levelId === 'editor') {
        spaceFractionsEditor = require('./lib/space_fractions_editor');
        this.editor = new spaceFractionsEditor.EditorHelper({
          el: $(this.selector),
          viewHelper: this.viewHelper,
          encodeMethod: function(json) {
            return _this.encode(json);
          }
        });
        this.$('.load_custom_level_data').bind('click', function() {
          _this.$('.level_editor').css({
            height: 'auto'
          });
          return _this.$('.load_custom_level_data').hide();
        });
      } else if (this.levelId === 'custom') {
        this.currentHash = window.location.hash.toString();
        existingHashChange = window.onhashchange;
        window.onhashchange = function() {
          if (window.location.hash.toString() === _this.currentHash) {
            return;
          }
          if (_this.decode(decodeURIComponent(window.location.hash.replace(/^#/, '')))[0] === '{') {
            return window.location.reload();
          } else {
            existingHashChange();
            return window.location.hash = _this.currentHash;
          }
        };
        this.$('.load_custom_level_data').bind('click', function() {
          _this.$('.custom_level').css({
            height: 'auto'
          });
          return _this.$('.load_custom_level_data').hide();
        });
        this.$('.load_to_play').bind('click', function() {
          return _this.viewHelper.loadToPlay(_this.$('.level_description').val());
        });
      }
      this.loadLevelData(window.location.hash || this.$('.level_instructions').html());
      this.initInstructions();
      this.sendingEvents = 0;
      this.initLevelSelector();
      return this.initChallengeAssessment();
    },
    loadLevelData: function(instructions) {
      var level;
      instructions = instructions.replace(/\s/g, '');
      if (!(instructions != null ? instructions.length : void 0)) {
        return;
      }
      level = this.decode(decodeURIComponent(instructions.replace(/^#/, '')));
      if (level[0] !== '{') {
        return;
      }
      if (this.levelId === 'editor') {
        this.editor.levelDescription.val(level);
        return this.editor.load();
      } else {
        this.$('.level_description').val(level);
        return this.viewHelper.loadToPlay(level);
      }
    },
    initInstructions: function() {
      var _this = this;
      return this.$('.instructions_link').bind('click', function() {
        var instructions;
        instructions = _this.$('.instructions');
        instructions.css({
          top: ($.viewport().height / 2) - (instructions.height() / 2) + window.scrollY,
          left: ($.viewport().width / 2) - (instructions.width() / 2)
        });
        instructions.animate({
          opacity: 1,
          duration: 500
        });
        return $.timeout(10, function() {
          return $(document.body).one('click', function() {
            return instructions.animate({
              opacity: 0,
              duration: 500,
              complete: function() {
                return instructions.css({
                  top: -1000,
                  left: -1000
                });
              }
            });
          });
        });
      });
    },
    initLevelSelector: function() {
      var _this = this;
      return this.$('.show_level_selector').bind('click.level_selector', function() {
        var intro;
        _this.$('.success').animate({
          opacity: 0,
          duration: 500
        });
        intro = _this.$('.intro');
        if (!intro.hasClass('only_levels')) {
          intro.addClass('only_levels');
        }
        intro.css({
          top: _this.el.offset().top + (_this.el.height() / 2) - (intro.height() / 2),
          left: _this.el.offset().left + (_this.el.width() / 2) - (intro.width() / 2)
        });
        intro.animate({
          opacity: 1,
          duration: 250
        });
        return _this.viewHelper.board.one('click.level_selector', function() {
          return intro.animate({
            opacity: 0,
            duration: 250,
            complete: function() {
              return intro.css({
                top: -1000,
                left: -1000
              });
            }
          });
        });
      });
    },
    initChallengeAssessment: function() {
      var _this = this;
      if (this.levelId === 'custom') {
        this.$('.success .challenge_assessment').hide();
        return this.$('.success .next_level').css({
          opacity: 1
        });
      } else {
        this.$('.success .next_level').hide();
        return this.$('.success .challenge_assessment a').one('click', function(e) {
          var challengeAssessment, link;
          link = $(e.currentTarget);
          _this.registerEvent({
            type: 'challenge',
            info: {
              assessment: link[0].className,
              time: new Date()
            }
          });
          challengeAssessment = link.closest('.challenge_assessment');
          return challengeAssessment.animate({
            opacity: 0,
            duration: 250,
            complete: function() {
              var nextLevel;
              challengeAssessment.hide();
              nextLevel = link.closest('.success').find('.next_level');
              nextLevel.css({
                display: 'block'
              });
              return nextLevel.animate({
                opacity: 1,
                duration: 250
              });
            }
          });
        });
      }
    },
    initEncode: function() {
      var object;
      this.encodeMap = {
        '"objects"': '~o',
        '"type"': '~t',
        '"index"': '~i',
        '"numerator"': '~n',
        '"denominator"': '~d',
        '"fullNumerator"': '~fN',
        '"fullDenominator"': '~fD',
        '"verified"': '~v',
        'true': '~u',
        'false': '~f'
      };
      for (object in this.viewHelper.objects) {
        this.encodeMap['"' + object + '"'] = "!" + (object.split(/_/ig).map(function(section) {
          return section[0];
        }).join(''));
      }
      return this.extraEncodeMap = {
        ':': '-',
        '"': '*',
        ',': "'",
        '=': '+',
        '{': '(',
        '}': ')'
      };
    },
    encode: function(json) {
      var encode, extraEncode, key, regExp, _i, _len, _ref,
        _this = this;
      _ref = ((function() {
        var _results;
        _results = [];
        for (key in this.encodeMap) {
          _results.push(key);
        }
        return _results;
      }).call(this)).sort(function(a, b) {
        return b.length - a.length;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        encode = _ref[_i];
        regExp = new RegExp(encode, 'g');
        json = json.replace(regExp, this.encodeMap[encode]);
      }
      for (extraEncode in this.extraEncodeMap) {
        regExp = new RegExp('\\' + extraEncode, 'g');
        json = json.replace(regExp, this.extraEncodeMap[extraEncode]);
      }
      return json;
    },
    decode: function(json) {
      var encode, extraEncode, key, regExp, _i, _len, _ref,
        _this = this;
      _ref = ((function() {
        var _results;
        _results = [];
        for (key in this.encodeMap) {
          _results.push(key);
        }
        return _results;
      }).call(this)).sort(function(a, b) {
        return b.length - a.length;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        encode = _ref[_i];
        regExp = new RegExp(this.encodeMap[encode], 'g');
        json = json.replace(regExp, encode);
      }
      for (extraEncode in this.extraEncodeMap) {
        regExp = new RegExp('\\' + this.extraEncodeMap[extraEncode], 'g');
        json = json.replace(regExp, extraEncode);
      }
      return json;
    },
    registerEvent: function(_arg) {
      var info, type;
      type = _arg.type, info = _arg.info;
      if (!(this.user && this.user.id && this.levelId && this.classId)) {
        return;
      }
      this.pendingEvents || (this.pendingEvents = []);
      this.pendingEvents.push({
        type: type,
        info: JSON.stringify(info),
        puzzle: 'fractions',
        classId: this.classId,
        levelId: this.levelId
      });
      if (!this.lastEvent) {
        this.timeBetweenEvents = 0;
        this.lastEvent = new Date();
      } else {
        this.timeBetweenEvents += new Date().getTime() - this.lastEvent.getTime();
        this.lastEvent = new Date();
      }
      return this.sendEvents(type === 'success' || type === 'challenge');
    },
    sendEvents: function(force) {
      var completeEventRecording, event, key, pendingEvents, statUpdates, timeBetweenEvents, updates, _i, _len, _ref,
        _this = this;
      if (!force) {
        if (!((_ref = this.pendingEvents) != null ? _ref.length : void 0)) {
          return;
        }
        if (this.sendingEvents > 0) {
          return;
        }
      }
      this.sendingEvents += 2;
      pendingEvents = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.pendingEvents;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          event = _ref1[_i];
          _results.push(event);
        }
        return _results;
      }).call(this);
      this.pendingEvents = [];
      timeBetweenEvents = this.timeBetweenEvents;
      this.timeBetweenEvents = 0;
      statUpdates = {
        user: {
          objectType: 'user',
          objectId: this.user.id,
          actions: []
        },
        "class": {
          objectType: 'class',
          objectId: this.classId,
          actions: []
        },
        levelClass: {
          objectType: 'level_class',
          objectId: "" + this.levelId + "/" + this.classId,
          actions: []
        },
        userLevelClass: {
          objectType: 'user_level_class',
          objectId: "" + this.user.id + "/" + this.levelId + "/" + this.classId,
          actions: []
        }
      };
      statUpdates.user.actions.push({
        attribute: 'levelClasses',
        action: 'add',
        value: ["" + this.levelId + "/" + this.classId]
      });
      statUpdates["class"].actions.push({
        attribute: 'users',
        action: 'add',
        value: [this.user.id]
      });
      statUpdates.levelClass.actions.push({
        attribute: 'users',
        action: 'add',
        value: [this.user.id]
      });
      statUpdates.userLevelClass.actions.push({
        attribute: 'duration',
        action: 'add',
        value: timeBetweenEvents
      });
      for (_i = 0, _len = pendingEvents.length; _i < _len; _i++) {
        event = pendingEvents[_i];
        if (event.type === 'move') {
          statUpdates.userLevelClass.actions.push({
            attribute: 'moves',
            action: 'add',
            value: 1
          });
        }
        if (event.type === 'hint') {
          statUpdates.userLevelClass.actions.push({
            attribute: 'hints',
            action: 'add',
            value: 1
          });
        }
        if (event.type === 'success') {
          statUpdates.userLevelClass.actions.push({
            attribute: 'success',
            action: 'add',
            value: [JSON.parse(event.info).time]
          });
        }
        if (event.type === 'challenge') {
          statUpdates.userLevelClass.actions.push({
            attribute: 'challenge',
            action: 'add',
            value: [JSON.parse(event.info).assessment]
          });
        }
      }
      updates = (function() {
        var _results;
        _results = [];
        for (key in statUpdates) {
          _results.push(JSON.stringify(statUpdates[key]));
        }
        return _results;
      })();
      completeEventRecording = function() {
        _this.sendingEvents -= 1;
        if (_this.sendingEvents < 0) {
          _this.sendingEvents = 0;
        }
        return _this.sendEvents();
      };
      $.ajaj({
        url: '/api/events/create',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: {
          events: pendingEvents
        },
        success: function() {
          return completeEventRecording();
        }
      });
      return $.ajaj({
        url: '/api/stats/update',
        method: 'POST',
        headers: {
          'X-CSRF-Token': this.cookies.get('_csrf', {
            raw: true
          })
        },
        data: {
          updates: updates
        },
        success: function() {
          return completeEventRecording();
        }
      });
    }
  }
});

soma.routes({
  '/puzzles/space_fractions/:classId/:levelId': function(_arg) {
    var classId, levelId;
    classId = _arg.classId, levelId = _arg.levelId;
    return new soma.chunks.SpaceFractions({
      classId: classId,
      levelId: levelId
    });
  },
  '/puzzles/space_fractions/:levelId': function(_arg) {
    var levelId;
    levelId = _arg.levelId;
    return new soma.chunks.SpaceFractions({
      levelId: levelId
    });
  },
  '/puzzles/space_fractions': function() {
    return new soma.chunks.SpaceFractions;
  },
  '/puzzles/light_it_up/:classId/:levelId': function(_arg) {
    var classId, levelId;
    classId = _arg.classId, levelId = _arg.levelId;
    return new soma.chunks.SpaceFractions({
      classId: classId,
      levelId: levelId
    });
  },
  '/puzzles/light_it_up/:levelId': function(_arg) {
    var levelId;
    levelId = _arg.levelId;
    return new soma.chunks.SpaceFractions({
      levelId: levelId
    });
  },
  '/puzzles/light_it_up': function() {
    return new soma.chunks.SpaceFractions;
  }
});
