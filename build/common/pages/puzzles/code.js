// Generated by CoffeeScript 1.3.3
var STAGES, soma, wings,
  _this = this;

soma = require('soma');

wings = require('wings');

soma.chunks({
  Code: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var _this = this;
      this.classId = _arg.classId, this.levelId = _arg.levelId;
      this.template = this.loadTemplate("/build/common/templates/puzzles/code.html");
      this.loadScript('/assets/third_party/ace/ace.js');
      this.loadScript('/build/common/pages/puzzles/lib/code.js');
      this.loadStylesheet('/build/client/css/puzzles/code.css');
      this.puzzleData = {
        levels: {}
      };
      if (this.cookies.get('user')) {
        this.loadData({
          url: '/api/puzzles/code',
          success: function(data) {
            return _this.puzzleData = data.puzzle;
          },
          error: function() {
            if (typeof window !== "undefined" && window !== null ? window.alert : void 0) {
              return alert('We were unable to load your account information. Please check your internet connection.');
            }
          }
        });
      }
      if (!this.levelId) {
        return this.levelId = STAGES[0].levels[0].id;
      }
    },
    build: function() {
      this.setTitle("Code Puzzles - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        puzzleData: JSON.stringify(this.puzzleData),
        level: this.levelId,
        stages: STAGES
      });
    }
  }
});

soma.views({
  Code: {
    selector: '#content .code',
    create: function() {
      var code, puzzleData,
        _this = this;
      code = require('./lib/code');
      if ((puzzleData = this.el.data('puzzle_data')).length) {
        this.puzzleData = JSON.parse(puzzleData);
      } else {
        this.puzzleData = {
          levels: {}
        };
      }
      this.originalHTML = this.el.find('.dynamic_content').html();
      this.level = this.findLevel(this.el.data('level'));
      this.helper = new code.ViewHelper({
        el: this.el,
        completeLevel: function() {
          return _this.completeLevel();
        }
      });
      this.initLevelSelector();
      this.initActions();
      this.initPuzzleProgress();
      return this.initLevel();
    },
    initPuzzleProgress: function() {
      this.puzzleProgress = {};
      return this.puzzleProgress[this.level.id] = {};
    },
    initActions: function() {
      var _this = this;
      this.$('.select_level').bind('click', function() {
        return _this.showLevelSelector();
      });
      return this.$('.reset_level').bind('click', function() {
        return _this.initLevel();
      });
    },
    findLevel: function(levelId, nextLevel) {
      var foundLevel, level, stage, _i, _j, _len, _len1, _ref;
      if (nextLevel == null) {
        nextLevel = false;
      }
      foundLevel = false;
      for (_i = 0, _len = STAGES.length; _i < _len; _i++) {
        stage = STAGES[_i];
        _ref = stage.levels;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          level = _ref[_j];
          if (level.id === levelId || foundLevel) {
            if (foundLevel || !nextLevel) {
              return level;
            }
            foundLevel = true;
          }
        }
      }
    },
    initLevel: function() {
      var _this = this;
      this.el.find('.dynamic_content').html(this.originalHTML);
      return setTimeout((function() {
        var _base, _base1, _name, _ref;
        (_base = _this.puzzleProgress)[_name = _this.level.id] || (_base[_name] = _this.puzzleData.levels[_this.level.id] || {});
        _this.helper.initLevel(_this.level);
        (_base1 = _this.puzzleProgress[_this.level.id]).started || (_base1.started = new Date().getTime());
        _this.saveProgress();
        return _this.setLevelIcon({
          id: _this.level.id,
          started: true,
          completed: (_ref = _this.puzzleData.levels[_this.level.id]) != null ? _ref.completed : void 0
        });
      }), 100);
    },
    initLevelSelector: function() {
      var levelElement, _i, _len, _ref, _results,
        _this = this;
      this.levelSelector = this.$('.level_selector');
      _ref = this.levelSelector.find('.level');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        levelElement = _ref[_i];
        _results.push((function(levelElement) {
          var id, levelInfo, lockId, locked, _j, _len1, _ref1, _ref2, _ref3, _ref4;
          levelElement = $(levelElement);
          id = levelElement.data('id');
          levelInfo = _this.findLevel(id);
          locked = false;
          _ref1 = levelInfo.lockedBy || [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            lockId = _ref1[_j];
            if (!((_ref2 = _this.puzzleData.levels[lockId]) != null ? _ref2.completed : void 0)) {
              locked = true;
              break;
            }
          }
          _this.setLevelIcon({
            id: id,
            started: (_ref3 = _this.puzzleData.levels[id]) != null ? _ref3.started : void 0,
            completed: (_ref4 = _this.puzzleData.levels[id]) != null ? _ref4.completed : void 0,
            locked: locked
          });
          levelElement.unbind('click');
          return levelElement.bind('click', function(e) {
            e.stop();
            $(document.body).unbind('click.level_selector');
            if (locked) {
              return alert('This level is locked.');
            } else {
              _this.selectLevel(id);
              return _this.hideLevelSelector();
            }
          });
        })(levelElement));
      }
      return _results;
    },
    selectLevel: function(id) {
      this.level = this.findLevel(id);
      this.initLevel();
      return history.pushState(null, null, "/puzzles/code/" + id);
    },
    setLevelIcon: function(_arg) {
      var completed, id, levelIcon, locked, replace, started;
      id = _arg.id, started = _arg.started, completed = _arg.completed, locked = _arg.locked;
      levelIcon = this.$("#level_" + id).find('img');
      if (locked) {
        replace = '_locked';
      } else if (started) {
        replace = '_started';
        if (completed) {
          replace = '_complete';
        }
      } else {
        replace = '';
      }
      return levelIcon.attr('src', levelIcon.attr('src').replace(/level(_[a-z]+)*\./, "level" + replace + "."));
    },
    completeLevel: function() {
      var challengeText, test, _i, _len, _ref,
        _this = this;
      this.puzzleProgress[this.level.id].completed = new Date().getTime();
      this.saveProgress();
      this.initLevelSelector();
      _ref = this.level.tests;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        test = _ref[_i];
        if (test.clean) {
          test.clean();
        }
      }
      challengeText = this.$('.challenge .text');
      return challengeText.animate({
        opacity: 0,
        duration: 250,
        complete: function() {
          challengeText.html('<h3 class=\'success\'>Success! <a class=\'next_level\'>Next Level</a></h3>');
          return $.timeout(100, function() {
            challengeText.find('.next_level').bind('click', function() {
              return _this.nextLevel();
            });
            return challengeText.animate({
              opacity: 1,
              duration: 250
            });
          });
        }
      });
    },
    nextLevel: function() {
      var nextLevel;
      nextLevel = this.findLevel(this.level.id, true);
      return this.selectLevel(nextLevel.id);
    },
    showLevelSelector: function(success) {
      var _this = this;
      $(document.body).unbind('click.level_selector');
      if (parseInt(this.levelSelector.css('opacity')) === 1) {
        this.hideLevelSelector();
        return;
      }
      if (success) {
        this.levelSelector.addClass('success');
      } else {
        this.levelSelector.removeClass('success');
      }
      this.levelSelector.css({
        opacity: 0,
        top: 60,
        left: (this.el.width() - this.levelSelector.width()) / 2
      });
      this.levelSelector.animate({
        opacity: 1,
        duration: 250
      });
      return setTimeout((function() {
        return $(document.body).one('click.level_selector', function() {
          return _this.hideLevelSelector();
        });
      }), 10);
    },
    hideLevelSelector: function() {
      var _this = this;
      $(document.body).unbind('click.level_selector');
      return this.levelSelector.animate({
        opacity: 0,
        duration: 250,
        complete: function() {
          return _this.levelSelector.css({
            top: -1000,
            left: -1000
          });
        }
      });
    },
    saveProgress: function(callback) {
      var _this = this;
      this.mergeProgress(this.puzzleProgress);
      if (this.cookies.get('user')) {
        return $.ajaj({
          url: "/api/puzzles/code/update",
          method: 'POST',
          headers: {
            'X-CSRF-Token': this.cookies.get('_csrf', {
              raw: true
            })
          },
          data: {
            puzzleUpdates: {},
            levelUpdates: this.puzzleProgress
          },
          success: function() {
            if (callback) {
              return callback();
            }
          }
        });
      } else {
        window.postRegistration.push(function(callback) {
          return _this.saveProgress(callback);
        });
        if (Object.keys(this.puzzleProgress).length >= 3) {
          return this.showRegistrationFlag();
        }
      }
    },
    mergeProgress: function(progress, master) {
      var key, value, _results;
      if (master == null) {
        master = this.puzzleData.levels;
      }
      _results = [];
      for (key in progress) {
        value = progress[key];
        if (typeof value === 'object') {
          master[key] = {};
          _results.push(this.mergeProgress(value, master[key]));
        } else {
          _results.push(master[key] = value);
        }
      }
      return _results;
    }
  }
});

soma.routes({
  '/puzzles/code/:classId/:levelId': function(_arg) {
    var classId, levelId;
    classId = _arg.classId, levelId = _arg.levelId;
    return new soma.chunks.Code({
      classId: classId,
      levelId: levelId
    });
  },
  '/puzzles/code/:levelId': function(_arg) {
    var levelId;
    levelId = _arg.levelId;
    return new soma.chunks.Code({
      levelId: levelId
    });
  },
  '/puzzles/code': function() {
    return new soma.chunks.Code;
  }
});

STAGES = [
  {
    name: 'Basic HTML',
    levels: [
      {
        id: 1361991179382,
        challenge: 'Figure out how to change the word "Welcome" to the word "Hello World\'".',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n    <body>\n        <h1>Welcome</h1>\n    </body>\n</html>'
          }
        ],
        description: '<p>\n    The code displayed in the \'editor\' (where it says \'Page HTML\') \n    is all the code you need to create the simplest website.\n</p>\n<p>\n    The &lt;h1&gt; is used to designate important information and so is displayed in\n    bold large text.\n</p>\n<p>\n    You can learn more about the &lt;h1&gt; tag by googling:\n    <a href=\'https://www.google.com/search?q=h1+tag\' target=\'_blank\'>\'h1 tag\'</a>.\n</p>',
        hints: ['The \'editor\', where you see the words \'Page HTML\' is editable.', 'In the editor, change the word \'Welcome\' to \'Hello World\''],
        tests: [
          {
            description: 'The content contains an &lt;h1&gt; tag with html content \'Hello World\'.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return cleanHtml(frameBody.find('h1').html()) === 'hello world';
            }
          }
        ]
      }, {
        id: 1361991210187,
        challenge: 'Figure out how to print the words \'html tags are easy\' in an &lt;h1&gt; tag.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n    <body>\n        \n    </body>\n</html>'
          }
        ],
        description: '<p>\n    Here we\'ve removed the tag from the body of the html.\n</p>\n<p>\n    You simply need to put it back and don\'t forget to close the tag.\n</p>',
        hints: ['Create a new &lt;h1&gt; tag by typing "&lt;h1&gt;" between &lt;body&gt; and &lt;/body&gt;', 'You need to close the &lt;h1&gt; tag with a closing tag.', 'The closing tag looks like &lt;/h1&gt;'],
        tests: [
          {
            description: 'The content contains an &lt;h1&gt; tag with html content \'html tags are easy\'.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return cleanHtml(frameBody.find('h1').html()) === 'html tags are easy';
            }
          }, {
            description: 'The &lt;h1&gt; tag is properly closed.',
            test: function(_arg) {
              var frameBody;
              frameBody = _arg.frameBody;
              return frameBody.html().indexOf('</h1>') > -1;
            }
          }
        ]
      }, {
        id: 1361997759104,
        challenge: 'Figure out how to change the smallest text to \'this is the smallest header\'.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n    <body>\n        <h2>This is a header</h2>\n        <h4>This is a header</h4>\n        <h6>This is a header</h6>\n        <h1>This is a header</h1>\n        <h5>This is a header</h5>\n        <h3>This is a header</h3>\n    </body>\n</html>'
          }
        ],
        description: '<p>\n    Here is a simply demo of all of the available header tags.\n</p>\n<p>\n    As you can see they range in size, designating the intent to show important information.\n</p>',
        hints: ['The &lt;h4&gt; is smaller than the &lt;h3&gt; tag.', 'Change the text inside the &lt;h6&gt; tag.'],
        tests: [
          {
            description: 'The header with the smallest text size contains the text \'this is the smallest header\'.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return cleanHtml(frameBody.find('h6').html()) === 'this is the smallest header';
            }
          }
        ]
      }, {
        id: 1362028733004,
        challenge: 'Figure out how to make the text \'such as the &lt;b&gt; tag\' bold using the &lt;b&gt; tag.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>Playing With Tags</h1>\n    <p>\n      The &lt;p&gt; tag is for paragraph text.\n    </p>\n    <p>\n      If can contain other tags, such as the \n      &lt;b&gt; tag, which makes text bold.\n    </p>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    There are many html tags, each of which have different attributes.\n</p>\n<p>\n    You can find a list of available html tags by googling \n    <a href=\'https://www.google.com/search?q=html+tags\' target=\'_blank\'>html tags</a>\n</p>\n<p>\n    In order to make a tag display in plain text you need to use an html character entity.\n</p>\n<p>\n    You can find a full list of character entitities <a href=\'http://www.w3schools.com/html/html_entities.asp\' target=\'_blank\'>here</a>.\n</p>',
        hints: ['Wrap text in an html tag to apply the attributes of that tag.', 'Simply put a &lt;b&gt; before the \'such as the &lt;b&gt; tag\' text and a &lt;b&gt; after.', 'In the end it should look like &lt;b&gt;such as the &amp;lt;b&amp;gt; tag&lt;/b&gt; with no comma inside the tag.'],
        tests: [
          {
            description: 'There is a &lt;b&gt; tag with the html \'such as the &lt;b&gt; tag\'.',
            test: function(_arg) {
              var cleanHtml, frameBody, html;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              html = cleanHtml(frameBody.find('b').html());
              return html === 'such as the &lt;b&gt; tag';
            }
          }
        ]
      }, {
        id: 1362074585433,
        challenge: 'Figure out how to change the link to display and direct to a new website.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>Linking Fun</h1>\n    <p>\n      Anchor tags (&lt;a&gt;) can be used to place a link to another website on your page.\n    </p>\n    <p>\n      This link goes to <a href=\'http://puzzleschool.com\' target=\'_new\'>The Puzzle School</a>.\n    </p>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    The anchor (&lt;a&gt;) tag allows you to jump to another anchor point.\n</p>\n<p>\n    The anchor point can be on the same page or a new page.\n</p>\n<p>\n    Anchor tags are usually used to link to another website using the \'href\' attribute.\n</p>',
        hints: ['The \'href\' attribute within a link (&lt;a&gt;) tag describes the destination of the link.', 'Change the href attribute to point to a different website besides http://puzzleschool.com', 'To change the title of the link, simply edit the html inside.', 'Change the text \'The Puzzle School\' to a different website\'s name.'],
        tests: [
          {
            description: 'The &lt;a&gt; tag has a link to a new website.',
            test: function(_arg) {
              var cleanHtml, frameBody, link;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              link = frameBody.find('a');
              if (link.attr('href') === 'http://puzzleschool.com') {
                return false;
              }
              return true;
            }
          }, {
            description: 'The &lt;a&gt; tag\'s html if for a different website.',
            test: function(_arg) {
              var cleanHtml, frameBody, link;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              link = frameBody.find('a');
              if (link.html() === 'The Puzzle School') {
                return false;
              }
              return true;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Basic Styles',
    levels: [
      {
        id: 1362072970429,
        challenge: 'Figure out how to make the header text red.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 style=\'color: green\'>Playing With Tags</h1>\n    <p>\n      Html tags can contain attributes that modify the behavior of the tag.\n    </p>\n    <p>\n      This is an example of an attribute modifying the tags style.\n    </p>\n    <p>\n      The \'style\' attribute with a value of \'color: green\' is making the &lt;h1&gt; turn green.\n    </p>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    You can modify the attributes of a given tag by adding different attributes within the tag.\n</p>',
        hints: ['Look for the word \'green\' in the html.', 'Change the word \'green\' to the word \'red\'.'],
        tests: [
          {
            description: 'The &lt;h1&gt; tag has a color of red.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return frameBody.find('h1').css('color') === 'red';
            }
          }
        ]
      }, {
        id: 1363103796080,
        challenge: 'Figure out how to stretch the Puzzle School logo so that it is 200px tall.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>Images</h1>\n    <p>\n      Image tags (&lt;img&gt;) can be used to display an image on your website.\n    </p>\n    <p>\n      Try to figure out how to stretch the Puzzle School logo image so that it is 200px tall.\n    </p>\n    <img src=\'/assets/images/logo_icon.png\' width=117 />\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Image tags (&lt;img&gt;) are commonly seen on websites. They allow you to display images.\n</p>\n<p>\n    Like all html elements there are a number of attributes that you can add to an image tag\n    that will change how it is displayed on your website.\n</p>\n<p>\n    In this example we\'re trying to change the height of the image by using the height attribute.\n</p>',
        hints: ['The height attribute works exactly like the width attribute.', 'Add a height attribute to the image tag.', 'The height attribute should look like \'height=200\'.'],
        tests: [
          {
            description: 'The &lt;img&gt; element is 200px tall.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (frameBody.find('img').height() === 200) {
                return true;
              }
              return false;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Javascript: Some Simple Exercises',
    levels: [
      {
        id: 1381036475100,
        challenge: 'Figure out how to change the text in the header from "Welcome" to "Hello World".',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var header = document.getElementById(\'header\');\nheader.innerHTML = \'Welcome\';'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Welcome</h1>\n    <p>\n      Javascript lets you perform dynamic and interactive actions.\n    </p>\n    <p>\n      In this case we\'re just changing the html inside the h1 element.\n    </p>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Javascript lets you dynamically change the content of a page.\n</p>\n<p>\n    In this case we are changing the html inside the h1 tag with the id, "header".\n</p>\n<p>\n    The innerHTML property on the h1 tag can be changed through javascript.\n</p>',
        hints: ['The innerHTML property lets you set the html inside a tag.', 'Set the innerHTML property to "Hello World", instead of "Welcome".'],
        tests: [
          {
            description: 'The content contains an &lt;h1&gt; tag with html content \'Hello World\'.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return cleanHtml(frameBody.find('h1').html()) === 'hello world';
            }
          }
        ]
      }, {
        id: 1381037360102,
        challenge: 'Figure out how to change the color of the header tag to green.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var header = document.getElementById(\'header\');\nheader.style.backgroundColor = \'red\';'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Playing With Attributes</h1>\n    <p>\n      Javascript gives you access to all aspects of the html.\n    </p>\n    <p>\n      In this case we\'re changing the backgroundColor of the h1 element.\n    </p>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    There are many attributes that you can access about every html tag.\n</p>\n<p>\n    In this case we are changing the backgroundColor of the element.\n</p>\n<p>\n    We can access the backgroundColor through the style attribute.\n</p>',
        hints: ['The style attribute lets us change all aspects of an element\'s style.', 'We can change the backgroundColor property of the style attribute.', 'Change the backgroundColor to "green" instead of "red".'],
        tests: [
          {
            description: 'The backgroundColor of the &lt;h1&gt; tag is \'green\'.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return frameBody.find('h1').css('backgroundColor') === 'green';
            }
          }
        ]
      }, {
        id: 1381038695554,
        challenge: 'Figure out how to increase the width of the box to 300px.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var box = document.getElementById(\'box\');\nbox.style.backgroundColor = \'red\';\nbox.style.width = \'100px\';\nbox.style.height = \'100px\';'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Drawing A Box</h1>\n    <div id=\'box\'></div>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    This is a simple example of drawing something in javascript.\n</p>\n<p>\n    We\'ve drawn a simple box and can manipulate it\'s color, height, width, etc.\n</p>',
        hints: ['The width attribute controls with width of the div.', 'Change the width attribute to be \'300px\' instead of \'100px\'.'],
        tests: [
          {
            description: 'The &lt;div&gt; with an id of \'box\' has a width of 300px.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return frameBody.find('#box').width() === 300;
            }
          }
        ]
      }, {
        id: 1381163443472,
        challenge: 'Figure out how to calculate and display the result of 119 + 271 on the page.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var result = document.getElementById(\'result\');\nresult.innerHTML = 1 + 2;'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>A Little Math</h1>\n    <p>One of the most useful applications of programming is to do calculations.</p>\n    <h3>119 + 271 = <span id=\'result\'></span></h3>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    This is a simple example of using javascript to perform a mathematical calculation.\n</p>\n<p>\n    We\'re performing a basic addition calculation and displaying the result.\n</p>\n<p>\n    You can use many mathematical operators (+ - * / = ^ %) directly in javascript.\n</p>',
        hints: ['You can do math in javascript by simply using the plus sign (+).', 'Set the innerHTML of the result span to 119 + 271.'],
        tests: [
          {
            description: "The &lt;span&gt; with an id of \'result\' has innerHTML set to " + (119 + 271) + ".",
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              return frameBody.find('#result').html() === ("" + (119 + 271));
            }
          }
        ]
      }
    ]
  }, {
    name: 'Javascript: Global Functions',
    levels: [
      {
        id: 1362617406338,
        challenge: 'Figure out how to display an alert that says \'Hello World\' instead of \'Welcome\'.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var button = document.getElementById(\'alert_button\');\nbutton.onclick = function () {\n  alert(\'Welcome\')\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Alerts</h1>\n    <p>\n      Javascript lets you send messages to your user using the \'alert\' method.\n    </p>\n    <p>\n      An alert will cause a message to pop up. The alert function looks like alert(\'Welcome\');\n    </p>\n    <p>\n      Try to change the message of the alert that you see when you click this button:\n    </p>\n    <button id=\'alert_button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Javascript is all about interactions.\n</p>\n<p>\n    In this case the interaction is a button click causing an message to be displayed to the user.\n</p>\n<p>\n    The message is displayed using the \'alert\' function. The alert function looks like alert(\'Welcome\');\n</p>',
        hints: ['The text that you pass in to the \'alert\' function will be displayed in the alert message.', 'Change the text from \'Welcome\' to \'Hello World\''],
        tests: [
          {
            description: 'An alert with the words \'Hello World\' is displayed.',
            test: function(_arg) {
              var cleanHtml, frameBody, frameWindow;
              frameWindow = _arg.frameWindow, frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.done) {
                return true;
              }
              if (frameWindow.alertFunction) {
                return;
              }
              frameWindow.alertFunction = frameWindow.alert;
              frameWindow.alert = function(message) {
                if (message.toLowerCase() === 'hello world') {
                  _this.done = true;
                  window.retest();
                }
                return frameWindow.alertFunction(message);
              };
              return false;
            },
            clean: function() {
              return delete _this.done;
            }
          }
        ]
      }, {
        id: 1362636644492,
        challenge: 'Figure out how to change the text displayed by the prompt to green..',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var button = document.getElementById(\'prompt_button\');\nbutton.onclick = function () {\n  var text = prompt(\'What text should I display in green?\');\n  var textArea = document.getElementById(\'text_area\');\n  textArea.innerHTML = text;\n  textArea.style.color = \'red\';\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Prompts</h1>\n    <p>\n      Javascript also let\'s you ask the user something using the \'prompt\' method.\n    </p>\n    <p>\n      A prompt will cause a box to pop up with a message and a text box.\n    </p>\n    <p>\n      Try to change the color of the text that is displayed when you click the button and\n      to show the prompt below:\n    </p>\n    <button id=\'prompt_button\'>Click Me</button>\n    <h2 id=\'text_area\'></h2>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Javascript is all about interactions.\n</p>\n<p>\n    In this case the interaction is a prompt that asks the user to provide some input.\n</p>\n<p>\n    The input from the user is captured in a variable that can be displayed on the page\n    or used for another purpose.\n</p>',
        hints: ['The input from the prompt is stored in the \'text\' variable.', 'The \'text\' variable is then displayed in the \'text_area\' element.', 'Change the color of the \'text_area\' element to red to complete the challenge.'],
        tests: [
          {
            description: 'The input from the prompt is displayed in green.',
            test: function(_arg) {
              var cleanHtml, frameBody, textArea;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              textArea = frameBody.find('#text_area');
              if (textArea.css('color') === 'green' && textArea.html().length) {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1363805122021,
        challenge: 'Figure out how to make the header turn green in one second.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var header = document.getElementById(\'header\');\nvar button = document.getElementById(\'button\');\nbutton.onclick = function() {\n  setTimeout(function() {\n    header.style.color = \'red\';\n  }, 100)\n}'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>setTimeout</h1>\n    <p>\n      The setTimeout method allows you to call a method at a specified time in the future.\n    </p>\n    <p>\n      In this case we\'re calling a method that changes the header to the color green.\n    </p>\n    <p>\n      Try to make the button change the color of the header to green in one second\n      instead of red in 100 milliseconds.\n    </p>\n    <button id=\'button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    SetTimeout allows you to delay the execution of a function by a specified amount of time.\n</p>\n<p>\n    SetTimeout takes two parameters. The first is the function that will be executed, the second\n    is the delay (in milliseconds) that should pass before the function is executed.\n</p>',
        hints: ['You\'ll need to edit the existing setTimeout to change the color to green instead of red.', 'You\'ll also need to set the time to one second (1000 milliseconds) instead of 100 milliseconds', 'The code should look something like:<br/><br/>\n<span class=\'code_sample\'>\nsetTimeout(function() {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'green\';<br/>\n}, 1000)\n</span>'],
        tests: [
          {
            description: 'The header changes to the color green after 1000 milliseconds.',
            test: function(_arg) {
              var button, cleanHtml, frameBody, header;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.testPassed) {
                return true;
              }
              header = frameBody.find('#header');
              button = frameBody.find('#button');
              button.bind('mouseup', function() {
                var startTime;
                if (_this.buttonTest) {
                  clearInterval(_this.buttonTest);
                }
                startTime = new Date();
                return _this.buttonTest = setInterval((function() {
                  if (new Date() - startTime < 950) {
                    if (header.css('color') === 'green') {
                      return clearInterval(_this.buttonTest);
                    }
                  } else if (header.css('color') === 'green') {
                    _this.testPassed = true;
                    return window.retest();
                  }
                }), 100);
              });
              return false;
            },
            clean: function() {
              clearInterval(_this.buttonTest);
              delete _this.buttonTest;
              return delete _this.testPassed;
            }
          }
        ]
      }, {
        id: 1363805134953,
        challenge: 'Figure out how to make the header turn green in one second and then red one second later.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var header = document.getElementById(\'header\');\nvar button = document.getElementById(\'button\');\nbutton.onclick = function() {\n  setTimeout(function() {\n    header.style.color = \'green\';\n  }, 1000)\n}'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Multiple setTimeouts</h1>\n    <p>\n      In this case you\'ll need to set up another setTimeout that changes the color\n      of the header from green to red two seconds after the button is clicked.\n    </p>\n    <button id=\'button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    SetTimeout allows you to delay the execution of a function by a specified amount of time.\n</p>\n<p>\n    SetTimeout takes two parameters. The first is the function that will be executed, the second\n    is the delay (in milliseconds) that should pass before the function is executed.\n</p>',
        hints: ['In this case you\'ll need to create a new setTimeout call.', 'You can pretty much copy and paste the existing setTimeout call, just change the color and the time.', 'The new setTimeout can come after the existing one and should look something like:<br/><br/>\n<span class=\'code_sample\'>\nsetTimeout(function() {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'red\';<br/>\n}, 2000)\n</span>'],
        tests: [
          {
            description: 'The header changes to the color green after 1000 milliseconds.',
            test: function(_arg) {
              var button, cleanHtml, frameBody, header;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.testPassed) {
                return true;
              }
              header = frameBody.find('#header');
              button = frameBody.find('#button');
              button.bind('mouseup.test', function() {
                var startTime;
                if (_this.buttonTest) {
                  clearInterval(_this.buttonTest);
                }
                startTime = new Date();
                return _this.buttonTest = setInterval((function() {
                  if (new Date() - startTime < 950) {
                    if (header.css('color') === 'green') {
                      return clearInterval(_this.buttonTest);
                    }
                  } else if (header.css('color') === 'green') {
                    _this.testPassed = true;
                    return window.retest();
                  }
                }), 100);
              });
              return false;
            },
            clean: function() {
              clearInterval(_this.buttonTest);
              delete _this.buttonTest;
              return delete _this.testPassed;
            }
          }, {
            description: 'The header changes to the color red after 2000 milliseconds.',
            test: function(_arg) {
              var button, cleanHtml, frameBody, header;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.test2Passed) {
                return true;
              }
              header = frameBody.find('#header');
              button = frameBody.find('#button');
              button.bind('mouseup.test2', function() {
                var startTime;
                if (_this.button2Test) {
                  clearInterval(_this.button2Test);
                }
                startTime = new Date();
                return _this.button2Test = setInterval((function() {
                  if (new Date() - startTime < 1950) {
                    if (header.css('color') === 'red') {
                      return clearInterval(_this.buttonTest);
                    }
                  } else if (header.css('color') === 'red') {
                    _this.test2Passed = true;
                    return window.retest();
                  }
                }), 100);
              });
              return false;
            },
            clean: function() {
              clearInterval(_this.button2Test);
              delete _this.button2Test;
              return delete _this.test2Passed;
            }
          }
        ]
      }, {
        id: 1362099940993,
        challenge: 'Figure out how to make the number on the page count up to 10.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'if (window.counterInterval) {\n    window.clearInterval(window.counterInterval);\n}\n\nwindow.counterInterval = setInterval(function() {\n  var counter = document.getElementById(\'counter\');\n  if (!counter) return;\n      \n  var value = parseInt(counter.innerHTML);\n  value += 1;\n  if (value > 5) {\n    value = 1;\n  }\n  counter.innerHTML = value;\n  \n}, 1000);                        '
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>setInterval</h1>\n    <p>\n      The setInterval method allows you to call a method at a specified interval.\n    </p>\n    <p>\n      In this case we\'re calling a method changes increments the counter below every second.\n    </p>\n    <p>\n      Try to make the counter below count to 10 instead of 5:\n    </p>\n    <h2 id=\'counter\'>1</h2>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    There is a lot going on in this example, but we\'re focusing on the setInterval function.\n</p>\n<p>\n    To learn more about setInterval, try googling it :)\n</p>',
        hints: ['The function resets when the html in the &lt;h2&gt hits 5.', 'Change the reset value to 10.', 'The reset value is set in this line: if (value > 5) {', 'Change the 5 in that line to 10'],
        tests: [
          {
            description: 'The html inside the &lt;h2&gt; tag reads 10.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (cleanHtml(frameBody.find('h2').html()) === '10') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Javascript: Binding (HTML Interactions)',
    levels: [
      {
        id: 1362424704636,
        challenge: 'Figure out how to make the button turn the header color green instead or red.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var button = document.getElementById(\'color_button\');\nbutton.onclick = function () {\n  var header = document.getElementById(\'header\');\n  header.style.color = \'red\';\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Button Binding</h1>\n    <p>\n      Javascript lets you attach or bind actions to html elements on the page.\n    </p>\n    <p>\n      In this case clicking the button below will turn change the color of\n      the header from black to red.\n    </p>\n    <p>\n      Try to make the button change the color of the header to green instead:\n    </p>\n    <button id=\'color_button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Javascript makes it possible to bind an action to an html element.\n</p>\n<p>\n    Binding means that a function will be executed when an action takes place.\n</p>\n<p>\n    In this example the color of the header changes when the button is clicked.\n</p>',
        hints: ['Javascript can access the color attribute using \'.style.color\'', 'Change the function to set .style.color to \'green\''],
        tests: [
          {
            description: 'The color of the &lt;h2&gt; element is green.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (frameBody.find('#header').css('color') === 'green') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1363712528879,
        challenge: 'Figure out how to make an alert display reading \'The Puzzle School\' when you mouseover the logo.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var logo = document.getElementById(\'logo\');\nlogo.onclick = function () {\n  alert(\'This is how you fire something on click.\\n\\nFigure out how to do it on mouseover.\')\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Mouseover Effects</h1>\n    <p>\n      Javascript lets you attach or bind actions to html elements on the page.\n    </p>\n    <p>\n      In this case we want to make it so an alert displays when you mouseover\n      the logo below.\n    </p>\n    <img id=\'logo\' src=\'/assets/images/logo_icon.png\' />\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    There are a number of events that you can listen for on most html elements. Some examples include\n    \'onclick\', \'onmouseover\', \'onmouseout\', \'onmousedown\', and \'onmouseup\'.\n</p>\n<p>\n    In this case we are exploring the use of the onmouseover event that allows you to perform an\n    action when the user mouses over an element.                    \n</p>\n<p>\n    Try googling for <a href=\'https://www.google.com/search?q=javascript+events+for+html+elements\' target=\'_blank\'>javascript events for html elements</a> \n    to learn more.\n</p>',
        hints: ['The onmouseover event works just like the onclick event.', 'Just add a new event listening function that fires \'onmouseover\'.', 'The code should look something like:<br/><br/>\n<span class=\'code_sample\'>\nlogo.onmouseover = function () {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;alert(\'The Puzzle School\');<br/>\n};\n</span>'],
        tests: [
          {
            description: 'When you move your mouse over the logo an alert appears.',
            test: function(_arg) {
              var cleanHtml, frameBody, logo, onmouseover;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.mouseoverCalled) {
                return true;
              }
              logo = frameBody.find('#logo');
              if (logo.data('mouseoverset')) {
                return false;
              }
              onmouseover = logo[0].onmouseover;
              logo[0].onmouseover = null;
              logo.data('mouseoverset', true);
              logo.bind('mouseover', function() {
                onmouseover();
                _this.mouseoverCalled = true;
                return window.retest();
              });
              return false;
            },
            clean: function() {
              return delete _this.mouseoverCalled;
            }
          }, {
            description: 'The alert displays \'The Puzzle School\'.',
            test: function(_arg) {
              var cleanHtml, frameBody, frameWindow;
              frameWindow = _arg.frameWindow, frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.done) {
                return true;
              }
              if (frameWindow.alertFunction) {
                return;
              }
              frameWindow.alertFunction = frameWindow.alert;
              frameWindow.alert = function(message) {
                if (message.toLowerCase() === 'the puzzle school') {
                  _this.done = true;
                  window.retest();
                }
                return frameWindow.alertFunction(message);
              };
              return false;
            },
            clean: function() {
              return delete _this.done;
            }
          }
        ]
      }, {
        id: 1363737356539,
        challenge: 'Figure out how to make the text you type in to the textbox immediately display in the preview area.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var textarea = document.getElementById(\'text\');\nvar button = document.getElementById(\'button\');\nvar preview = document.getElementById(\'preview\');\n\nbutton.onclick = function() {\n  preview.innerHTML = textarea.value;\n}'
          }, {
            title: 'Page CSS',
            type: 'css',
            code: '#preview {\n    height: 60px;\n    padding: 12px;\n    background-color: white;\n    border: 1px solid #ccc;\n    margin-bottom: 12px;\n}\n\n#text {\n    display: block;\n    width: 420px;\n    height: 90px;\n}'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>The Onkeyup Event</h1>\n    <p>\n      Javascript lets you listen to when text is typed in to an html input.\n    </p>\n    <p>\n      This allows you to show a preview of the text while it is being typed:\n    </p>\n    <b>Preview</b>\n    <div id=\'preview\'></div>\n    \n    <b>Type Text Here</b>\n    <textarea id=\'text\'></textarea>\n    <button id=\'button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    The onkeyup event is a powerful event that allows you to perform an action when a key\n    is pressed within a user input such as a &lt;textarea&gt;. \n</p>\n<p>\n    Some related events you may want to google are \'onchange\', \'onkeyup\', and \'onkeydown\'\n</p>\n<p>\n    Subtle nuance: We use the onkeyup event because the text in the input has already changed when it fires.\n    If we used onkeydown or onkeypress we would only get the the text that was in the textarea\n    before the last key was pressed.\n</p>',
        hints: ['You can listen to the user\'s typing in the textarea using the \'onkeyup\' event.', 'The \'onkeyup\' event needs to be attached to the text area instead of the button', 'The code should look something like:<br/><br/>\n<span class=\'code_sample\'>\ntextarea.onkeyup = function () {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;preview.innerHTML = textarea.value;<br/>\n};\n</span>'],
        tests: [
          {
            description: 'When you type in the textarea it shows the text in the preview area.',
            test: function(_arg) {
              var cleanHtml, frameBody, onkeyup, preview, textarea;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.keyupCycleComplete) {
                return true;
              }
              textarea = frameBody.find('#text');
              if (textarea.data('keyupset')) {
                return false;
              }
              preview = frameBody.find('#preview');
              onkeyup = textarea[0].onkeyup;
              textarea[0].onkeyup = null;
              textarea.data('keyupset', true);
              textarea.bind('keyup', function() {
                onkeyup();
                if (preview.html() === textarea.val()) {
                  _this.keyupCycleComplete = true;
                }
                return window.retest();
              });
              return false;
            },
            clean: function() {
              return delete _this.keyupCycleComplete;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Javascript: Conditional Statements',
    levels: [
      {
        id: 1362673042225,
        challenge: 'Figure out how to make the header toggle from red to green by clicking the button.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var button = document.getElementById(\'toggle_button\');\nbutton.onclick = function () {\n  var header = document.getElementById(\'header\');\n  if (header.style.color == \'\') {\n      header.style.color = \'green\';\n  } else {\n      header.style.color = \'red\';\n  }\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\' style=\'color: red;\'>Conditional Statements</h1>\n    <p>\n      One of the most important tools in programming is the if/else statement.\n    </p>\n    <p>\n      An if/else statement, also known as a \'conditional statement\' lets the program\n      decide which path to go down based on a certain condition.\n    </p>\n    <p>\n      In this example we want to make the button below change the color of the header to\n      green if the color is currently red or change it to red if it is currently green.\n    </p>\n    <p>\n      Figure out how to change the if/else statement so that clicking the button below\n      changes the color of the header to green:\n    </p>\n    <button id=\'toggle_button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    One of most useful and common tools in programming is the conditional statement.\n</p>\n<p>\n    A conditional statement basically says "if something is true then do one action, if not do another action".\n</p>\n<p>\n    For example: "If the oven is preheated then put the food in the oven, otherwise wait."\n<p>\n    In this case we\'re using a conditional statement to toggle the color of the header.\n</p>',
        hints: ['You need to figure out what the proper conditional statement is to toggle the color of the header.', 'We want to say \'if the header is red then change to green else change to red\'.', 'Change this line: \'if (header.style.color == \'\') {\' to \'if (header.style.color == \'red\') {\''],
        tests: [
          {
            description: 'The header color is green.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (frameBody.find('#header').css('color') === 'green') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1362851805236,
        lockedBy: [1362673042225],
        challenge: 'Figure out how to turn the header green and then yellow and then red with the same button.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var button = document.getElementById(\'toggle_button\');\nbutton.onclick = function () {\n  var header = document.getElementById(\'header\');\n  if (header.style.color == \'green\') {\n      header.style.color = \'yellow\';\n  }\n};'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Complex Conditionals</h1>\n    <p>\n      Conditional statements can be used to choose between more than two paths.\n    </p>\n    <p>\n      If a conditional statement is used to choose between a large number of code paths\n      it might be considered a "code smell" (something that might lead to problems), but\n      for 2-4 paths or so, it is usually appropriate.\n    </p>\n    <p>\n      Figure out how to use if/else statements to make the header go from green to yellow\n      to red by clicking the button below:\n    </p>\n    <button id=\'toggle_button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Conditional statements are frequently used when coding.\n</p>\n<p>\n    They allow you to execute code only in certain situations.\n</p>',
        hints: ['You need to create one or multiple conditions that lead to three different states.', 'You\'ll need one conditional statement to go from black to green, one to go from green to yellow, and one to go from yellow to red.', 'You can also accomplish this with a statement that uses if/else if/else.', 'Add this to the end of the existing conditional statement:<br/>\n} else if (header.style.color == \'yellow\') {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'red\';<br/>\n} else {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'green\';<br/>\n}'],
        tests: [
          {
            description: 'The header toggles from green to yellow to red when you click the button 3 times.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              _this.good || (_this.good = {});
              _this.good[frameBody.find('#header').css('color')] = true;
              if (_this.good['green'] && _this.good['yellow'] && _this.good['red']) {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1363825098036,
        lockedBy: [1362851805236],
        challenge: 'Figure out how to turn the header yellow when the button is clicked and the counter reads 1, \ngreen when it reads 2, red when it reads 3, and blue when it reads 4.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var counter = document.getElementById(\'counter\');\nvar button = document.getElementById(\'button\');\nbutton.onclick = function () {\n  var header = document.getElementById(\'header\');\n  if (counter.innerHTML == \'1\') {\n      header.style.color = \'red\';\n  }\n};\n\n\nif (window.counterInterval) {\n    window.clearInterval(window.counterInterval);\n}\nwindow.counterInterval = setInterval(function() {\n  if (!counter) return;\n\n  var value = parseInt(counter.innerHTML);\n  value += 1;\n  if (value > 4) {\n    value = 1;\n  }\n  counter.innerHTML = value;\n  \n}, 1000);                        '
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1 id=\'header\'>Complex Conditionals 2</h1>\n    <p>\n      Conditional statements are used frequently in programming.\n    </p>\n    <p>\n      Here we want to make the header change color depending on the innerHTML value\n      (the number displayed) in the counter below.\n    </p>\n    <p>\n        1 = yellow, 2 = green, 3 = red, 4 = blue\n    </p>\n    <h2 id=\'counter\'>1</h2>\n    <button id=\'button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    Conditional statements are frequently used when coding.\n</p>\n<p>\n    They allow you to execute code only in certain situations.\n</p>',
        hints: ['You\'ll need to set up a conditional statement that handles all four possible scenarios.', 'The conditional should start with an \'if\' followed by two \'else if\' and a closing \'else\'.', 'Code such as this would do the trick:<br/>\nif (counter.innerHTML == \'1\') {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'yellow\';<br/>\n} else if (counter.innerHTML == \'2\') {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'green\';<br/>\n} else if (counter.innerHTML == \'3\') {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'red\';<br/>\n} else {<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;header.style.color = \'blue\';<br/>\n}'],
        tests: [
          {
            description: 'The header color is either yellow, green, red, or blue depending on the number displayed in the counter.',
            test: function(_arg) {
              var button, cleanHtml, counter, frameBody, header, onclick;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (_this.passed) {
                return true;
              }
              button = frameBody.find('#button');
              header = frameBody.find('#header');
              counter = frameBody.find('#counter');
              onclick = button[0].onclick;
              button[0].onclick = null;
              button.bind('click', function() {
                var colors, index;
                onclick();
                colors = ['', 'yellow', 'green', 'red', 'blue'];
                index = parseInt(counter.html());
                _this.passed = header.css('color') === colors[index];
                return window.retest();
              });
              return false;
            },
            clean: function() {
              return delete _this.passed;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Javascript: For-Loops',
    levels: [
      {
        id: 1363033903127,
        challenge: 'Figure out how to fill in each box with a different color when the button is clicked.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var colors = [\'red\', \'green\', \'yellow\', \'purple\', \'orange\', \'pink\', \'blue\'];\nvar button = document.getElementById(\'color_button\');\nbutton.onclick = function() {\n  var box = document.getElementById(\'box0\');\n  box.style.backgroundColor = colors[0];\n}'
          }, {
            title: 'Page CSS',
            type: 'css',
            code: '.boxes {\n    overflow: hidden;\n    margin-bottom: 12px;\n}\n\n.box {\n    float: left;\n    width: 66px;\n    height: 60px;\n    border: 1px solid #ccc;\n    margin: 0 6px 6px 0;\n}'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>Loops and Arrays</h1>\n    <p>\n        In this challenge we\'re working with an array of colors that we want to use\n        to assign to the backgroundColor of each box below.\n    </p>\n    <p>\n        To learn more about arrays, try <a href=\'https://www.google.com/search?q=javascript+array\' target=\'_new\'>googling arrays</a>.\n    </p>\n    <p>\n        You may also want to consider <a href=\'https://www.google.com/search?q=javascript+for+loop\' target=\'_new\'>googling for-loops</a> as\n        a for-loop would be useful in this challenge.\n    </p>\n    <div class=\'boxes\'>\n        <div class=\'box\' id=\'box0\'></div>\n        <div class=\'box\' id=\'box1\'></div>\n        <div class=\'box\' id=\'box2\'></div>\n        <div class=\'box\' id=\'box3\'></div>\n        <div class=\'box\' id=\'box4\'></div>\n        <div class=\'box\' id=\'box5\'></div>\n        <div class=\'box\' id=\'box6\'></div>\n    </div>\n    <button id=\'color_button\'>Click Me</button>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n    This level introduces two newish concepts, arrays and for-loops.\n</p>\n<p>\n    The array is this line: var colors = [\'red\', \'green\', \'yellow\', \'purple\', \'orange\', \'pink\', \'blue\'].\n</p>\n<p>\n    It allows you store a bunch of different objects in one container that can be iterated over.\n</p>\n<p>\n    In order to iterate over an array you would use a for-loop.\n</p>\n<p>\n    With a for-loop you run a section of code multiple times, often with a different element\n    of the array each time.\n</p>\n<p>\n    It\'s all a little hard to explain. You\'ll understand it more as you try using arrays and for-loops in\n    future challenges. If you\'d like to learn more now try \n    <a href=\'https://www.google.com/search?q=javascript+array\' target=\'_new\'>googling arrays</a> and\n    <a href=\'https://www.google.com/search?q=javascript+for+loop\' target=\'_new\'>googling for-loops</a>.\n</p>',
        hints: ['This challenge only requires a few lines of code if you use a for-loop.', 'A for loop allows you to iterate over the colors in the array, assigning each color to a box.', 'A for loop looks like for (var i=0; i&lt;colors.length; ++i) { ... }', 'This code will do the trick:<br/>\n<span class=\'code_sample\'>\nfor (var i=0; i&lt;colors.length; ++i) {<br/>\n&nbsp;&nbsp;var box = document.getElementById(\'box\' + i);<br/>\n&nbsp;&nbsp;box.style.backgroundColor = colors[i];<br/>\n}\n</span>'],
        tests: [
          {
            description: 'Each box has a different background color.',
            test: function(_arg) {
              var allDifferent, box, cleanHtml, color, colors, frameBody, _i, _len, _ref;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              allDifferent = true;
              colors = {};
              _ref = frameBody.find('.box');
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                box = _ref[_i];
                color = $(box).css('backgroundColor');
                if (!(color != null ? color.length : void 0) || colors[color]) {
                  allDifferent = false;
                  break;
                } else {
                  colors[color] = true;
                }
              }
              if (allDifferent) {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1363042104392,
        lockedBy: [1363033903127],
        challenge: 'Figure out how to make the second button fill in the colors like the first button but in reverse order.',
        editors: [
          {
            title: 'Page Javascript',
            type: 'javascript',
            code: 'var colors = [\'red\', \'green\', \'yellow\', \'purple\', \'orange\', \'pink\', \'blue\'];\nvar button1 = document.getElementById(\'color_button1\');\nbutton1.onclick = function() {\n  for (var i=0; i<colors.length; ++i) {\n    var box = document.getElementById(\'box1\' + i);\n    box.style.backgroundColor = colors[i];                                  \n  }\n}'
          }, {
            title: 'Page CSS',
            type: 'css',
            code: '.boxes {\n    overflow: hidden;\n    margin-bottom: 12px;\n}\n\n.box {\n    float: left;\n    width: 66px;\n    height: 60px;\n    border: 1px solid #ccc;\n    margin: 0 6px 6px 0;\n}'
          }, {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <h1>A Reverse Loop</h1>\n    <p>\n        Ok, now you\'ve got to figure out how to make the colors display in reverse \n        when the second button is clicked.\n    </p>\n    <p>\n        For this challenge, once you think you\'ve written the code properly, click\n        \'Run Tests\' above to have the system validate the results.\n    </p>\n    <div class=\'boxes boxes1\'>\n        <div class=\'box\' id=\'box10\'></div>\n        <div class=\'box\' id=\'box11\'></div>\n        <div class=\'box\' id=\'box12\'></div>\n        <div class=\'box\' id=\'box13\'></div>\n        <div class=\'box\' id=\'box14\'></div>\n        <div class=\'box\' id=\'box15\'></div>\n        <div class=\'box\' id=\'box16\'></div>\n    </div>\n    <div class=\'boxes boxes2\'>\n        <div class=\'box\' id=\'box20\'></div>\n        <div class=\'box\' id=\'box21\'></div>\n        <div class=\'box\' id=\'box22\'></div>\n        <div class=\'box\' id=\'box23\'></div>\n        <div class=\'box\' id=\'box24\'></div>\n        <div class=\'box\' id=\'box25\'></div>\n        <div class=\'box\' id=\'box26\'></div>\n    </div>\n    \n    <button id=\'color_button1\'>Button #1</button>\n    <button id=\'color_button2\'>Button #2</button>\n  </body>\n</html>'
          }
        ],
        description: '',
        hints: ['This challenge only requires a few lines of code if you use a for-loop.', 'A for loop allows you to iterate over the colors in the array, assigning each color to a box.', 'A for loop looks like for (var i=0; i&lt;colors.length; ++i) { ... }', 'This code will do the trick:<br/>\n<span class=\'code_sample\'>\nfor (var i=0; i&lt;colors.length; ++i) {<br/>\n&nbsp;&nbsp;var box = document.getElementById(\'box\' + i);<br/>\n&nbsp;&nbsp;box.style.backgroundColor = colors[i];<br/>\n}\n</span>'],
        tests: [
          {
            description: 'When button 1 is clicked each box gets a different color.',
            test: function(_arg) {
              var allDifferent, box, color, colors, frameBody, userSubmitted, _i, _len, _ref;
              frameBody = _arg.frameBody, userSubmitted = _arg.userSubmitted;
              if (!userSubmitted) {
                return;
              }
              frameBody.find('.box').css('backgroundColor', '');
              frameBody.find('#color_button1').trigger('click');
              allDifferent = true;
              _this.boxColors = [];
              colors = {};
              _ref = frameBody.find('.boxes1 .box');
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                box = _ref[_i];
                color = $(box).css('backgroundColor');
                _this.boxColors.push(color);
                if (!(color != null ? color.length : void 0) || colors[color]) {
                  allDifferent = false;
                  break;
                } else {
                  colors[color] = true;
                }
              }
              if (allDifferent) {
                return true;
              } else {
                return false;
              }
            },
            clean: function() {
              return _this.boxColors = null;
            }
          }, {
            description: 'When button 2 is clicked the boxes get the same colors in reverse order.',
            test: function(_arg) {
              var box, color, frameBody, index, reverse, reverseColors, userSubmitted, _i, _len, _ref, _ref1;
              frameBody = _arg.frameBody, userSubmitted = _arg.userSubmitted;
              if (!userSubmitted) {
                return;
              }
              if (!((_ref = _this.boxColors) != null ? _ref.length : void 0)) {
                return false;
              }
              frameBody.find('#color_button2').trigger('click');
              reverseColors = _this.boxColors.reverse();
              reverse = true;
              _ref1 = frameBody.find('.boxes2 .box');
              for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
                box = _ref1[index];
                color = $(box).css('backgroundColor');
                if (!(color != null ? color.length : void 0) || color !== reverseColors[index]) {
                  reverse = false;
                  break;
                }
              }
              if (reverse) {
                return true;
              } else {
                return false;
              }
            },
            clean: function() {
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }
    ]
  }, {
    name: 'Building A Calculator',
    levels: [
      {
        id: 1362439206758,
        challenge: 'Figure out how to make the calculator perform the calculation 1 - 2.',
        editors: [
          {
            title: 'Calculator Javascript',
            type: 'javascript',
            code: 'function getScreen() {\n  return document.getElementById(\'screen\'); \n}\nfunction addToScreen(symbol) {\n  getScreen().innerHTML += symbol;\n}\n\nfunction subtract() {\n\n}\nvar subtractButton = document.getElementById(\'subtract_button\');\nsubtractButton.onclick = subtract;\n\nfunction add() {\n  addToScreen(\'+\');\n}\nvar addButton = document.getElementById(\'add_button\');\naddButton.onclick = add;\n\ndocument.getElementById(\'number1\').onclick = function() {\n  addToScreen(1);\n};\ndocument.getElementById(\'number2\').onclick = function() {\n  addToScreen(2);\n};          \n\nfunction calculate() {\n  equation = getScreen().innerHTML;\n  getScreen().innerHTML = eval(equation);\n}\ndocument.getElementById(\'equals\').onclick = function() {\n  calculate();\n};          \n\nfunction clear() {\n  getScreen().innerHTML = \'\';\n}\ndocument.getElementById(\'clear\').onclick = function() {\n  clear();\n};          \n       '
          }, {
            title: 'Calculator CSS',
            type: 'css',
            code: '.explanation {\n    float: right;\n    background-color: white;\n    border: 1px solid #ccc;\n    width: 36%;\n    margin-right: 12px;\n    padding: 12px;\n}\n\n.calculator {\n    height: 360px;\n    width: 300px;\n    border: 1px solid #ccc;\n    background-color: white;\n    margin: 0 12px;\n}\n\n.screen {\n    margin: 12px;\n    background-color: black;\n    height: 45px;\n    line-height: 45px;\n    color: white;\n    font-size: 42px;\n    text-align: right;                            \n}\n\n.buttons .button {\n    float: left;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    text-align: center;\n    margin: 12px 0 0 12px;\n    background-color: #ccc;\n    color: black;\n    cursor: pointer;\n}\n\n.buttons .numbers {\n    float: left;\n    border-right: 1px solid #ccc;\n    width: 58%;\n    height: 65%;\n}\n\n.buttons .clear {\n    clear: both;\n    float: right;\n    margin-right: 12px;\n}\n\n.buttons .equals, .buttons .clear {\n    width: 60px;\n}'
          }, {
            title: 'Calculator HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <div class=\'explanation\'>\n      <b>A Working Calculator</b>\n      <p>We\'re going to build a working calculator.</p>\n      <p>All of the buttons are functional except for the subtraction button.</p>\n      <p>You\'ve got to figure out how to make it work.</p>\n    </div>\n  \n    <div class=\'calculator\'>\n      <div class=\'screen\' id=\'screen\'></div>\n      <div class=\'buttons\'>\n        <div class=\'numbers\'>\n          <div class=\'number button\' id=\'number1\'>1</div>\n          <div class=\'number button\' id=\'number2\'>2</div>\n        </div>\n        <div class=\'functions\'>\n          <div class=\'function button\' id=\'add_button\'>+</div>\n          <div class=\'function button\' id=\'subtract_button\'>-</div>\n        </div>\n        <div class=\'clear button\' id=\'clear\'>Clear</div>\n        <div class=\'equals button\' id=\'equals\'>=</div>\n      </div>\n    </div>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n  Here we are working with some of the basics of javascript.\n</p>\n<p>\n  Some of the interesting javascript functions you might want to google\n  are \'javascript eval\', \'javascript getElementById\', and\n  \'javascript innerHTML\'.\n</p>\n<p>\n  Most importantly we are trying to figure out how to bind a method to\n  the onclick event of an html element. You may want to google \'javascript onclick\'\n  for some more information about that.\n</p>',
        hints: ['The subtraction button is going to work roughly the same as the addition button.', 'You can literally copy and paste the code in the add function.', 'Just change the symbol being sent to the screen to a \'-\' from a \'+\'.', 'Write this code in to the \'subtract\' function: \'addToScreen(\'-\')\''],
        tests: [
          {
            description: 'When the equals sign is hit with \'1-2\' showing, the result is -1.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (!_this.equation && cleanHtml(frameBody.find('#screen').html()) === '1-2') {
                _this.equation = true;
                return false;
              }
              if (_this.equation && cleanHtml(frameBody.find('#screen').html()) === '-1') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              _this.equation = null;
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1362514980364,
        lockedBy: [1362439206758],
        challenge: 'Figure out how to bind the multiplication button to the multiply function and perform the calculation 3*4.',
        editors: [
          {
            title: 'Calculator Javascript',
            type: 'javascript',
            code: 'function getScreen() {\n  return document.getElementById(\'screen\'); \n}\nfunction addToScreen(symbol) {\n  getScreen().innerHTML += symbol;\n}\n\nfunction multiply() {\n  addToScreen(\'*\');\n}\n\n\nfunction subtract() {\n  addToScreen(\'-\');\n}\nvar subtractButton = document.getElementById(\'subtract_button\');\nsubtractButton.onclick = subtract;\n\nfunction add() {\n  addToScreen(\'+\');\n}\nvar addButton = document.getElementById(\'add_button\');\naddButton.onclick = add;\n\nfunction initializeNumberButton(number) {\n  document.getElementById(\'number\' + number).onclick = function() {\n    addToScreen(number);\n  };                                \n}\nfor (var i=1; i<=4; ++i) {\n  initializeNumberButton(i);\n}\n\nfunction calculate() {\n  equation = getScreen().innerHTML;\n  getScreen().innerHTML = eval(equation);\n}\ndocument.getElementById(\'equals\').onclick = function() {\n  calculate();\n};          \n\nfunction clear() {\n  getScreen().innerHTML = \'\';\n}\ndocument.getElementById(\'clear\').onclick = function() {\n  clear();\n};          \n       '
          }, {
            title: 'Calculator CSS',
            type: 'css',
            code: '.explanation {\n    float: right;\n    background-color: white;\n    border: 1px solid #ccc;\n    width: 36%;\n    margin-right: 12px;\n    padding: 12px;\n}\n\n.calculator {\n    height: 360px;\n    width: 300px;\n    border: 1px solid #ccc;\n    background-color: white;\n    margin: 0 12px;\n}\n\n.screen {\n    margin: 12px;\n    background-color: black;\n    height: 45px;\n    line-height: 45px;\n    color: white;\n    font-size: 42px;\n    text-align: right;                            \n}\n\n.buttons .button {\n    float: left;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    text-align: center;\n    margin: 12px 0 0 12px;\n    background-color: #ccc;\n    color: black;\n    cursor: pointer;\n}\n\n.buttons .numbers {\n    float: left;\n    border-right: 1px solid #ccc;\n    width: 58%;\n    height: 65%;\n}\n\n.buttons .clear {\n    clear: both;\n    float: right;\n    margin-right: 12px;\n}\n\n.buttons .equals, .buttons .clear {\n    width: 60px;\n}'
          }, {
            title: 'Calculator HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <div class=\'explanation\'>\n      <b>A Working Calculator</b>\n      <p>Now all of the buttons are functional except for the multiplication button.</p>\n      <p>You\'ve got to figure out how to make it work.</p>\n    </div>\n  \n    <div class=\'calculator\'>\n      <div class=\'screen\' id=\'screen\'></div>\n      <div class=\'buttons\'>\n        <div class=\'numbers\'>\n          <div class=\'number button\' id=\'number1\'>1</div>\n          <div class=\'number button\' id=\'number2\'>2</div>\n          <div class=\'number button\' id=\'number3\'>3</div>\n          <div class=\'number button\' id=\'number4\'>4</div>\n        </div>\n        <div class=\'functions\'>\n          <div class=\'function button\' id=\'add_button\'>+</div>\n          <div class=\'function button\' id=\'subtract_button\'>-</div>\n          <div class=\'function button\' id=\'multiply_button\'>*</div>\n        </div>\n        <div class=\'clear button\' id=\'clear\'>Clear</div>\n        <div class=\'equals button\' id=\'equals\'>=</div>\n      </div>\n    </div>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n  Here we are working with some of the basics of javascript.\n</p>\n<p>\n  Some of the interesting javascript functions you might want to google\n  are \'javascript eval\', \'javascript getElementById\', and\n  \'javascript innerHTML\'.\n</p>\n<p>\n  Most importantly we are trying to figure out how to bind a method to\n  the onclick event of an html element. You may want to google \'javascript onclick\'\n  for some more information about that.\n</p>',
        hints: ['The multiplication button is going to work roughly the same as the subtraction button.', 'You can literally copy and paste the code for the subtraction button.', 'Just change the symbol being sent to the screen to a \'*\' from a \'-\', but don\'t forget to include the code the binds the function to the html element.', 'This is one example of code that would work:<br/><br/>\n<span class=\'code_sample\'>\nfunction multiply() {<br/>\n&nbsp;&nbsp;addToScreen(\'*\')<br/>\n}<br/>\nvar multiplyButton = document.getElementById(\'multiply_button\');<br/>\nmultiplyButton.onclick = multiply;\n</span>'],
        tests: [
          {
            description: 'When the equals sign is hit with \'3*4\' showing, the result is 12.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (!_this.equation && cleanHtml(frameBody.find('#screen').html()) === '3*4') {
                _this.equation = true;
                return false;
              }
              if (_this.equation && cleanHtml(frameBody.find('#screen').html()) === '12') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              _this.equation = null;
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }, {
        id: 1362522282364,
        lockedBy: [1362439206758, 1362514980364],
        challenge: 'Figure out how to add functioning buttons for the numbers 1 through 9.',
        editors: [
          {
            title: 'Calculator Javascript',
            type: 'javascript',
            code: 'function getScreen() {\n  return document.getElementById(\'screen\'); \n}\nfunction addToScreen(symbol) {\n  getScreen().innerHTML += symbol;\n}\n\nfunction multiply() {\n  addToScreen(\'*\');\n}\nvar multiplyButton = document.getElementById(\'multiply_button\');\nmultiplyButton.onclick = multiply;\n\nfunction subtract() {\n  addToScreen(\'-\');\n}\nvar subtractButton = document.getElementById(\'subtract_button\');\nsubtractButton.onclick = subtract;\n\nfunction add() {\n  addToScreen(\'+\');\n}\nvar addButton = document.getElementById(\'add_button\');\naddButton.onclick = add;\n\nfunction initializeNumberButton(number) {\n  document.getElementById(\'number\' + number).onclick = function() {\n    addToScreen(number);\n  };                                \n}\nfor (var i=1; i<=4; ++i) {\n  initializeNumberButton(i);\n}\n\nfunction calculate() {\n  equation = getScreen().innerHTML;\n  getScreen().innerHTML = eval(equation);\n}\ndocument.getElementById(\'equals\').onclick = function() {\n  calculate();\n};          \n\nfunction clear() {\n  getScreen().innerHTML = \'\';\n}\ndocument.getElementById(\'clear\').onclick = function() {\n  clear();\n};          \n       '
          }, {
            title: 'Calculator CSS',
            type: 'css',
            code: '.explanation {\n    float: right;\n    background-color: white;\n    border: 1px solid #ccc;\n    width: 36%;\n    margin-right: 12px;\n    padding: 12px;\n}\n\n.calculator {\n    height: 360px;\n    width: 300px;\n    border: 1px solid #ccc;\n    background-color: white;\n    margin: 0 12px;\n}\n\n.screen {\n    margin: 12px;\n    background-color: black;\n    height: 45px;\n    line-height: 45px;\n    color: white;\n    font-size: 42px;\n    text-align: right;                            \n}\n\n.buttons .button {\n    float: left;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    text-align: center;\n    margin: 12px 0 0 12px;\n    background-color: #ccc;\n    color: black;\n    cursor: pointer;\n}\n\n.buttons .numbers {\n    float: left;\n    border-right: 1px solid #ccc;\n    width: 58%;\n    height: 65%;\n}\n\n.buttons .clear {\n    clear: both;\n    float: right;\n    margin-right: 12px;\n}\n\n.buttons .equals, .buttons .clear {\n    width: 60px;\n}'
          }, {
            title: 'Calculator HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <div class=\'explanation\'>\n      <b>A Working Calculator</b>\n      <p>Time to create the reset of the number buttons.</p>\n      <p>You\'re going to have to edit the html as well as the javascript.</p>\n    </div>\n  \n    <div class=\'calculator\'>\n      <div class=\'screen\' id=\'screen\'></div>\n      <div class=\'buttons\'>\n        <div class=\'numbers\'>\n          <div class=\'number button\' id=\'number1\'>1</div>\n          <div class=\'number button\' id=\'number2\'>2</div>\n          <div class=\'number button\' id=\'number3\'>3</div>\n          <div class=\'number button\' id=\'number4\'>4</div>\n        </div>\n        <div class=\'functions\'>\n          <div class=\'function button\' id=\'add_button\'>+</div>\n          <div class=\'function button\' id=\'subtract_button\'>-</div>\n          <div class=\'function button\' id=\'multiply_button\'>*</div>\n        </div>\n        <div class=\'clear button\' id=\'clear\'>Clear</div>\n        <div class=\'equals button\' id=\'equals\'>=</div>\n      </div>\n    </div>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n  Here we are working with some of the basics of javascript.\n</p>\n<p>\n  Some of the interesting javascript functions you might want to google\n  are \'javascript eval\', \'javascript getElementById\', and\n  \'javascript innerHTML\'.\n</p>\n<p>\n  Most importantly we are trying to figure out how to bind a method to\n  the onclick event of an html element. You may want to google \'javascript onclick\'\n  for some more information about that.\n</p>',
        hints: ['You will need to edit the html as well as the javascript.', 'Edit the html by copying the elements for 1,2,3,4 and adding ones for 5,6,7,8,9', 'In the javascript you only need to make a simple change to the for loop', 'Where you see \'for (var i=1; i<=4; ++i) {\', change the \'4\' to a \'9\''],
        tests: [
          {
            description: 'The numbers 5 through 9 are displayed and show on the screen when clicked.',
            test: function(_arg) {
              var cleanHtml, frameBody, i, number, _i;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              for (i = _i = 5; _i <= 9; i = ++_i) {
                if (!(number = frameBody.find("#number" + i)).length) {
                  return false;
                }
                number.trigger('click');
                if (cleanHtml(frameBody.find('#screen').html()).indexOf(i) === -1) {
                  return false;
                }
              }
              return true;
            }
          }
        ]
      }, {
        id: 1362530371489,
        lockedBy: [1362439206758, 1362514980364, 1362522282364],
        challenge: 'Figure out how to add a function divide button so you can do the calculation \'9 / 2\'',
        editors: [
          {
            title: 'Calculator Javascript',
            type: 'javascript',
            code: 'function getScreen() {\n  return document.getElementById(\'screen\'); \n}\nfunction addToScreen(symbol) {\n  getScreen().innerHTML += symbol;\n}\n\nfunction multiply() {\n  addToScreen(\'*\');\n}\nvar multiplyButton = document.getElementById(\'multiply_button\');\nmultiplyButton.onclick = multiply;\n\nfunction subtract() {\n  addToScreen(\'-\');\n}\nvar subtractButton = document.getElementById(\'subtract_button\');\nsubtractButton.onclick = subtract;\n\nfunction add() {\n  addToScreen(\'+\');\n}\nvar addButton = document.getElementById(\'add_button\');\naddButton.onclick = add;\n\nfunction initializeNumberButton(number) {\n  document.getElementById(\'number\' + number).onclick = function() {\n    addToScreen(number);\n  };                                \n}\nfor (var i=1; i<=9; ++i) {\n  initializeNumberButton(i);\n}\n\nfunction calculate() {\n  equation = getScreen().innerHTML;\n  getScreen().innerHTML = eval(equation);\n}\ndocument.getElementById(\'equals\').onclick = function() {\n  calculate();\n};          \n\nfunction clear() {\n  getScreen().innerHTML = \'\';\n}\ndocument.getElementById(\'clear\').onclick = function() {\n  clear();\n};          \n       '
          }, {
            title: 'Calculator CSS',
            type: 'css',
            code: '.explanation {\n    float: right;\n    background-color: white;\n    border: 1px solid #ccc;\n    width: 36%;\n    margin-right: 12px;\n    padding: 12px;\n}\n\n.calculator {\n    height: 360px;\n    width: 300px;\n    border: 1px solid #ccc;\n    background-color: white;\n    margin: 0 12px;\n}\n\n.screen {\n    margin: 12px;\n    background-color: black;\n    height: 45px;\n    line-height: 45px;\n    color: white;\n    font-size: 42px;\n    text-align: right;                            \n}\n\n.buttons .button {\n    float: left;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    text-align: center;\n    margin: 12px 0 0 12px;\n    background-color: #ccc;\n    color: black;\n    cursor: pointer;\n}\n\n.buttons .numbers {\n    float: left;\n    border-right: 1px solid #ccc;\n    width: 58%;\n    height: 65%;\n}\n\n.buttons .clear {\n    clear: both;\n    float: right;\n    margin-right: 12px;\n}\n\n.buttons .equals, .buttons .clear {\n    width: 60px;\n}'
          }, {
            title: 'Calculator HTML',
            type: 'html',
            code: '<html>\n  <body>\n    <div class=\'explanation\'>\n      <b>A Working Calculator</b>\n      <p>Time to create the reset of the number buttons.</p>\n      <p>You\'re going to have to edit the html as well as the javascript.</p>\n    </div>\n  \n    <div class=\'calculator\'>\n      <div class=\'screen\' id=\'screen\'></div>\n      <div class=\'buttons\'>\n        <div class=\'numbers\'>\n          <div class=\'number button\' id=\'number1\'>1</div>\n          <div class=\'number button\' id=\'number2\'>2</div>\n          <div class=\'number button\' id=\'number3\'>3</div>\n          <div class=\'number button\' id=\'number4\'>4</div>\n          <div class=\'number button\' id=\'number5\'>5</div>\n          <div class=\'number button\' id=\'number6\'>6</div>\n          <div class=\'number button\' id=\'number7\'>7</div>\n          <div class=\'number button\' id=\'number8\'>8</div>\n          <div class=\'number button\' id=\'number9\'>9</div>\n        </div>\n        <div class=\'functions\'>\n          <div class=\'function button\' id=\'add_button\'>+</div>\n          <div class=\'function button\' id=\'subtract_button\'>-</div>\n          <div class=\'function button\' id=\'multiply_button\'>*</div>\n        </div>\n        <div class=\'clear button\' id=\'clear\'>Clear</div>\n        <div class=\'equals button\' id=\'equals\'>=</div>\n      </div>\n    </div>\n  </body>\n</html>'
          }
        ],
        description: '<p>\n  Here we are working with some of the basics of javascript.\n</p>\n<p>\n  Some of the interesting javascript functions you might want to google\n  are \'javascript eval\', \'javascript getElementById\', and\n  \'javascript innerHTML\'.\n</p>\n<p>\n  Most importantly we are trying to figure out how to bind a method to\n  the onclick event of an html element. You may want to google \'javascript onclick\'\n  for some more information about that.\n</p>',
        hints: ['First you\'ll need to add a new button like the multiply button in the html', 'Next you\'ll have to mimic the multiply function, attaching it to the new button', 'Be sure to match the \'id\' of the button in the html to the \'getElementById\' call in the javascript.', 'The button should look something like &lt;div&gt; class=\'function button\' id=\'divide_button\'&gt;/&lt;/div&gt;', 'This code should look something like:<br/><br/>\n<span class=\'code_sample\'>\nfunction divide() {<br/>\n&nbsp;&nbsp;addToScreen(\'/\')<br/>\n}<br/>\nvar divideButton = document.getElementById(\'divide_button\');<br/>\ndivideButton.onclick = divide;\n</span>'],
        tests: [
          {
            description: 'When the equals sign is hit with \'9/2\' showing, the result is 4.5.',
            test: function(_arg) {
              var cleanHtml, frameBody;
              frameBody = _arg.frameBody, cleanHtml = _arg.cleanHtml;
              if (!_this.equation && cleanHtml(frameBody.find('#screen').html()) === '9/2') {
                _this.equation = true;
                return false;
              }
              if (_this.equation && cleanHtml(frameBody.find('#screen').html()) === '4.5') {
                clearInterval(_this.testInterval);
                return true;
              }
              if (_this.testInterval) {
                return false;
              }
              _this.testInterval = setInterval(window.retest, 100);
              return false;
            },
            clean: function() {
              _this.equation = null;
              clearInterval(_this.testInterval);
              return _this.testInterval = null;
            }
          }
        ]
      }
    ]
  }
];
