// Generated by CoffeeScript 1.3.3
var STAGES, soma, wings;

soma = require('soma');

wings = require('wings');

soma.chunks({
  Code: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      var level, stage, _i, _len, _results;
      this.classId = _arg.classId, this.levelId = _arg.levelId;
      this.template = this.loadTemplate("/build/common/templates/puzzles/code.html");
      this.loadScript('http://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js');
      this.loadScript('/build/common/pages/puzzles/lib/code.js');
      this.loadStylesheet('/build/client/css/puzzles/code.css');
      if (this.levelId) {
        _results = [];
        for (_i = 0, _len = STAGES.length; _i < _len; _i++) {
          stage = STAGES[_i];
          this.level = ((function() {
            var _j, _len1, _ref, _results1;
            _ref = stage.levels;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              level = _ref[_j];
              if (level.id === this.levelId) {
                _results1.push(level);
              }
            }
            return _results1;
          }).call(this))[0];
          if (this.level) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        return this.level = STAGES[0].levels[0];
      }
    },
    build: function() {
      this.setTitle("Code Puzzles - The Puzzle School");
      return this.html = wings.renderTemplate(this.template, {
        level: this.level.id,
        challenge: this.level.challenge,
        editors: this.level.editors,
        description: this.level.description,
        hints: this.level.hints,
        tests: this.level.tests,
        stages: STAGES
      });
    }
  }
});

soma.views({
  Code: {
    selector: '#content .code',
    create: function() {
      var code,
        _this = this;
      code = require('./lib/code');
      this.levelId = this.el.data('level');
      this.helper = new code.ViewHelper({
        el: this.el,
        completeLevel: function() {
          return _this.completeLevel();
        }
      });
      return this.initLevelSelector();
    },
    initLevelSelector: function() {
      var level, _i, _len, _ref, _results,
        _this = this;
      this.levelSelector = this.$('.level_selector');
      _ref = this.levelSelector.find('.level');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        level = _ref[_i];
        level = $(level);
        _results.push(level.bind('click', function() {
          return window.location.href = '/puzzles/code/' + level.data('id');
        }));
      }
      return _results;
    },
    completeLevel: function() {
      var levelIcon;
      levelIcon = this.$("#level_" + this.levelId).find('img');
      levelIcon.attr('src', levelIcon.attr('src').replace('level', 'level_complete'));
      return this.showLevelSelector();
    },
    showLevelSelector: function() {
      this.levelSelector.css({
        opacity: 0,
        top: 100,
        left: (this.el.width() - this.levelSelector.width()) / 2
      });
      return this.levelSelector.animate({
        opacity: 1,
        duration: 250
      });
    }
  }
});

soma.routes({
  '/puzzles/code/:classId/:levelId': function(_arg) {
    var classId, levelId;
    classId = _arg.classId, levelId = _arg.levelId;
    return new soma.chunks.Code({
      classId: classId,
      levelId: levelId
    });
  },
  '/puzzles/code/:levelId': function(_arg) {
    var levelId;
    levelId = _arg.levelId;
    return new soma.chunks.Code({
      levelId: levelId
    });
  },
  '/puzzles/code': function() {
    return new soma.chunks.Code;
  }
});

STAGES = [
  {
    name: 'Basic HTML',
    levels: [
      {
        id: '1361991179382',
        challenge: 'Figure out how to change the word "Welcome" to the word "Hello World\'".',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n    <body>\n        <h1>Welcome</h1>\n    </body>\n</html>'
          }
        ],
        description: '<p>\n    The code displayed in the \'editor\' (where it says \'Page HTML\') \n    is all the code you need to create the simplest website.\n</p>\n<p>\n    The &lt;h1&gt; is used to designate important information and so is displayed in\n    bold large text.\n</p>\n<p>\n    You can learn more about the &lt;h1&gt; tag by googling:\n    <a href=\'https://www.google.com/search?q=h1+tag\' target=\'_blank\'>\'h1 tag\'</a>.\n</p>',
        hints: [
          {
            index: 1,
            content: 'The \'editor\', where you see the words \'Page HTML\' is editable.'
          }, {
            index: 2,
            content: 'In the editor, change the word \'Welcome\' to \'Hello World\''
          }
        ],
        tests: [
          {
            description: 'The content contains an &lt;h1&gt; tag with html content \'Hello World\'.',
            test: escape("frameFind('h1').html() == 'Hello World'")
          }
        ]
      }, {
        id: '1361991210187',
        challenge: 'Figure out how to print the words \'html tags are easy\' in an &lt;h1&gt; tag.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '    <html>\n        <body>\n\n        </body>\n    </html>'
          }
        ],
        description: '<p>\n    Here we\'ve removed the tag from the body of the html.\n</p>\n<p>\n    You simply need to put it back and don\'t forget to close the tag.\n</p>',
        hints: [
          {
            index: 1,
            content: 'Create a new &lt;h1&gt; tag by typing "&lt;h1&gt;" between &lt;body&gt; and &lt;/body&gt;'
          }, {
            index: 2,
            content: 'You need to close the &lt;h1&gt; tag with a closing tag.'
          }, {
            index: 3,
            content: 'The closing tag looks like &lt;/h1&gt;'
          }
        ],
        tests: [
          {
            description: 'The content contains an &lt;h1&gt; tag with html content \'html tags are easy\'.',
            test: escape("frameFind('h1').html() == 'html tags are easy'")
          }, {
            description: 'The &lt;h1&gt; tag is properly closed.',
            test: escape("frameBody().html().indexOf('</h1>') > -1")
          }
        ]
      }, {
        id: '1361997759104',
        challenge: 'Figure out how to change the smallest text to \'this is the smallest header\'.',
        editors: [
          {
            title: 'Page HTML',
            type: 'html',
            code: '<html>\n    <body>\n        <h2>This is a header</h2>\n        <h4>This is a header</h4>\n        <h6>This is a header</h6>\n        <h1>This is a header</h1>\n        <h5>This is a header</h5>\n        <h3>This is a header</h3>\n    </body>\n</html>'
          }
        ],
        description: '<p>\n    Here is a simply demo of all of the available header tags.\n</p>\n<p>\n    As you can see they range in size, designating the intent to show important information.\n</p>',
        hints: [
          {
            index: 1,
            content: 'The &lt;h4&gt; is smaller than the &lt;h3&gt; tag.'
          }, {
            index: 2,
            content: 'Change the text inside the &lt;h6&gt; tag.'
          }
        ],
        tests: [
          {
            description: 'The header with the smallest text size contains the text \'this is the smallest header\'.',
            test: escape("frameFind('h6').html() == 'this is the smallest header'")
          }
        ]
      }
    ]
  }
];
