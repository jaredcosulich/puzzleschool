// Generated by CoffeeScript 1.3.3
var xyflyer;

xyflyer = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/xyflyer', {});

xyflyer.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

xyflyer.ViewHelper = (function() {

  ViewHelper.prototype.baseFolder = '/assets/images/puzzles/xyflyer/';

  ViewHelper.prototype.maxUnits = 10;

  ViewHelper.prototype.formulas = {};

  function ViewHelper(_arg) {
    var boardElement;
    this.el = _arg.el, boardElement = _arg.boardElement, this.objects = _arg.objects, this.grid = _arg.grid;
    this.initBoard(boardElement);
  }

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  ViewHelper.prototype.addImage = function(image, x, y) {
    var height, width;
    width = image.width() * this.scale;
    height = image.height() * this.scale;
    return this.board.image(image.attr('src'), x, y, width, height);
  };

  ViewHelper.prototype.addIsland = function() {
    var height, island, width,
      _this = this;
    island = this.objects.find('.island img');
    width = island.width() * this.scale;
    height = island.height() * this.scale;
    if (!width || !height) {
      $.timeout(100, function() {
        return _this.addIsland();
      });
      return;
    }
    this.addImage(island, this.xAxis - (width / 2), this.yAxis);
    return this.movePlane(this.xAxis, this.yAxis);
  };

  ViewHelper.prototype.initBoard = function(boardElement) {
    var dimensions, maxDimension;
    dimensions = boardElement.offset();
    this.board = Raphael(dimensions.left, dimensions.top, dimensions.width, dimensions.height);
    this.width = dimensions.width;
    this.height = dimensions.height;
    this.xUnit = this.width / (this.grid.xMax - this.grid.xMin);
    this.yUnit = this.height / (this.grid.yMax - this.grid.yMin);
    this.xAxis = this.width - (this.grid.xMax * this.xUnit);
    this.yAxis = this.height + (this.grid.yMin * this.yUnit);
    maxDimension = Math.max(this.grid.xMax - this.grid.xMin, this.grid.yMax - this.grid.yMin);
    this.scale = 1 / (Math.log(Math.sqrt(maxDimension)) - 0.5);
    this.addIsland();
    return this.drawGrid();
  };

  ViewHelper.prototype.drawGrid = function() {
    var grid, gridString, increment, mark, multiple, start, stroke, text, xUnits, yUnits, _i, _j, _ref;
    gridString = "M" + this.xAxis + ",0\nL" + this.xAxis + "," + this.height + "\nM0," + this.yAxis + "\nL" + this.width + "," + this.yAxis;
    stroke = 'rgba(255,255,255,0.4)';
    xUnits = this.width / this.xUnit;
    if (xUnits < this.maxUnits) {
      xUnits = this.maxUnits;
    }
    multiple = Math.floor(xUnits / this.maxUnits);
    increment = this.xUnit * multiple;
    start = 0 - (multiple > this.grid.xMin ? (this.grid.xMin * this.xUnit) % increment : increment % (this.grid.xMin * this.xUnit));
    for (mark = _i = start, _ref = this.width; start <= _ref ? _i <= _ref : _i >= _ref; mark = _i += increment) {
      gridString += "M" + mark + "," + (this.yAxis + 10);
      gridString += "L" + mark + "," + (this.yAxis - 10);
      if (!(mark > this.width)) {
        text = this.board.text(mark + 6, this.yAxis - 6, Math.round(this.grid.xMin + (mark / this.xUnit)));
        text.attr({
          stroke: stroke,
          fill: stroke
        });
      }
    }
    yUnits = this.height / this.yUnit;
    if (yUnits < this.maxUnits) {
      yUnits = this.maxUnits;
    }
    multiple = Math.floor(yUnits / this.maxUnits);
    increment = (this.yUnit * multiple) * -1;
    start = this.height - (multiple > this.grid.yMin ? increment % (this.grid.yMin * this.yUnit) : (this.grid.yMin * this.yUnit) % increment);
    for (mark = _j = start; start <= 0 ? _j <= 0 : _j >= 0; mark = _j += increment) {
      gridString += "M" + (this.xAxis + 10) + "," + mark;
      gridString += "L" + (this.xAxis - 10) + "," + mark;
      if (!(mark > this.height)) {
        text = this.board.text(this.xAxis + 6, mark - 6, Math.round(this.grid.yMax - (mark / this.yUnit)));
        text.attr({
          stroke: stroke,
          fill: stroke
        });
      }
    }
    grid = this.board.path(gridString);
    return grid.attr({
      stroke: stroke
    });
  };

  ViewHelper.prototype.movePlane = function(x, y) {
    var currentX, currentY, h, plane, w;
    if (!this.plane) {
      plane = this.objects.find('.plane img');
      w = plane.width();
      h = plane.height();
      return this.plane = this.addImage(plane, x - (w / 2), y - (h / 3));
    } else {
      currentX = this.plane.attr('x');
      currentY = this.plane.attr('y');
      w = this.plane.attr('width');
      h = this.plane.attr('height');
      return this.plane.transform("t" + (x - currentX - (w / 2)) + "," + (y - currentY - (h / 3)));
    }
  };

  ViewHelper.prototype.launchPlane = function() {
    var yPos,
      _this = this;
    this.planeXPos = (this.planeXPos || 0) + 1;
    yPos = this.activeFormula(this.planeXPos / this.xUnit) * this.yUnit;
    this.movePlane(this.planeXPos + this.xAxis, this.yAxis - yPos);
    if (this.planeXPos <= (this.grid.xMax * this.xUnit)) {
      return $.timeout(5, function() {
        return _this.launchPlane();
      });
    }
  };

  ViewHelper.prototype.resetPlane = function() {
    this.planeXPos = 0;
    return this.movePlane(this.xAxis, this.yAxis);
  };

  ViewHelper.prototype.plot = function(formula, id) {
    var brokenLine, infiniteLine, lastSlope, lastYPos, line, pathString, slope, xPos, yPos, _i, _ref, _ref1;
    if (!formula) {
      return;
    }
    if (this.formulas[id]) {
      this.formulas[id].line.remove();
    }
    this.formulas[id] = {
      formula: formula
    };
    this.activeFormula = formula;
    brokenLine = 0;
    infiniteLine = 0;
    pathString = "M0," + this.height;
    for (xPos = _i = _ref = this.grid.xMin * this.xUnit, _ref1 = this.grid.xMax * this.xUnit; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; xPos = _ref <= _ref1 ? ++_i : --_i) {
      lastYPos = yPos;
      yPos = formula(xPos / this.xUnit) * this.yUnit;
      if (yPos === Number.NEGATIVE_INFINITY) {
        yPos = this.grid.yMin * this.xUnit;
        brokenLine += 1;
      } else if (yPos === Number.POSITIVE_INFINITY) {
        yPos = this.grid.yMax * this.xUnit;
        brokenLine += 1;
      }
      if (lastYPos) {
        lastSlope = slope;
        slope = yPos - lastYPos;
        if (lastSlope && Math.abs(lastSlope - slope) > Math.abs(lastSlope) && Math.abs(lastYPos - yPos) > Math.abs(lastYPos)) {
          pathString += "L" + (xPos + this.xAxis + 1) + "," + (lastSlope > 0 ? 0 : this.height);
          pathString += "M" + (xPos + this.xAxis + 1) + "," + (lastSlope > 0 ? this.height : 0);
          brokenLine += 1;
        }
      }
      if (brokenLine > 0) {
        pathString += "M" + (xPos + this.xAxis) + "," + (this.yAxis - yPos);
        brokenLine -= 1;
      } else {
        pathString += "L" + (xPos + this.xAxis) + "," + (this.yAxis - yPos);
      }
    }
    line = this.board.path(pathString);
    line.attr({
      stroke: 'rgba(0,0,0,0.1)',
      'stroke-width': 2
    });
    this.formulas[id].line = line;
    return this.resetPlane();
  };

  return ViewHelper;

})();
