// Generated by CoffeeScript 1.3.3
var neurobehav;

neurobehav = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/neurobehav', {});

neurobehav.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

neurobehav.ViewHelper = (function() {

  ViewHelper.prototype.baseFolder = '/assets/images/puzzles/neurobehav/';

  function ViewHelper(_arg) {
    this.el = _arg.el;
    this.initBoard();
    this.initOscillator();
  }

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  ViewHelper.prototype.initBoard = function() {
    this.board = this.$('.board');
    return this.board.html('');
  };

  ViewHelper.prototype.initOscillator = function() {
    return this.oscillator = new neurobehav.Oscillator(this.$('.oscillator'));
  };

  return ViewHelper;

})();

neurobehav.Oscillator = (function() {

  Oscillator.prototype.axisLineCount = 5.0;

  function Oscillator(container, range, threshold, takeReading) {
    this.container = container;
    this.range = range;
    this.threshold = threshold;
    this.takeReading = takeReading;
    this.init();
    this.drawGrid();
    this.takeReading = function() {
      return (Math.random() < 0.1 ? 160 : 30);
    };
    this.fire();
  }

  Oscillator.prototype.init = function() {
    var backgroundCanvas, voltageCanvas;
    backgroundCanvas = document.createElement('CANVAS');
    this.container.append(backgroundCanvas);
    this.width = backgroundCanvas.width = $(backgroundCanvas).width();
    this.height = backgroundCanvas.height = $(backgroundCanvas).height();
    this.backgroundContext = backgroundCanvas.getContext('2d');
    voltageCanvas = document.createElement('CANVAS');
    this.container.append(voltageCanvas);
    voltageCanvas.width = $(voltageCanvas).width();
    voltageCanvas.height = $(voltageCanvas).height();
    this.voltageContext = voltageCanvas.getContext('2d');
    this.voltageContext.strokeStyle = 'rgba(255, 92, 92, 1)';
    return this.voltageContext.lineWidth = 1;
  };

  Oscillator.prototype.fire = function() {
    var voltage,
      _this = this;
    voltage = this.height - this.takeReading();
    this.firePosition || (this.firePosition = 0);
    if (this.firePosition > this.width) {
      this.voltageContext.clearRect(0, 0, this.width, this.height);
      this.firePosition = 0;
    }
    this.voltageContext.beginPath();
    this.voltageContext.moveTo(this.firePosition, this.lastVoltage || this.height);
    this.firePosition += 5;
    this.voltageContext.lineTo(this.firePosition, voltage);
    this.voltageContext.stroke();
    this.voltageContext.closePath();
    this.lastVoltage = voltage;
    return $.timeout(100, function() {
      return _this.fire();
    });
  };

  Oscillator.prototype.drawGrid = function() {
    var y, _i, _ref, _ref1;
    this.backgroundContext.strokeStyle = 'rgba(0, 0, 0, 0.4)';
    this.backgroundContext.lineWidth = 1;
    this.backgroundContext.beginPath();
    for (y = _i = 1, _ref = this.height, _ref1 = this.height / this.axisLineCount; 1 <= _ref ? _i < _ref : _i > _ref; y = _i += _ref1) {
      this.backgroundContext.moveTo(0, y);
      this.backgroundContext.lineTo(this.width, y);
    }
    this.backgroundContext.stroke();
    return this.backgroundContext.closePath();
  };

  return Oscillator;

})();
