// Generated by CoffeeScript 1.3.3
var BASE_FOLDER, PERIODICITY, neurobehav,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

neurobehav = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/neurobehav', {});

BASE_FOLDER = '/assets/images/puzzles/neurobehav/';

PERIODICITY = 20;

neurobehav.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

neurobehav.ViewHelper = (function() {

  ViewHelper.prototype.baseFolder = BASE_FOLDER;

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  function ViewHelper(_arg) {
    var neuron1, neuron2, oscilloscope, stimulus;
    this.el = _arg.el;
    this.initBoard();
    stimulus = this.addObject({
      type: 'Stimulus',
      position: {
        top: 100,
        left: 100
      },
      voltage: 1.5
    });
    neuron1 = this.addObject({
      type: 'Neuron',
      position: {
        top: 100,
        left: 300
      },
      threshold: 1,
      spike: 0.5
    });
    stimulus.connectTo(neuron1);
    neuron2 = this.addObject({
      type: 'Neuron',
      position: {
        top: 300,
        left: 200
      },
      threshold: 1,
      spike: 0.5
    });
    oscilloscope = this.addObject({
      type: 'Oscilloscope',
      position: {
        top: 80,
        left: 340
      },
      container: this.$('.oscilloscope')
    });
    oscilloscope.attachTo(neuron1);
  }

  ViewHelper.prototype.initBoard = function() {
    var dimensions;
    this.board = this.$('.board');
    dimensions = this.board.offset();
    return this.paper = Raphael(dimensions.left, dimensions.top, dimensions.width, dimensions.height);
  };

  ViewHelper.prototype.addObject = function(data) {
    data.paper = this.paper;
    data.id = this.nextId();
    return new neurobehav[data.type](data);
  };

  ViewHelper.prototype.nextId = function() {
    return this.currentId = (this.currentId || 0) + 1;
  };

  return ViewHelper;

})();

neurobehav.Object = (function() {

  Object.prototype.periodicity = PERIODICITY;

  Object.prototype.baseFolder = BASE_FOLDER;

  function Object(_arg) {
    this.id = _arg.id, this.paper = _arg.paper, this.position = _arg.position;
    this.init();
  }

  Object.prototype.createImage = function() {
    this.image = this.paper.image("" + this.baseFolder + this.imageSrc, this.position.left, this.position.top, this.fullWidth || this.width, this.fullHeight || this.height);
    this.image.objectType = this.objectType;
    this.image.object = this;
    return this.image;
  };

  Object.prototype.init = function() {
    return raise("no init method for " + this.objectType);
  };

  Object.prototype.initGlow = function(element) {
    var glow, set,
      _this = this;
    glow = element.glow({
      width: 30,
      fill: true,
      color: 'yellow'
    });
    glow.attr({
      opacity: 0,
      cursor: 'move'
    });
    set = this.paper.set();
    set.push(element);
    set.push(glow);
    set.hover(function() {
      return glow.attr({
        opacity: 0.04
      });
    }, function() {
      return glow.attr({
        opacity: 0
      });
    });
    glow.toFront();
    element.toFront();
    return glow;
  };

  return Object;

})();

neurobehav.Stimulus = (function(_super) {

  __extends(Stimulus, _super);

  Stimulus.prototype.objectType = 'stimulus';

  Stimulus.prototype.imageSrc = 'stimulus_button.png';

  Stimulus.prototype.height = 50;

  Stimulus.prototype.width = 50;

  Stimulus.prototype.fullWidth = 100;

  function Stimulus(_arg) {
    this.voltage = _arg.voltage;
    Stimulus.__super__.constructor.apply(this, arguments);
  }

  Stimulus.prototype.init = function() {
    var _this = this;
    this.createImage();
    this.state = 0;
    this.setImage();
    this.image.click(function() {
      return _this.toggleState();
    });
    return this.image.attr({
      cursor: 'pointer'
    });
  };

  Stimulus.prototype.toggleState = function() {
    this.state += 1;
    this.state = this.state % 2;
    this.setImage();
    return this.neuron.addVoltage(this.state === 0 ? this.voltage * -1 : this.voltage);
  };

  Stimulus.prototype.setImage = function() {
    return this.image.attr({
      'clip-rect': "" + this.position.left + ", " + this.position.top + ", " + this.width + ", " + this.height,
      transform: "t" + (-1 * this.width * this.state) + ",0"
    });
  };

  Stimulus.prototype.connectTo = function(neuron) {
    this.neuron = neuron;
    this.connection = this.paper.path("M" + (this.position.left + (this.width / 2)) + "," + (this.position.top + (this.height / 2)) + "\nL" + this.neuron.position.left + "," + (this.neuron.position.top + (this.neuron.height / 2)));
    this.connection.attr({
      'stroke-width': 2,
      'arrow-end': 'block-wide-long'
    });
    this.connection.toBack();
    return this.neuron.addVoltage(this.voltage * this.state);
  };

  return Stimulus;

})(neurobehav.Object);

neurobehav.Neuron = (function(_super) {

  __extends(Neuron, _super);

  Neuron.prototype.objectType = 'neuron';

  Neuron.prototype.imageSrc = 'neuron.png';

  Neuron.prototype.height = 60;

  Neuron.prototype.width = 60;

  function Neuron(_arg) {
    this.threshold = _arg.threshold, this.spike = _arg.spike;
    Neuron.__super__.constructor.apply(this, arguments);
  }

  Neuron.prototype.init = function() {
    var _this = this;
    this.synapses = [];
    this.synapseSpikes = [];
    this.activeSynapseSpikes = [];
    this.createImage();
    this.timeSinceStart = 0;
    this.restTime = 0;
    this.timeDelta = 0.5;
    this.resistance = 1;
    this.capacitance = 10;
    this.timeConstant = this.resistance * this.capacitance;
    this.refractory = 16;
    this.voltage = 0;
    this.currentVoltage = this.voltage;
    setInterval((function() {
      return _this.setCurrentVoltage();
    }), this.periodicity);
    this.createSynapse('excitatory');
    return this.createSynapse('inhibitory');
  };

  Neuron.prototype.setCurrentVoltage = function() {
    var activeSynapseSpike, stillActiveSynapseSpikes, synapse, synapseSpike, voltage, voltageDiff, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _results;
    this.timeSinceStart += this.timeDelta;
    this.lastVoltage = this.currentVoltage;
    if (this.activeSynapseSpikes.length) {
      stillActiveSynapseSpikes = [];
      _ref = this.activeSynapseSpikes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        activeSynapseSpike = _ref[_i];
        activeSynapseSpike.used += 2;
        if (activeSynapseSpike.used >= 50) {
          this.voltage -= activeSynapseSpike.voltage;
        } else {
          voltageDiff = activeSynapseSpike.voltage / activeSynapseSpike.used;
          activeSynapseSpike.voltage -= voltageDiff;
          this.voltage -= voltageDiff;
          stillActiveSynapseSpikes.push(activeSynapseSpike);
        }
      }
      this.activeSynapseSpikes = stillActiveSynapseSpikes;
    }
    _ref1 = this.synapseSpikes;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      synapseSpike = _ref1[_j];
      voltage = this.synapseSpikes.shift() * 3;
      this.activeSynapseSpikes.push({
        used: 2,
        voltage: voltage
      });
      this.voltage += voltage;
    }
    if (this.timeSinceStart > this.restTime) {
      this.currentVoltage = this.lastVoltage + ((-1 * this.lastVoltage) + this.voltage * this.resistance) / this.timeConstant * this.timeDelta;
      if (this.currentVoltage >= this.threshold) {
        this.currentVoltage += this.spike;
        this.restTime = this.timeSinceStart + this.refractory;
        _ref2 = this.synapses;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          synapse = _ref2[_k];
          _results.push((_ref3 = synapse.connection) != null ? _ref3.addSynapseSpike(this.spike) : void 0);
        }
        return _results;
      }
    } else {
      return this.currentVoltage = this.voltage / 4;
    }
  };

  Neuron.prototype.takeReading = function() {
    return this.currentVoltage;
  };

  Neuron.prototype.addSynapseSpike = function(spike) {
    return this.synapseSpikes.push(spike);
  };

  Neuron.prototype.addVoltage = function(amount) {
    return this.voltage += amount;
  };

  Neuron.prototype.createSynapse = function(type) {
    var endX, endY, fullDX, fullDY, glow, lastDX, lastDY, onDrag, onEnd, onStart, subPath, synapse, tip, xShift,
      _this = this;
    xShift = (type === 'inhibitory' ? -12 : 12);
    endX = this.position.left + (this.width / 2) + xShift;
    endY = this.position.top + this.height + 20;
    synapse = this.paper.path("M" + (this.position.left + (this.width / 2)) + "," + (this.position.top + (this.height / 2)) + "\nL" + endX + "," + endY);
    synapse.attr({
      'stroke-width': 2
    });
    synapse.synapseType = type;
    synapse.id = "" + this.id + "/" + this.synapses.length;
    synapse.toBack();
    if (type === 'inhibitory') {
      tip = this.paper.circle(endX, endY, 6);
      tip.attr({
        'cursor': 'move',
        'fill': '#000'
      });
    } else {
      tip = this.paper.path("M" + (endX - 6) + "," + (endY + 6) + "\nL" + (endX + 6) + "," + (endY + 6) + "\nL" + endX + "," + endY + "\nL" + (endX - 6) + "," + (endY + 6) + "                ");
      tip.attr({
        'cursor': 'move',
        'fill': '#000'
      });
    }
    glow = this.initGlow(tip);
    lastDX = 0;
    lastDY = 0;
    fullDX = 0;
    fullDY = 0;
    subPath = null;
    onDrag = function(dX, dY) {
      var path;
      path = synapse.attr('path');
      fullDX = lastDX + dX;
      fullDY = lastDY + dY;
      path[1][1] = endX + fullDX;
      path[1][2] = endY + fullDY;
      synapse.attr('path', path);
      if (subPath) {
        subPath.remove();
      }
      if (synapse.getTotalLength() > _this.width) {
        subPath = _this.paper.path(synapse.getSubpath(_this.width, synapse.getTotalLength()));
        subPath.toFront();
      }
      glow.transform("t" + fullDX + "," + fullDY);
      glow.attr({
        opacity: 0.04
      });
      glow.toFront();
      tip.transform("t" + fullDX + "," + fullDY);
      return tip.toFront();
    };
    onStart = function() {
      _this.disconnectSynapse(synapse);
      return glow.attr({
        opacity: 0.04
      });
    };
    onEnd = function() {
      var element, _i, _len, _ref, _results;
      lastDX = fullDX;
      lastDY = fullDY;
      _ref = _this.paper.getElementsByPoint(endX + fullDX, endY + fullDY);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        if (element.objectType === 'neuron') {
          _results.push(_this.connectSynapse(synapse, element.object));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    tip.drag(onDrag, onStart, onEnd);
    glow.drag(onDrag, onStart, onEnd);
    return this.synapses.push(synapse);
  };

  Neuron.prototype.connectSynapse = function(synapse, neuron) {
    var _this = this;
    if (neuron.objectType !== 'neuron') {
      return;
    }
    return synapse.connection = {
      addSynapseSpike: function(spike) {
        if (synapse.synapseType === 'inhibitory') {
          spike = spike * -1;
        }
        return neuron.addSynapseSpike(spike);
      }
    };
  };

  Neuron.prototype.disconnectSynapse = function(synapse) {
    return synapse.connection = null;
  };

  return Neuron;

})(neurobehav.Object);

neurobehav.Oscilloscope = (function(_super) {

  __extends(Oscilloscope, _super);

  Oscilloscope.prototype.objectType = 'oscilloscope';

  Oscilloscope.prototype.imageSrc = 'oscilloscope.png';

  Oscilloscope.prototype.width = 80;

  Oscilloscope.prototype.height = 42;

  Oscilloscope.prototype.axisLineCount = 5.0;

  Oscilloscope.prototype.xDelta = 1;

  Oscilloscope.prototype.scale = 100;

  function Oscilloscope(_arg) {
    var _this = this;
    this.container = _arg.container, this.range = _arg.range, this.threshold = _arg.threshold;
    Oscilloscope.__super__.constructor.apply(this, arguments);
    this.drawGrid();
    this.createImage();
    this.initImage();
    setInterval((function() {
      return _this.fire();
    }), this.periodicity);
  }

  Oscilloscope.prototype.init = function() {
    var backgroundCanvas, voltageCanvas;
    backgroundCanvas = document.createElement('CANVAS');
    this.container.append(backgroundCanvas);
    this.canvasWidth = backgroundCanvas.width = $(backgroundCanvas).width();
    this.canvasHeight = backgroundCanvas.height = $(backgroundCanvas).height();
    this.backgroundContext = backgroundCanvas.getContext('2d');
    voltageCanvas = document.createElement('CANVAS');
    this.container.append(voltageCanvas);
    voltageCanvas.width = $(voltageCanvas).width();
    voltageCanvas.height = $(voltageCanvas).height();
    this.voltageContext = voltageCanvas.getContext('2d');
    this.voltageContext.strokeStyle = 'rgba(255, 92, 92, 1)';
    this.voltageContext.lineWidth = 1;
    return this.xAxis = this.canvasHeight - (this.canvasHeight / this.axisLineCount);
  };

  Oscilloscope.prototype.initImage = function() {
    var fullDX, fullDY, glow, lastDX, lastDY, onDrag, onEnd, onStart,
      _this = this;
    this.image.attr({
      cursor: 'move'
    });
    glow = this.initGlow(this.image);
    lastDX = 0;
    lastDY = 0;
    fullDX = 0;
    fullDY = 0;
    onDrag = function(dX, dY) {
      fullDX = lastDX + dX;
      fullDY = lastDY + dY;
      _this.image.transform("t" + fullDX + "," + fullDY);
      return glow.transform("t" + fullDX + "," + fullDY);
    };
    onStart = function() {
      _this.unattach();
      return glow.show();
    };
    onEnd = function() {
      var element, _i, _len, _ref, _results;
      glow.attr({
        opacity: 0
      });
      lastDX = fullDX;
      lastDY = fullDY;
      _ref = _this.paper.getElementsByPoint(_this.position.left + fullDX, (_this.position.top + _this.height) + fullDY);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        if (element.objectType === 'neuron') {
          _results.push(_this.attachTo(element.object));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    this.image.drag(onDrag, onStart, onEnd);
    return glow.drag(onDrag, onStart, onEnd);
  };

  Oscilloscope.prototype.fire = function() {
    var voltage;
    if (!this.neuron) {
      return;
    }
    voltage = this.xAxis - (this.neuron.takeReading() * this.scale);
    this.firePosition || (this.firePosition = 0);
    if (this.firePosition > this.canvasWidth) {
      this.voltageContext.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
      this.firePosition = 0;
    }
    this.voltageContext.beginPath();
    this.voltageContext.moveTo(this.firePosition, this.lastVoltage || this.xAxis);
    this.firePosition += this.xDelta;
    this.voltageContext.lineTo(this.firePosition, voltage);
    this.voltageContext.stroke();
    this.voltageContext.closePath();
    return this.lastVoltage = voltage;
  };

  Oscilloscope.prototype.drawGrid = function() {
    var y, _i, _ref, _ref1;
    this.backgroundContext.strokeStyle = 'rgba(0, 0, 0, 0.4)';
    this.backgroundContext.lineWidth = 1;
    this.backgroundContext.beginPath();
    for (y = _i = 1, _ref = this.canvasHeight, _ref1 = this.canvasHeight / this.axisLineCount; 1 <= _ref ? _i < _ref : _i > _ref; y = _i += _ref1) {
      this.backgroundContext.moveTo(0, y);
      this.backgroundContext.lineTo(this.canvasWidth, y);
    }
    this.backgroundContext.stroke();
    return this.backgroundContext.closePath();
  };

  Oscilloscope.prototype.attachTo = function(neuron) {
    this.neuron = neuron;
  };

  Oscilloscope.prototype.unattach = function() {
    this.neuron = null;
    this.voltageContext.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
    return this.firePosition = 0;
  };

  return Oscilloscope;

})(neurobehav.Object);
