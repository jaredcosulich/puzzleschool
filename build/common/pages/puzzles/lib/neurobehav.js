// Generated by CoffeeScript 1.3.3
var fn, name, neurobehav, _ref;

neurobehav = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/neurobehav', {});

_ref = require('./neurobehav_objects/index');
for (name in _ref) {
  fn = _ref[name];
  neurobehav[name] = fn;
}

neurobehav.ViewHelper = (function() {

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  function ViewHelper(_arg) {
    var _this = this;
    this.el = _arg.el;
    this.objectEditor = new ObjectEditor({
      el: this.$('.object_editor')
    });
    this.game = new neurobehav.Game({
      el: this.el,
      objectEditor: this.objectEditor,
      showExplicitContent: function(html) {
        return _this.showExplicitContent(html);
      }
    });
  }

  ViewHelper.prototype.initGoalDescription = function() {
    return this.initExtraContent(this.$('.show_goal_description'), this.goalDescriptionHtml);
  };

  ViewHelper.prototype.initHints = function() {
    var html;
    html = '<br/><br/><p style=\'text-align: center;\'>No Hints Yet</p><br/><br/>';
    return this.initExtraContent(this.$('.hints'), html);
  };

  ViewHelper.prototype.initExtraContent = function(link, html) {
    var _this = this;
    return link.bind('click', function() {
      if (_this.objectEditor.extraContent === html) {
        return _this.objectEditor.hideExtraContent();
      } else {
        return _this.objectEditor.showExtraContent(html);
      }
    });
  };

  ViewHelper.prototype.loadFirstLevel = function() {
    var neuron1, neuron2, oscilloscope1, oscilloscope2, stimulus;
    stimulus = this.game.addObject({
      type: 'Stimulus',
      position: {
        top: 100,
        left: 100
      },
      voltage: 1.5,
      duration: 250,
      description: this.$('.descriptions .stimulus').html()
    });
    neuron1 = this.game.addObject({
      type: 'Neuron',
      position: {
        top: 100,
        left: 300
      },
      threshold: 1,
      spike: 0.5,
      description: this.$('.descriptions .neuron').html(),
      inhibitoryDescription: this.$('.descriptions .inhibitory').html(),
      excitatoryDescription: this.$('.descriptions .excitatory').html()
    });
    stimulus.connectTo(neuron1);
    neuron2 = this.game.addObject({
      type: 'Neuron',
      position: {
        top: 300,
        left: 200
      },
      threshold: 1,
      spike: 0.5,
      description: this.$('.descriptions .neuron').html(),
      inhibitoryDescription: this.$('.descriptions .inhibitory').html(),
      excitatoryDescription: this.$('.descriptions .excitatory').html()
    });
    oscilloscope1 = this.game.addObject({
      type: 'Oscilloscope',
      position: {
        top: 40,
        left: 380
      },
      board: this.game.board,
      description: this.$('.descriptions .oscilloscope').html()
    });
    oscilloscope1.attachTo(neuron1);
    oscilloscope2 = this.game.addObject({
      type: 'Oscilloscope',
      position: {
        top: 240,
        left: 280
      },
      board: this.game.board,
      description: this.$('.descriptions .oscilloscope').html()
    });
    oscilloscope2.attachTo(neuron2);
    this.goalDescriptionHtml = "<h4>The Goal: Get The Heart To Beat</h4>\n<p>Using the red button add enough electricity to the neuron to cause it to exceed it's threshold.</p>\n<p>The threshold line is depicted below in the oscilloscope screen as a dashed green line.</p>";
    this.initGoalDescription();
    return this.initHints();
  };

  return ViewHelper;

})();
