// Generated by CoffeeScript 1.3.3
var BASE_FOLDER, PERIODICITY, neurobehav,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

neurobehav = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/neurobehav', {});

BASE_FOLDER = '/assets/images/puzzles/neurobehav/';

PERIODICITY = 20;

neurobehav.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

neurobehav.ViewHelper = (function() {

  ViewHelper.prototype.baseFolder = BASE_FOLDER;

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  function ViewHelper(_arg) {
    this.el = _arg.el;
    this.initBoard();
    this.initOscilloscope();
    this.stimulus = this.addObject({
      type: 'Stimulus',
      position: {
        top: 100,
        left: 100
      },
      voltage: 1.5
    });
    this.neuron = this.addObject({
      type: 'Neuron',
      position: {
        top: 100,
        left: 300
      },
      threshold: 1,
      spike: 0.5
    });
    this.stimulus.connectTo(this.neuron);
  }

  ViewHelper.prototype.initBoard = function() {
    var dimensions;
    this.board = this.$('.board');
    dimensions = this.board.offset();
    return this.paper = Raphael(dimensions.left, dimensions.top, dimensions.width, dimensions.height);
  };

  ViewHelper.prototype.initOscilloscope = function() {
    var _this = this;
    return this.oscilloscope = new neurobehav.Oscilloscope({
      container: this.$('.oscilloscope'),
      takeReading: function() {
        if (_this.neuron) {
          return _this.neuron.takeReading();
        }
      }
    });
  };

  ViewHelper.prototype.addObject = function(data) {
    data.paper = this.paper;
    return new neurobehav[data.type](data);
  };

  return ViewHelper;

})();

neurobehav.Object = (function() {

  function Object() {}

  Object.prototype.periodicity = PERIODICITY;

  Object.prototype.baseFolder = BASE_FOLDER;

  Object.prototype.create = function() {
    return this.image = this.paper.image("" + this.baseFolder + this.imageSrc, this.position.left, this.position.top, this.fullWidth || this.width, this.fullHeight || this.height);
  };

  Object.prototype.init = function() {
    return raise("no init method for " + this.objectType);
  };

  return Object;

})();

neurobehav.Stimulus = (function(_super) {

  __extends(Stimulus, _super);

  Stimulus.prototype.objectType = 'stimulus';

  Stimulus.prototype.imageSrc = 'stimulus_button.png';

  Stimulus.prototype.height = 50;

  Stimulus.prototype.width = 50;

  Stimulus.prototype.fullWidth = 100;

  function Stimulus(_arg) {
    this.paper = _arg.paper, this.position = _arg.position, this.voltage = _arg.voltage;
    this.init();
  }

  Stimulus.prototype.init = function() {
    var _this = this;
    this.create();
    this.state = 0;
    this.setImage();
    this.image.click(function() {
      return _this.toggleState();
    });
    return this.image.attr({
      cursor: 'pointer'
    });
  };

  Stimulus.prototype.toggleState = function() {
    this.state += 1;
    this.state = this.state % 2;
    this.setImage();
    return this.neuron.addVoltage(this.state === 0 ? this.voltage * -1 : this.voltage);
  };

  Stimulus.prototype.setImage = function() {
    return this.image.attr({
      'clip-rect': "" + this.position.left + ", " + this.position.top + ", " + this.width + ", " + this.height,
      transform: "t" + (-1 * this.width * this.state) + ",0"
    });
  };

  Stimulus.prototype.connectTo = function(neuron) {
    this.neuron = neuron;
    this.connection = this.paper.path("M" + (this.position.left + (this.width / 2)) + "," + (this.position.top + (this.height / 2)) + "\nL" + this.neuron.position.left + "," + (this.neuron.position.top + (this.neuron.height / 2)));
    this.connection.attr({
      'stroke-width': 2,
      'arrow-end': 'block-wide-long'
    });
    this.connection.toBack();
    return this.neuron.addVoltage(this.voltage * this.state);
  };

  return Stimulus;

})(neurobehav.Object);

neurobehav.Neuron = (function(_super) {

  __extends(Neuron, _super);

  Neuron.prototype.objectType = 'neuron';

  Neuron.prototype.imageSrc = 'neuron.png';

  Neuron.prototype.height = 60;

  Neuron.prototype.width = 60;

  function Neuron(_arg) {
    this.paper = _arg.paper, this.position = _arg.position, this.threshold = _arg.threshold, this.spike = _arg.spike;
    this.init();
  }

  Neuron.prototype.init = function() {
    var _this = this;
    this.timeSinceStart = 0;
    this.restTime = 0;
    this.timeDelta = 0.5;
    this.resistance = 1;
    this.capacitance = 10;
    this.timeConstant = this.resistance * this.capacitance;
    this.refractory = 16;
    this.voltage = 0;
    this.currentVoltage = this.voltage;
    setInterval((function() {
      return _this.setCurrentVoltage();
    }), this.periodicity);
    return this.create();
  };

  Neuron.prototype.setCurrentVoltage = function() {
    this.timeSinceStart += this.timeDelta;
    this.lastVoltage = this.currentVoltage;
    if (this.timeSinceStart > this.restTime) {
      this.currentVoltage = this.lastVoltage + ((-1 * this.lastVoltage) + this.voltage * this.resistance) / this.timeConstant * this.timeDelta;
      if (this.currentVoltage >= this.threshold) {
        this.currentVoltage += this.spike;
        return this.restTime = this.timeSinceStart + this.refractory;
      }
    } else {
      return this.currentVoltage = 0;
    }
  };

  Neuron.prototype.takeReading = function() {
    return this.currentVoltage;
  };

  Neuron.prototype.addVoltage = function(amount) {
    return this.voltage += amount;
  };

  return Neuron;

})(neurobehav.Object);

neurobehav.Oscilloscope = (function() {

  Oscilloscope.prototype.periodicity = PERIODICITY;

  Oscilloscope.prototype.axisLineCount = 5.0;

  Oscilloscope.prototype.xDelta = 1;

  Oscilloscope.prototype.scale = 100;

  function Oscilloscope(_arg) {
    var _this = this;
    this.container = _arg.container, this.range = _arg.range, this.threshold = _arg.threshold, this.takeReading = _arg.takeReading;
    this.init();
    this.drawGrid();
    setInterval((function() {
      return _this.fire();
    }), this.periodicity);
  }

  Oscilloscope.prototype.init = function() {
    var backgroundCanvas, voltageCanvas;
    backgroundCanvas = document.createElement('CANVAS');
    this.container.append(backgroundCanvas);
    this.width = backgroundCanvas.width = $(backgroundCanvas).width();
    this.height = backgroundCanvas.height = $(backgroundCanvas).height();
    this.backgroundContext = backgroundCanvas.getContext('2d');
    voltageCanvas = document.createElement('CANVAS');
    this.container.append(voltageCanvas);
    voltageCanvas.width = $(voltageCanvas).width();
    voltageCanvas.height = $(voltageCanvas).height();
    this.voltageContext = voltageCanvas.getContext('2d');
    this.voltageContext.strokeStyle = 'rgba(255, 92, 92, 1)';
    this.voltageContext.lineWidth = 1;
    return this.xAxis = this.height - (this.height / this.axisLineCount);
  };

  Oscilloscope.prototype.fire = function() {
    var voltage;
    voltage = this.xAxis - (this.takeReading() * this.scale);
    this.firePosition || (this.firePosition = 0);
    if (this.firePosition > this.width) {
      this.voltageContext.clearRect(0, 0, this.width, this.height);
      this.firePosition = 0;
    }
    this.voltageContext.beginPath();
    this.voltageContext.moveTo(this.firePosition, this.lastVoltage || this.xAxis);
    this.firePosition += this.xDelta;
    this.voltageContext.lineTo(this.firePosition, voltage);
    this.voltageContext.stroke();
    this.voltageContext.closePath();
    return this.lastVoltage = voltage;
  };

  Oscilloscope.prototype.drawGrid = function() {
    var y, _i, _ref, _ref1;
    this.backgroundContext.strokeStyle = 'rgba(0, 0, 0, 0.4)';
    this.backgroundContext.lineWidth = 1;
    this.backgroundContext.beginPath();
    for (y = _i = 1, _ref = this.height, _ref1 = this.height / this.axisLineCount; 1 <= _ref ? _i < _ref : _i > _ref; y = _i += _ref1) {
      this.backgroundContext.moveTo(0, y);
      this.backgroundContext.lineTo(this.width, y);
    }
    this.backgroundContext.stroke();
    return this.backgroundContext.closePath();
  };

  return Oscilloscope;

})();
