// Generated by CoffeeScript 1.3.3
var fn, name, neurobehav, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

neurobehav = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/neurobehav', {});

_ref = require('./neurobehav_objects/index');
for (name in _ref) {
  fn = _ref[name];
  neurobehav[name] = fn;
}

neurobehav.ViewHelper = (function() {

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  function ViewHelper(_arg) {
    var _this = this;
    this.el = _arg.el;
    this.showMoreSidebarContent = __bind(this.showMoreSidebarContent, this);

    this.propertyEditor = new Properties({
      el: this.$('.properties'),
      initDescription: function() {
        return _this.initDescription();
      }
    });
    this.game = new neurobehav.Game({
      el: this.el,
      propertyEditor: this.propertyEditor
    });
  }

  ViewHelper.prototype.initGoalDescription = function() {
    return this.initMoreContent(this.$('.show_goal_description'), false, this.goalDescriptionHtml);
  };

  ViewHelper.prototype.initHints = function() {
    var html;
    html = '<br/><br/><p style=\'text-align: center;\'>No Hints Yet</p><br/><br/>';
    return this.initMoreContent(this.$('.hints'), false, html);
  };

  ViewHelper.prototype.initDescription = function() {
    return this.initMoreContent(this.$('.read_more_description'), true, this.$('.more_description').html());
  };

  ViewHelper.prototype.initMoreContent = function(link, bottom, html) {
    var _this = this;
    return link.one('click', function() {
      var offset;
      offset = link.offset();
      _this.showMoreSidebarContent(html, link, bottom);
      return $.timeout(10, function() {
        return $(document.body).one('click', function() {
          _this.initMoreContent(link, bottom, html);
          return _this.hideMoreSidebarContent(bottom);
        });
      });
    });
  };

  ViewHelper.prototype.showMoreSidebarContent = function(html, anchor, bottom) {
    var content, height, offset, top;
    this.moreSidebarContent = this.$('.more_info');
    this.moreSidebarContent.css({
      height: 'auto',
      left: -1000,
      top: -1000
    });
    content = this.moreSidebarContent.find('.content');
    content.html(html);
    height = Math.min(this.moreSidebarContent.offset().height, this.oscilloscopeScreen.offset().height);
    content.css({
      height: height
    });
    offset = anchor.offset();
    if (bottom) {
      top = offset.top - height - 6;
    } else {
      top = offset.top + offset.height + 6;
    }
    this.moreSidebarContent.css({
      height: 0,
      left: this.oscilloscopeScreen.offset().left,
      top: (bottom ? offset.top - 6 : top)
    });
    return this.moreSidebarContent.animate({
      height: height,
      top: top,
      duration: 250
    });
  };

  ViewHelper.prototype.hideMoreSidebarContent = function(bottom) {
    var offset,
      _this = this;
    offset = this.moreSidebarContent.offset();
    return this.moreSidebarContent.animate({
      height: 0,
      top: (bottom ? offset.top + offset.height : top),
      duration: 250,
      complete: function() {
        var content;
        content = _this.moreSidebarContent.find('.content');
        content.html('');
        content.css({
          height: 'auto'
        });
        return _this.moreSidebarContent.css({
          height: 'auto',
          left: -1000,
          top: -1000
        });
      }
    });
  };

  ViewHelper.prototype.loadFirstLevel = function() {
    var neuron1, neuron2, oscilloscope, stimulus;
    stimulus = this.game.addObject({
      type: 'Stimulus',
      position: {
        top: 100,
        left: 100
      },
      voltage: 1.5,
      duration: 250,
      description: this.$('.descriptions .stimulus').html()
    });
    neuron1 = this.game.addObject({
      type: 'Neuron',
      position: {
        top: 100,
        left: 300
      },
      threshold: 1,
      spike: 0.5,
      description: this.$('.descriptions .neuron').html(),
      inhibitoryDescription: this.$('.descriptions .inhibitory').html(),
      excitatoryDescription: this.$('.descriptions .excitatory').html()
    });
    stimulus.connectTo(neuron1);
    neuron2 = this.game.addObject({
      type: 'Neuron',
      position: {
        top: 300,
        left: 200
      },
      threshold: 1,
      spike: 0.5,
      description: this.$('.descriptions .neuron').html(),
      inhibitoryDescription: this.$('.descriptions .inhibitory').html(),
      excitatoryDescription: this.$('.descriptions .excitatory').html()
    });
    oscilloscope = this.game.addObject({
      type: 'Oscilloscope',
      position: {
        top: 80,
        left: 340
      },
      board: this.game.board,
      description: this.$('.descriptions .oscilloscope').html()
    });
    oscilloscope.attachTo(neuron1);
    this.goalDescriptionHtml = "<h4>Get The Heart To Beat</h4>\n<p>Using the red button add enough electricity to the neuron to cause it to exceed it's threshold.</p>\n<p>The threshold line is depicted below in the oscilloscope screen as a dashed green line.</p>";
    this.initGoalDescription();
    return this.initHints();
  };

  return ViewHelper;

})();
