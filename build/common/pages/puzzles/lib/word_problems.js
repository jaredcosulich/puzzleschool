// Generated by CoffeeScript 1.3.3
var Transformer, wordProblems,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

wordProblems = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/word_problems', {});

Transformer = require('./transformer').Transformer;

wordProblems.ViewHelper = (function() {

  function ViewHelper(_arg) {
    this.el = _arg.el, this.level = _arg.level;
    this.clientY = __bind(this.clientY, this);

    this.clientX = __bind(this.clientX, this);

    this.initLevel(this.level);
  }

  ViewHelper.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  ViewHelper.prototype.clientX = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientX || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageX : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageX : void 0 : void 0)) - this.el.offset().left;
  };

  ViewHelper.prototype.clientY = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientY || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageY : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageY : void 0 : void 0)) - this.el.offset().top;
  };

  ViewHelper.prototype.initLevel = function() {
    this.$('.problem').html(this.highlightProblem(this.level.problem));
    return this.initNumbers();
  };

  ViewHelper.prototype.highlightProblem = function(problem) {
    return problem.replace(/(\d+)/g, '<span class=\'number\'>$1</span>');
  };

  ViewHelper.prototype.initNumbers = function() {
    var colorIndex, id, index, number, settings, _i, _len, _ref, _ref1, _results;
    this.transformers = {};
    _ref = this.$('.problem .number');
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      number = _ref[index];
      number = $(number);
      id = new Date().getTime();
      settings = (_ref1 = this.level.numbers) != null ? _ref1[index] : void 0;
      colorIndex = (settings != null ? settings.colorIndex : void 0) || index + 1;
      number.addClass("color_" + colorIndex);
      number.addClass("number_" + id);
      _results.push(this.createNumber(number.html(), id, colorIndex, settings != null ? settings.label : void 0));
    }
    return _results;
  };

  ViewHelper.prototype.createNumber = function(value, id, colorIndex, label) {
    var number,
      _this = this;
    number = $(document.createElement('DIV'));
    number.data('id', id);
    number.addClass('number');
    number.addClass("color_" + colorIndex);
    number.addClass('small');
    number.html("<div class='settings'>\n    <i class='icon-cog'></i>\n</div>\n<h3><span class='value'>" + value + "</span>" + (label ? " " + label : void 0) + "</h3>\n<div class='ranges'></div>");
    number.bind('mousedown.drag touchstart.drag', function(e) {
      var startX, startY;
      startX = _this.clientX(e);
      startY = _this.clientY(e);
      $(document.body).bind('mousemove.drag touchstart.drag', function(e) {
        var currentX, currentY;
        currentX = _this.clientX(e);
        currentY = _this.clientY(e);
        return _this.transformers[id].translate(currentX - startX, currentY - startY);
      });
      return $(document.body).one('mouseup.drag touchend.drag', function() {
        $(document.body).unbind('mousemove.drag touchstart.drag');
        if (!_this.transformers[id].dx && !_this.transformers[id].dy) {
          if (number.hasClass('small')) {
            return number.removeClass('small');
          } else {
            return number.addClass('small');
          }
        } else {
          return _this.transformers[id].translate(0, 0);
        }
      });
    });
    this.$('.numbers').append(number);
    this.setNumber(number, value);
    return this.transformers[id] = new Transformer(number);
  };

  ViewHelper.prototype.createRange = function(container, magnitude) {
    var i, range, _fn, _i,
      _this = this;
    range = $(document.createElement('DIV'));
    range.addClass('range');
    range.addClass("range_" + magnitude);
    range.data('magnitude', magnitude);
    _fn = function(i) {
      var index, label;
      index = $(document.createElement('DIV'));
      index.addClass('index');
      label = $(document.createElement('DIV'));
      label.addClass('label');
      label.html("" + (i * Math.pow(10, magnitude)));
      index.append(label);
      range.append(index);
      return index.bind('click', function() {
        var changingDigit, digits;
        digits = _this.getDigits(_this.getNumber(container));
        changingDigit = digits.length - magnitude - 1;
        digits[changingDigit] = parseInt(digits[changingDigit]) === i ? i - 1 : i;
        if (digits[changingDigit] === 0 && parseInt(digits[changingDigit + 1]) === 0) {
          digits[changingDigit + 1] = 9;
        }
        return _this.setNumber(container, digits.join(''));
      });
    };
    for (i = _i = 1; _i <= 10; i = ++_i) {
      _fn(i);
    }
    container.find('.ranges').prepend(range);
    return range;
  };

  ViewHelper.prototype.getNumber = function(container) {
    return container.data('value');
  };

  ViewHelper.prototype.getDigits = function(number) {
    return number.toString().match(/\d/g);
  };

  ViewHelper.prototype.setNumber = function(container, value) {
    var digit, digits, i, index, m, magnitude, range, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    value = parseInt(value);
    digits = this.getDigits(value);
    _ref = container.find('.range');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      range = _ref[_i];
      if (parseInt($(range).data('magnitude')) >= digits.length) {
        $(range).remove();
      }
    }
    for (m = _j = 0, _len1 = digits.length; _j < _len1; m = ++_j) {
      digit = digits[m];
      magnitude = digits.length - m - 1;
      if (!(range = container.find(".range_" + magnitude)).length) {
        range = this.createRange(container, magnitude, digit);
      }
      range.css({
        fontSize: 50 - (10 * m)
      });
      _ref1 = range.find('.index');
      for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
        index = _ref1[i];
        index = $(index);
        if ((i + 1) > parseInt(digit)) {
          index.removeClass('icon-circle');
          if (!index.hasClass('icon-circle-blank')) {
            index.addClass('icon-circle-blank');
          }
        } else {
          index.removeClass('icon-circle-blank');
          if (!index.hasClass('icon-circle')) {
            index.addClass('icon-circle');
          }
        }
      }
    }
    container.find('.value').html("" + value);
    container.data('value', value);
    return this.$(".problem .number_" + (container.data('id'))).html("" + value);
  };

  return ViewHelper;

})();
