// Generated by CoffeeScript 1.3.3
var fn, name, wordProblems, _ref;

wordProblems = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/word_problems', {});

_ref = require('./word_problem_objects/index');
for (name in _ref) {
  fn = _ref[name];
  wordProblems[name] = fn;
}

wordProblems.ViewHelper = (function() {

  function ViewHelper(_arg) {
    this.el = _arg.el, this.level = _arg.level;
    this.operators = [];
    this.numbers = [];
    this.interactions = [];
    this.addInteraction();
    this.initLevel(this.level);
    this.initOperators();
  }

  ViewHelper.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  ViewHelper.prototype.initLevel = function() {
    this.$('.problem').html(this.highlightProblem(this.level.problem));
    return this.initNumbers();
  };

  ViewHelper.prototype.highlightProblem = function(problem) {
    return problem.replace(/(\d+)/g, '<span class=\'number\'>$1</span>');
  };

  ViewHelper.prototype.initNumbers = function() {
    var colorIndex, drag, id, index, number, settings, _i, _len, _ref1, _ref2,
      _this = this;
    drag = function(component, x, y, final) {
      return _this.dragComponent(component, x, y, final);
    };
    _ref1 = this.$('.problem .number');
    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
      number = _ref1[index];
      number = $(number);
      id = new Date().getTime();
      settings = (_ref2 = this.level.numbers) != null ? _ref2[index] : void 0;
      colorIndex = (settings != null ? settings.colorIndex : void 0) || index + 1;
      number.addClass("color_" + colorIndex);
      number.addClass("number_" + id);
      this.numbers.push(new wordProblems.Number({
        id: id,
        value: number.html(),
        colorIndex: colorIndex,
        label: settings != null ? settings.label : void 0,
        problemNumber: this.$(".problem .number_" + id),
        container: this.$('.numbers'),
        drag: drag
      }));
    }
    return this.numbers.push(new wordProblems.Number({
      value: '?',
      container: this.$('.numbers'),
      drag: drag
    }));
  };

  ViewHelper.prototype.dragComponent = function(number, x, y, final) {
    var interaction, _i, _len, _ref1, _results;
    if (!this.el.hasClass('dragging')) {
      this.el.addClass('dragging');
    }
    if (final) {
      this.el.removeClass('dragging');
    }
    _ref1 = this.interactions;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      interaction = _ref1[_i];
      if (interaction.over(x, y, true)) {
        if (final) {
          _results.push(interaction.accept(number));
        } else {
          _results.push(void 0);
        }
      }
    }
    return _results;
  };

  ViewHelper.prototype.addInteraction = function() {
    return this.interactions.push(new wordProblems.Interaction({
      container: this.$('.interactions')
    }));
  };

  ViewHelper.prototype.initOperators = function() {
    var operator, _i, _len, _ref1, _results,
      _this = this;
    _ref1 = ['+', '-', '/', '*', '='];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      operator = _ref1[_i];
      _results.push(this.operators.push(new wordProblems.Operator({
        value: operator,
        container: this.$('.numbers'),
        drag: function(component, x, y, final) {
          return _this.dragComponent(component, x, y, final);
        }
      })));
    }
    return _results;
  };

  return ViewHelper;

})();
