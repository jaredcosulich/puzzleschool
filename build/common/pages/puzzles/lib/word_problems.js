// Generated by CoffeeScript 1.3.3
var fn, name, wordProblems, _ref;

wordProblems = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/word_problems', {});

_ref = require('./word_problem_objects/index');
for (name in _ref) {
  fn = _ref[name];
  wordProblems[name] = fn;
}

wordProblems.ViewHelper = (function() {

  function ViewHelper(_arg) {
    this.el = _arg.el, this.level = _arg.level;
    this.numbers = [];
    this.interactions = [];
    this.initLevel(this.level);
  }

  ViewHelper.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  ViewHelper.prototype.initLevel = function() {
    this.$('.problem').html(this.highlightProblem(this.level.problem));
    return this.initNumbers();
  };

  ViewHelper.prototype.highlightProblem = function(problem) {
    return problem.replace(/(\d+)/g, '<span class=\'number\'>$1</span>');
  };

  ViewHelper.prototype.initNumbers = function() {
    var colorIndex, id, index, number, settings, _i, _len, _ref1, _ref2, _results,
      _this = this;
    _ref1 = this.$('.problem .number');
    _results = [];
    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
      number = _ref1[index];
      number = $(number);
      id = new Date().getTime();
      settings = (_ref2 = this.level.numbers) != null ? _ref2[index] : void 0;
      colorIndex = (settings != null ? settings.colorIndex : void 0) || index + 1;
      number.addClass("color_" + colorIndex);
      number.addClass("number_" + id);
      _results.push(this.numbers.push(new wordProblems.Number({
        container: this.$('.numbers'),
        problemNumber: this.$(".problem .number_" + id),
        id: id,
        value: number.html(),
        colorIndex: colorIndex,
        label: settings != null ? settings.label : void 0,
        track: function(n, x, y) {
          return _this.trackDrag(n, x, y);
        }
      })));
    }
    return _results;
  };

  ViewHelper.prototype.trackDrag = function(number, x, y) {
    var interaction, _i, _len, _ref1, _results;
    _ref1 = this.interactions;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      interaction = _ref1[_i];
      if (interaction.over(x, y)) {
        _results.push(interaction.add(number));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return ViewHelper;

})();
