// Generated by CoffeeScript 1.3.3
var game;

game = typeof exports !== "undefined" && exports !== null ? exports : provide('./game', {});

game.Game = (function() {

  Game.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  function Game(_arg) {
    var neuron1, neuron2, oscilloscope, stimulus;
    this.el = _arg.el;
    this.initBoard();
    stimulus = this.addObject({
      type: 'Stimulus',
      position: {
        top: 100,
        left: 100
      },
      voltage: 1.5
    });
    neuron1 = this.addObject({
      type: 'Neuron',
      position: {
        top: 100,
        left: 300
      },
      threshold: 1,
      spike: 0.5
    });
    stimulus.connectTo(neuron1);
    neuron2 = this.addObject({
      type: 'Neuron',
      position: {
        top: 300,
        left: 200
      },
      threshold: 1,
      spike: 0.5
    });
    oscilloscope = this.addObject({
      type: 'Oscilloscope',
      position: {
        top: 80,
        left: 340
      },
      container: this.$('.oscilloscope')
    });
    oscilloscope.attachTo(neuron1);
  }

  Game.prototype.initBoard = function() {
    var dimensions;
    this.board = this.$('.board');
    dimensions = this.board.offset();
    return this.paper = Raphael(dimensions.left, dimensions.top, dimensions.width, dimensions.height);
  };

  Game.prototype.addObject = function(data) {
    var _this = this;
    data.paper = this.paper;
    data.id = this.nextId();
    data.propertiesArea = this.$('.properties');
    data.setProperty = function(property, value) {
      return _this.$(".properties ." + property).html("" + value);
    };
    return new neurobehav[data.type](data);
  };

  Game.prototype.nextId = function() {
    return this.currentId = (this.currentId || 0) + 1;
  };

  return Game;

})();
