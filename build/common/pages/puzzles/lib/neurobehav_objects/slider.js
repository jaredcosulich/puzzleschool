// Generated by CoffeeScript 1.3.3
var slider,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

slider = typeof exports !== "undefined" && exports !== null ? exports : provide('./slider', {});

slider.Slider = (function() {

  Slider.prototype.radius = 6;

  function Slider(_arg) {
    this.paper = _arg.paper, this.x = _arg.x, this.y = _arg.y, this.width = _arg.width, this.min = _arg.min, this.max = _arg.max, this.unit = _arg.unit;
    this.moveKnob = __bind(this.moveKnob, this);

    this.segment = this.width / (this.max - this.min);
    this.listeners = [];
    this.init();
  }

  Slider.prototype.init = function() {
    var guide, onDrag, onEnd, onStart,
      _this = this;
    this.el = this.paper.set();
    this.range = this.max / this.unit;
    this.segment = this.width / this.range;
    guide = this.paper.path("M" + this.x + "," + this.y + "L" + (this.x + this.width) + "," + this.y);
    guide.attr({
      'stroke': "#ccc",
      'stroke-width': 5,
      'stroke-linecap': 'round'
    });
    this.knob = this.paper.circle(this.x, this.y, this.radius);
    this.knob.attr({
      cursor: 'move',
      stroke: '#555',
      fill: 'r(0.5, 0.5)#ddd-#666'
    });
    this.lastDeltaX = (this.segment * this.val) / this.unit;
    this.deltaX = 0;
    this.knob.transform("t" + this.lastDeltaX + ",0");
    onDrag = function(dX, dY) {
      return _this.moveKnob(dX, dY);
    };
    onStart = function() {
      return _this.el.noClick = true;
    };
    onEnd = function() {
      if (_this.deltaX) {
        _this.lastDeltaX = _this.deltaX;
      } else {
        _this.el.noClick = false;
      }
      _this.deltaX = 0;
      return $.timeout(10, function() {
        return _this.el.noClick = false;
      });
    };
    this.knob.drag(onDrag, onStart, onEnd);
    this.el.push(guide);
    return this.el.push(this.knob);
  };

  Slider.prototype.addListener = function(listener) {
    return this.listeners.push(listener);
  };

  Slider.prototype.moveKnob = function(dX, dY) {
    var listener, segments, _i, _len, _ref, _results;
    if (dX == null) {
      dX = 0;
    }
    if (dY == null) {
      dY = 0;
    }
    this.deltaX = this.lastDeltaX + dX;
    if (this.deltaX > this.width) {
      this.deltaX = this.width;
    }
    if (this.deltaX < this.min) {
      this.deltaX = this.min;
    }
    segments = Math.round(this.deltaX / this.segment);
    this.val = this.unit * segments;
    this.knob.transform("t" + this.deltaX + "," + 0);
    _ref = this.listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      _results.push(listener(this.val));
    }
    return _results;
  };

  Slider.prototype.set = function(val) {
    if (val === this.val) {
      return;
    }
    this.lastDeltaX = this.segment * (val / this.unit);
    return this.moveKnob();
  };

  return Slider;

})();
