// Generated by CoffeeScript 1.3.3
var object,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

object = typeof exports !== "undefined" && exports !== null ? exports : provide('./object', {});

object.Object = (function() {

  Object.prototype.periodicity = 20;

  Object.prototype.baseFolder = '/assets/images/puzzles/neurobehav/';

  function Object(_arg) {
    this.id = _arg.id, this.paper = _arg.paper, this.position = _arg.position, this.propertiesArea = _arg.propertiesArea, this.setProperty = _arg.setProperty;
    this.propertiesClick = __bind(this.propertiesClick, this);

    this.init();
  }

  Object.prototype.createImage = function() {
    this.image = this.paper.image("" + this.baseFolder + this.imageSrc, this.position.left, this.position.top, this.fullWidth || this.width, this.fullHeight || this.height);
    this.image.objectType = this.objectType;
    this.image.objectName = this.objectName;
    this.image.object = this;
    return this.image;
  };

  Object.prototype.init = function() {
    return raise("no init method for " + this.objectType);
  };

  Object.prototype.initMoveGlow = function(element) {
    var glow, set,
      _this = this;
    glow = element.glow({
      width: 30,
      fill: true,
      color: 'yellow'
    });
    glow.attr({
      opacity: 0,
      cursor: 'move'
    });
    set = this.paper.set();
    set.push(element);
    set.push(glow);
    set.hover(function() {
      return glow.attr({
        opacity: 0.04
      });
    }, function() {
      return glow.attr({
        opacity: 0
      });
    });
    glow.toFront();
    element.toFront();
    return glow;
  };

  Object.prototype.initPropertiesGlow = function(element) {
    var glow,
      _this = this;
    if (element == null) {
      element = this.image;
    }
    if (element.propertiesGlow) {
      element.propertiesGlow.remove();
    }
    element.attr({
      cursor: 'pointer'
    });
    if (element.forEach) {
      glow = this.paper.set();
      element.forEach(function(e) {
        return glow.push(e.glow({
          width: 20,
          fill: true,
          color: 'red'
        }));
      });
    } else {
      glow = element.glow({
        width: 20,
        fill: true,
        color: 'red'
      });
    }
    glow.hide();
    element.hover(function() {
      return glow.show();
    }, function() {
      if (!element.propertiesDisplayed) {
        return glow.hide();
      }
    });
    element.propertiesGlow = glow;
    return glow;
  };

  Object.prototype.initProperties = function(properties, element) {
    var _this = this;
    if (element == null) {
      element = this.image;
    }
    element.properties = JSON.parse(JSON.stringify(properties));
    this.initPropertiesGlow(element);
    element.click(function() {
      return _this.propertiesClick(element);
    });
    return element.propertiesGlow;
  };

  Object.prototype.propertiesClick = function(element) {
    if (element == null) {
      element = this.image;
    }
    if (element.noClick) {
      return;
    }
    if (element.propertiesDisplayed) {
      element.propertiesGlow.hide();
      return this.hideProperties(element);
    } else {
      element.propertiesGlow.show();
      return this.showProperties(element);
    }
  };

  Object.prototype.showProperties = function(element) {
    var property, ui;
    if (element == null) {
      element = this.image;
    }
    if (element.propertiesDisplayed) {
      return;
    }
    element.propertiesDisplayed = true;
    this.propertiesArea.find('.nothing_selected').hide();
    (ui = this.propertiesArea.find('.object_properties')).show();
    ui.html('');
    for (property in element.properties) {
      ui.append("<p>" + element.properties[property].name + ": \n    <span class='" + property + "'>" + element.properties[property].value + "</span>\n</p>");
    }
    return this.propertiesArea.find('.object_type').html(element.objectName);
  };

  Object.prototype.hideProperties = function(element) {
    if (element == null) {
      element = this.image;
    }
    if (!element.propertiesDisplayed) {
      return;
    }
    element.propertiesDisplayed = false;
    this.propertiesArea.find('.object_properties').hide();
    return this.propertiesArea.find('.nothing_selected').show();
  };

  return Object;

})();
