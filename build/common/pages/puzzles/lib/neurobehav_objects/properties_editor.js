// Generated by CoffeeScript 1.3.3
var Bubble, Slider, propertiesEditor;

propertiesEditor = typeof exports !== "undefined" && exports !== null ? exports : provide('./properties_editor', {});

Bubble = require('./bubble').Bubble;

Slider = require('./slider').Slider;

propertiesEditor.PropertiesEditor = (function() {

  PropertiesEditor.prototype.width = 210;

  PropertiesEditor.prototype.spacing = 20;

  PropertiesEditor.prototype.backgroundColor = '#49494A';

  function PropertiesEditor(_arg) {
    this.element = _arg.element, this.paper = _arg.paper, this.properties = _arg.properties, this.name = _arg.name;
    this.init();
  }

  PropertiesEditor.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  PropertiesEditor.prototype.init = function() {
    var bbox;
    this.height = (Object.keys(this.properties).length * this.spacing) + (this.spacing * 2);
    bbox = this.element.getBBox();
    return this.bubble = new Bubble({
      paper: this.paper,
      x: bbox.x + (bbox.width / 2),
      y: bbox.y,
      width: this.width,
      height: this.height
    });
  };

  PropertiesEditor.prototype.createProperties = function(container) {
    var bbox, propertiesDisplayed, property, propertyId, title, _ref, _results,
      _this = this;
    bbox = container.getBBox();
    title = this.paper.text(bbox.x + (this.width / 2), bbox.y + 18, this.name);
    title.attr({
      fill: 'white',
      stroke: 'none',
      'font-size': 14
    });
    container.push(title);
    propertiesDisplayed = 0;
    _ref = this.properties;
    _results = [];
    for (propertyId in _ref) {
      property = _ref[propertyId];
      _results.push((function(property) {
        var name, slider, y;
        y = bbox.y + (_this.spacing * 2) + (propertiesDisplayed * _this.spacing);
        name = _this.paper.text(bbox.x + 12, y, property.name.toLowerCase());
        name.attr({
          fill: '#ccc',
          stroke: 'none',
          'font-size': 12,
          'font-weight': 1,
          'text-anchor': 'start'
        });
        container.push(name);
        propertiesDisplayed += 1;
        if (property.type === 'slider') {
          slider = new Slider({
            paper: _this.paper,
            x: bbox.x + 72,
            y: y,
            width: 60,
            min: 0,
            max: property.max,
            unit: property.unit
          });
          slider.addListener(function(value) {
            property.value = value;
            return _this.display(property);
          });
          property.object = slider;
          container.push(slider.el);
        }
        return _this.display(property, container, bbox.x + 144, y);
      })(property));
    }
    return _results;
  };

  PropertiesEditor.prototype.display = function(property, container, x, y) {
    var text;
    text = "" + property.value + " " + property.unitName;
    if (property.display) {
      property.display.attr({
        text: text
      });
    } else {
      property.display = this.paper.text(x, y, text);
      property.display.attr({
        fill: '#F6E631',
        stroke: 'none',
        'font-size': 11,
        'text-anchor': 'start'
      });
      container.push(property.display);
    }
    if (property.set) {
      return property.set(property.value);
    }
  };

  PropertiesEditor.prototype.show = function() {
    var _this = this;
    return this.bubble.show({
      content: function(container) {
        return _this.createProperties(container);
      },
      callback: function() {
        var property, propertyId, _ref, _ref1, _results;
        _ref = _this.properties;
        _results = [];
        for (propertyId in _ref) {
          property = _ref[propertyId];
          _results.push((_ref1 = property.object) != null ? _ref1.set(property.value) : void 0);
        }
        return _results;
      }
    });
  };

  PropertiesEditor.prototype.hide = function() {
    var _this = this;
    return this.bubble.hide({
      callback: function() {
        var property, propertyId, _ref, _results;
        _ref = _this.properties;
        _results = [];
        for (propertyId in _ref) {
          property = _ref[propertyId];
          _results.push(property.display = null);
        }
        return _results;
      }
    });
  };

  PropertiesEditor.prototype.toggle = function() {
    if (this.bubble.visible) {
      return this.hide();
    } else {
      return this.show();
    }
  };

  PropertiesEditor.prototype.set = function(id, value) {
    var property, _ref;
    value = parseFloat(value);
    property = this.properties[id];
    if (property.value === value) {
      return;
    }
    property.value = value;
    if ((_ref = property.object) != null) {
      _ref.set(value);
    }
    return this.display(property);
  };

  PropertiesEditor.prototype.selectElement = function(property) {
    var options, selected, value, _i, _ref, _ref1, _ref2;
    options = [];
    for (value = _i = _ref = property.min || 0, _ref1 = property.max, _ref2 = property.unit; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; value = _i += _ref2) {
      selected = ("" + value) === ("" + property.value);
      options.push("<option value=" + value + " " + (selected ? 'selected=selected' : '') + ">" + value + "</option>");
    }
    return "<select>" + (options.join('')) + "</select>";
  };

  return PropertiesEditor;

})();
