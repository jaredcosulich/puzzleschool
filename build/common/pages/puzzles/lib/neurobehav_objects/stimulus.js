// Generated by CoffeeScript 1.3.3
var neurobehavObject, slider, stimulus,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stimulus = typeof exports !== "undefined" && exports !== null ? exports : provide('./stimulus', {});

neurobehavObject = require('./object');

slider = require('./slider');

stimulus.Stimulus = (function(_super) {

  __extends(Stimulus, _super);

  Stimulus.prototype.objectType = 'stimulus';

  Stimulus.prototype.objectName = 'Stimulus';

  Stimulus.prototype.imageSrc = 'stimulus_button.png';

  Stimulus.prototype.height = 50;

  Stimulus.prototype.width = 50;

  Stimulus.prototype.fullWidth = 100;

  Stimulus.prototype.propertyList = {
    'voltage': {
      name: 'Voltage',
      type: 'slider',
      unit: 0.25,
      unitName: 'V',
      set: 'setSlider'
    },
    'duration': {
      name: 'Duration',
      type: 'slider',
      unit: 250,
      max: 10000,
      unitName: 'msec'
    }
  };

  function Stimulus(_arg) {
    var duration, voltage;
    voltage = _arg.voltage, duration = _arg.duration;
    Stimulus.__super__.constructor.apply(this, arguments);
    this.properties.voltage.value = voltage;
    this.properties.voltage.max = voltage * 2;
    this.properties.duration.value = duration;
    this.initProperties();
    this.initSlider();
  }

  Stimulus.prototype.init = function() {
    var minimumMouseDown, mousedown,
      _this = this;
    this.draw();
    this.setImage();
    mousedown = false;
    minimumMouseDown = true;
    this.image.mousedown(function() {
      if (!minimumMouseDown) {
        return;
      }
      minimumMouseDown = false;
      setTimeout((function() {
        if (!mousedown) {
          _this.setState(false);
        }
        return minimumMouseDown = true;
      }), _this.properties.duration.value);
      mousedown = true;
      return _this.setState(true);
    });
    this.image.mouseup(function() {
      if (minimumMouseDown) {
        _this.setState(false);
      }
      return mousedown = false;
    });
    return this.image.attr({
      cursor: 'pointer'
    });
  };

  Stimulus.prototype.draw = function() {
    var button;
    this.image = this.paper.set();
    return button = this.paper.circle();
  };

  Stimulus.prototype.initSlider = function() {
    var tempShowProperties,
      _this = this;
    this.slider = new Slider({
      paper: this.paper,
      x: this.position.left,
      y: this.position.top + this.height + 9,
      width: this.width,
      min: 0,
      max: this.properties.voltage.max,
      unit: this.properties.voltage.unit
    });
    this.slider.set(this.properties.voltage.value);
    tempShowProperties = null;
    return this.slider.addListener(function(val) {
      _this.propertiesEditor.show();
      if (tempShowProperties) {
        clearTimeout(tempShowProperties);
      }
      tempShowProperties = setTimeout((function() {
        return _this.propertiesEditor.hide();
      }), 1500);
      return _this.propertiesEditor.set('voltage', val);
    });
  };

  Stimulus.prototype.setState = function(on) {
    this.on = on;
    this.setImage();
    return this.neuron.addVoltage(this.on ? this.properties.voltage.value : this.properties.voltage.value * -1);
  };

  Stimulus.prototype.setSlider = function(val) {
    return this.slider.set(val);
  };

  Stimulus.prototype.setImage = function() {
    return this.image.attr({
      'clip-rect': "" + this.position.left + ", " + this.position.top + ", " + this.width + ", " + this.height,
      transform: "t" + (-1 * this.width * (this.on ? 1 : 0)) + ",0"
    });
  };

  Stimulus.prototype.connectTo = function(neuron) {
    this.neuron = neuron;
    this.connection = this.paper.path("M" + (this.position.left + (this.width / 2)) + "," + (this.position.top + (this.height / 2)) + "\nL" + this.neuron.position.left + "," + (this.neuron.position.top + (this.neuron.height / 2)));
    this.connection.attr({
      'stroke-width': 2,
      'arrow-end': 'block-wide-long'
    });
    this.connection.toBack();
    return this.neuron.addVoltage(this.properties.voltage.value * (this.on ? 1 : 0));
  };

  return Stimulus;

})(neurobehavObject.Object);
