// Generated by CoffeeScript 1.3.3
var neurobehavObject, stimulus,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stimulus = typeof exports !== "undefined" && exports !== null ? exports : provide('./stimulus', {});

neurobehavObject = require('./object');

stimulus.Stimulus = (function(_super) {

  __extends(Stimulus, _super);

  Stimulus.prototype.objectType = 'stimulus';

  Stimulus.prototype.objectName = 'Stimulus';

  Stimulus.prototype.imageSrc = 'stimulus_button.png';

  Stimulus.prototype.height = 50;

  Stimulus.prototype.width = 50;

  Stimulus.prototype.fullWidth = 100;

  function Stimulus(_arg) {
    this.voltage = _arg.voltage;
    Stimulus.__super__.constructor.apply(this, arguments);
  }

  Stimulus.prototype.init = function() {
    var _this = this;
    this.createImage();
    this.state = 0;
    this.setImage();
    this.image.click(function() {
      return _this.toggleState();
    });
    this.image.attr({
      cursor: 'pointer'
    });
    this.initSlider();
    return this.duration = 3000;
  };

  Stimulus.prototype.initSlider = function() {
    var deltaX, guide, knob, lastDeltaX, left, offset, onDrag, onEnd, onStart, properties, radius, range, right, segment, top, unit, value, voltage,
      _this = this;
    this.slider = this.paper.set();
    this.slider.objectType = this.objectType;
    this.slider.objectName = this.objectName;
    value = 1.5;
    unit = 0.25;
    range = 3 / unit;
    offset = 9;
    radius = 6;
    left = this.position.left;
    right = this.position.left + this.width;
    top = this.position.top + this.height + offset;
    segment = this.width / range;
    guide = this.paper.path("M" + left + "," + top + "L" + right + "," + top);
    guide.attr({
      'stroke': "#ccc",
      'stroke-width': 5,
      'stroke-linecap': 'round'
    });
    knob = this.paper.circle(this.position.left, this.position.top + this.height + offset, radius);
    knob.attr({
      cursor: 'move',
      stroke: '#555',
      fill: 'r(0.5, 0.5)#ddd-#666'
    });
    lastDeltaX = (segment * value) / unit;
    deltaX = 0;
    voltage = function(dX) {
      return segment * Math.round(dX / segment);
    };
    knob.transform("t" + lastDeltaX + ",0");
    onDrag = function(dX, dY) {
      _this.showProperties(_this.slider);
      deltaX = lastDeltaX + dX;
      if (deltaX > right - left) {
        deltaX = right - left;
      }
      if (deltaX < 0) {
        deltaX = 0;
      }
      deltaX = voltage(deltaX);
      _this.setProperty('voltage', (voltage(deltaX) / segment) * unit);
      knob.transform("t" + deltaX + "," + 0);
      _this.initPropertiesGlow(_this.slider);
      return _this.slider.propertiesGlow.show();
    };
    onStart = function() {
      return _this.slider.noClick = true;
    };
    onEnd = function() {
      if (deltaX) {
        _this.setProperty('voltage', (voltage(deltaX) / segment) * unit);
        lastDeltaX = deltaX;
      } else {
        _this.slider.noClick = false;
      }
      deltaX = 0;
      return $.timeout(10, function() {
        return _this.slider.noClick = false;
      });
    };
    knob.drag(onDrag, onStart, onEnd);
    this.slider.push(guide);
    this.slider.push(knob);
    properties = {
      'voltage': {
        name: 'Voltage',
        type: 'slider',
        value: '1.5'
      },
      'duration': {
        name: 'Duration',
        type: 'slider',
        value: '10'
      }
    };
    return this.initProperties(properties, this.slider);
  };

  Stimulus.prototype.toggleState = function() {
    this.state += 1;
    this.state = this.state % 2;
    this.setImage();
    return this.neuron.addVoltage(this.state === 0 ? this.voltage * -1 : this.voltage);
  };

  Stimulus.prototype.setImage = function() {
    return this.image.attr({
      'clip-rect': "" + this.position.left + ", " + this.position.top + ", " + this.width + ", " + this.height,
      transform: "t" + (-1 * this.width * this.state) + ",0"
    });
  };

  Stimulus.prototype.connectTo = function(neuron) {
    this.neuron = neuron;
    this.connection = this.paper.path("M" + (this.position.left + (this.width / 2)) + "," + (this.position.top + (this.height / 2)) + "\nL" + this.neuron.position.left + "," + (this.neuron.position.top + (this.neuron.height / 2)));
    this.connection.attr({
      'stroke-width': 2,
      'arrow-end': 'block-wide-long'
    });
    this.connection.toBack();
    return this.neuron.addVoltage(this.voltage * this.state);
  };

  return Stimulus;

})(neurobehavObject.Object);
