// Generated by CoffeeScript 1.3.3
var code;

code = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/code', {});

code.ViewHelper = (function() {

  function ViewHelper(_arg) {
    this.el = _arg.el, this.completeLevel = _arg.completeLevel;
  }

  ViewHelper.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  ViewHelper.prototype.initLevel = function(level) {
    var _this = this;
    this.level = level;
    this.initChallenge();
    this.initDescription();
    this.initHints();
    this.initTests();
    this.initEditors();
    this.setOutput();
    this.allTestsPassed = false;
    window.retest = function() {
      return _this.test();
    };
    return this.errors = [];
  };

  ViewHelper.prototype.initEditors = function() {
    var editor, _fn, _i, _len, _ref,
      _this = this;
    this.editors = [];
    _ref = this.level.editors;
    _fn = function(editor) {
      var aceEditor, editorContainer;
      editorContainer = $(document.createElement('DIV'));
      editorContainer.addClass('editor_container');
      editorContainer.html("<div class='editor_header'>\n    <div class='type'>" + editor.type + "</div>\n    <div class='title'>" + editor.title + "</div>\n</div>\n<div class='editor'></div>");
      _this.$('.editors').append(editorContainer);
      editorContainer.find('.editor_header').bind('click', function() {
        return _this.selectEditor(editor);
      });
      editor.container = editorContainer;
      aceEditor = ace.edit(editorContainer.find('.editor')[0]);
      aceEditor.getSession().setMode("ace/mode/" + editor.type);
      aceEditor.setValue(editor.code);
      aceEditor.clearSelection();
      aceEditor.getSession().on('change', function(e) {
        _this.setOutput();
        return _this.test();
      });
      return editor.aceEditor = aceEditor;
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editor = _ref[_i];
      _fn(editor);
    }
    return this.selectEditor(this.level.editors[0]);
  };

  ViewHelper.prototype.selectEditor = function(editor) {
    var editorContainer, _i, _len, _ref, _results;
    _ref = this.$('.editor_container');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editorContainer = _ref[_i];
      editorContainer = $(editorContainer);
      editorContainer.removeClass('selected');
      if (editorContainer.find('.title').html() === editor.container.find('.title').html()) {
        _results.push(editor.container.addClass('selected'));
      } else {
        _results.push(this.$('.editors').prepend(editorContainer));
      }
    }
    return _results;
  };

  ViewHelper.prototype.initChallenge = function() {
    return this.$('.challenge .text').html("<b>The Challenge</b>: " + this.level.challenge);
  };

  ViewHelper.prototype.initSection = function(className) {
    var content, height, link;
    link = this.$(".links ." + className);
    content = this.$("div." + className);
    height = content.height();
    content.css({
      height: 0,
      display: 'none'
    });
    return link.bind('click', function() {
      if (content.css('display') === 'block') {
        return;
      }
      content.css({
        display: 'block'
      });
      link.addClass('selected');
      return content.animate({
        height: height,
        duration: 250,
        complete: function() {
          $(document.body).one('mouseup', function() {
            link.removeClass('selected');
            return content.animate({
              height: 0,
              duration: 250,
              complete: function() {
                return content.css({
                  display: 'none'
                });
              }
            });
          });
          return content.bind('mouseup', function(e) {
            return e.stop();
          });
        }
      });
    });
  };

  ViewHelper.prototype.initDescription = function() {
    this.$('div.description .inside').html(this.level.description);
    return this.initSection('description');
  };

  ViewHelper.prototype.initHints = function() {
    var hint, index, _fn, _i, _len, _ref;
    _ref = this.level.hints;
    _fn = function(hint) {
      var hintElement;
      hintElement = $(document.createElement('DIV'));
      hintElement.addClass('hint');
      hintElement.html("<a class='reveal'>Reveal Hint " + (index + 1) + "</a>\n<p class='hint_content'>" + hint + "</p>");
      this.$('div.hints .inside').append(hintElement);
      return hintElement.find('.reveal').bind('click', function() {
        return hintElement.find('.hint_content').animate({
          opacity: 1,
          duration: 500
        });
      });
    };
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      hint = _ref[index];
      _fn(hint);
    }
    return this.initSection('hints');
  };

  ViewHelper.prototype.initTests = function() {
    var testArea, testInfo, tests, _fn, _i, _len, _ref,
      _this = this;
    testArea = this.$('.test_area');
    tests = testArea.find('.tests');
    testArea.css({
      top: this.$('.output').offset().top - this.el.offset().top
    });
    _ref = this.level.tests;
    _fn = function(testInfo) {
      return tests.append("<p class='test wrong'>" + testInfo.description + "</p>");
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      testInfo = _ref[_i];
      _fn(testInfo);
    }
    return setTimeout((function() {
      _this.testHeight = tests.height();
      testArea.find('.run_tests').bind('click', function() {
        if (_this.$('.test_area .tests').height() > 0) {
          return _this.hideTests();
        } else {
          return _this.showTests();
        }
      });
      testArea.find('.rerun_tests').bind('click', function() {
        return _this.test(true);
      });
      return _this.hideTests();
    }), 1000);
  };

  ViewHelper.prototype.showTests = function(callback) {
    var testArea, tests,
      _this = this;
    testArea = this.$('.test_area');
    tests = testArea.find('.tests');
    if (tests.height() === this.testHeight) {
      if (callback) {
        return callback();
      }
    } else {
      return tests.animate({
        height: this.testHeight,
        duration: 500,
        complete: function() {
          if (callback) {
            callback();
          }
          _this.test(true);
          testArea.find('.run_tests').html('Hide Tests');
          return testArea.find('.rerun_tests').show();
        }
      });
    }
  };

  ViewHelper.prototype.hideTests = function() {
    var testArea,
      _this = this;
    testArea = this.$('.test_area');
    return testArea.find('.tests').animate({
      height: 0,
      duration: 500,
      complete: function() {
        testArea.find('.run_tests').html('Run Tests');
        return testArea.find('.rerun_tests').hide();
      }
    });
  };

  ViewHelper.prototype.showError = function(msg, line) {
    var error,
      _this = this;
    error = this.$('.error');
    error.html("<p>There is an error in your code on line " + line + ":<br/><br/>" + msg + "</p>");
    if (!this.showingError) {
      return this.showingError = setTimeout((function() {
        var elOffset, frameOffset, height;
        elOffset = _this.el.offset();
        frameOffset = _this.$('.output').offset();
        height = error.height();
        if (error.css('top') > -1000) {
          return;
        }
        error.css({
          top: frameOffset.top - elOffset.top,
          left: frameOffset.left - elOffset.left + 72,
          height: 0
        });
        return error.animate({
          height: height,
          duration: 500
        });
      }), 500);
    }
  };

  ViewHelper.prototype.hideError = function() {
    var error,
      _this = this;
    if (this.showingError) {
      clearTimeout(this.showingError);
      this.showingError = null;
    }
    error = this.$('.error');
    return error.animate({
      height: 0,
      duration: 500,
      complete: function() {
        return error.css({
          top: -1000,
          left: -1000,
          height: 'auto'
        });
      }
    });
  };

  ViewHelper.prototype.setOutput = function() {
    var baseHTML, editor, frameDoc, script, style, _i, _len, _ref,
      _this = this;
    if (this.errorShown) {
      setTimeout((function() {
        if (!_this.errorShown) {
          return _this.hideError();
        }
      }), 50);
    }
    this.errorShown = false;
    frameDoc = this.$('.output')[0].contentWindow.document;
    frameDoc.open();
    baseHTML = ((function() {
      var _i, _len, _ref, _results;
      _ref = this.level.editors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        editor = _ref[_i];
        if (editor.type === 'html') {
          _results.push(editor);
        }
      }
      return _results;
    }).call(this))[0].aceEditor.getValue();
    script = '<script type=\'text/javascript\' charset=\'utf8\'>\n    window.onerror = function(msg, url, line) {\n        window.top.sendError(msg, url, line);\n    }\n</script>        ';
    if (baseHTML.indexOf('<head>') > -1) {
      baseHTML = baseHTML.replace(/\<head\>/i, "<head>" + script);
    } else {
      baseHTML = baseHTML.replace(/\<html\>/i, "<html><head>" + script + "</head>");
    }
    frameDoc.write(baseHTML);
    _ref = this.level.editors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editor = _ref[_i];
      if (editor.type === 'javascript') {
        script = $(document.createElement('SCRIPT'));
        script.attr('type', 'text/javascript');
        script.html(editor.aceEditor.getValue());
        $(frameDoc.head).append(script);
      }
      if (editor.type === 'css') {
        style = $(document.createElement('STYLE'));
        style.attr('type', 'text/css');
        style.attr('rel', 'stylesheet');
        style.html(editor.aceEditor.getValue());
        $(frameDoc.head).append(style);
      }
    }
    frameDoc.close();
    return window.sendError = function(msg, url, line) {
      _this.errorShown = true;
      return _this.showError(msg, line);
    };
  };

  ViewHelper.prototype.test = function(userSubmitted) {
    var allTestsPassed, cleanHtml, frame, frameBody, frameDoc, frameWindow, success, testElement, testInfo, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    if (userSubmitted == null) {
      userSubmitted = false;
    }
    if (this.allTestsPassed) {
      return;
    }
    frame = this.$('.output')[0];
    frameWindow = frame.contentWindow;
    frameDoc = frameWindow.document;
    frameBody = $(frameDoc.body);
    cleanHtml = function(html) {
      return html.replace(/^\s*/, '').replace(/\s*$/, '').replace(/\s*\n\s*/, ' ').toLowerCase();
    };
    allTestsPassed = true;
    _ref = this.level.tests;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      testInfo = _ref[_i];
      _ref1 = this.$('.tests .test');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        testElement = _ref1[_j];
        if (!($(testElement).html() === testInfo.description)) {
          continue;
        }
        success = testInfo.test({
          frameWindow: frame.contentWindow,
          frameBody: frameBody,
          cleanHtml: cleanHtml,
          userSubmitted: userSubmitted
        });
        if (success) {
          $(testElement).removeClass('wrong');
          $(testElement).addClass('correct');
        } else {
          allTestsPassed = false;
          $(testElement).removeClass('correct');
          $(testElement).addClass('wrong');
        }
      }
    }
    if (allTestsPassed) {
      this.allTestsPassed = true;
      return this.showTests(function() {
        return _this.completeLevel();
      });
    }
  };

  return ViewHelper;

})();
