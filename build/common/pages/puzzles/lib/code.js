// Generated by CoffeeScript 1.3.3
var code;

code = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/code', {});

code.ViewHelper = (function() {

  function ViewHelper(_arg) {
    this.el = _arg.el;
    this.initEditors();
    this.initDescription();
    this.initHints();
    this.initTests();
    this.setOutput();
  }

  ViewHelper.prototype.$ = function(selector) {
    return this.el.find(selector);
  };

  ViewHelper.prototype.initEditors = function() {
    var container, editor, editorContainer, type, _i, _len, _ref, _results,
      _this = this;
    this.editors = [];
    _ref = this.$('.editors .editor_container');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      container = _ref[_i];
      editorContainer = $(container);
      editor = ace.edit(editorContainer.find('.editor')[0]);
      type = editorContainer.find('.type').html();
      editor.getSession().setMode("ace/mode/" + type);
      editor.getSession().on('change', function(e) {
        return _this.setOutput();
      });
      _results.push(this.editors.push(editor));
    }
    return _results;
  };

  ViewHelper.prototype.initSection = function(className) {
    var content, height, link;
    link = this.$(".links ." + className);
    content = this.$("div." + className);
    height = content.height();
    content.css({
      height: 0,
      display: 'none'
    });
    return link.bind('click', function() {
      if (content.css('display') === 'block') {
        return;
      }
      content.css({
        display: 'block'
      });
      link.addClass('selected');
      return content.animate({
        height: height,
        duration: 250,
        complete: function() {
          $(document.body).one('click', function() {
            link.removeClass('selected');
            return content.animate({
              height: 0,
              duration: 250,
              complete: function() {
                return content.css({
                  display: 'none'
                });
              }
            });
          });
          return content.bind('click', function(e) {
            return e.stop();
          });
        }
      });
    });
  };

  ViewHelper.prototype.initDescription = function() {
    return this.initSection('description');
  };

  ViewHelper.prototype.initHints = function() {
    var hint, _i, _len, _ref, _results;
    this.tests = {};
    this.initSection('hints');
    _ref = this.$('.hints .hint');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      hint = _ref[_i];
      _results.push((function(hint) {
        return $(hint).find('.reveal').bind('click', function() {
          return $(hint).find('.hint_content').animate({
            opacity: 1,
            duration: 500
          });
        });
      })(hint));
    }
    return _results;
  };

  ViewHelper.prototype.initTests = function() {
    var find, test, _i, _len, _ref, _results,
      _this = this;
    this.initSection('tests');
    find = function(selector) {
      var iframe, iframeDoc;
      iframe = _this.$('.output')[0];
      iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
      return $(iframeDoc.body).find(selector);
    };
    _ref = this.$('.tests .test');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      test = _ref[_i];
      _results.push((function(test) {
        return _this.tests[$(test).html()] = function() {
          try {
            return eval(unescape($(test).data('test')));
          } catch (e) {
            return alert("A test failed to run: " + e.message);
          }
        };
      })(test));
    }
    return _results;
  };

  ViewHelper.prototype.setOutput = function() {
    var editor, html, test, testElement, _i, _len, _ref, _ref1, _results;
    _ref = this.editors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editor = _ref[_i];
      $(this.$('.output')[0].contentDocument.documentElement).html(editor.getValue());
    }
    _ref1 = this.tests;
    _results = [];
    for (html in _ref1) {
      test = _ref1[html];
      _results.push((function() {
        var _j, _len1, _ref2, _results1;
        _ref2 = this.$('.tests .test');
        _results1 = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          testElement = _ref2[_j];
          if ($(testElement).html() === html) {
            if (test()) {
              $(testElement).removeClass('wrong');
              _results1.push($(testElement).addClass('correct'));
            } else {
              $(testElement).removeClass('correct');
              _results1.push($(testElement).addClass('wrong'));
            }
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return ViewHelper;

})();
