// Generated by CoffeeScript 1.3.3
var equation;

equation = typeof exports !== "undefined" && exports !== null ? exports : provide('./equation', {});

equation.Equation = (function() {

  Equation.prototype.defaultText = 'Drop Equation Fragment Here';

  function Equation(_arg) {
    this.gameArea = _arg.gameArea, this.id = _arg.id;
    this.dropAreas = [];
    this.el = $(document.createElement('DIV'));
    this.el.addClass('equation');
    this.el.attr('id', this.id);
    this.el.html(this.defaultText);
    this.initHover();
  }

  Equation.prototype.initHover = function() {
    var _this = this;
    this.el.bind('mouseover.fragment', function() {});
    return this.el.bind('mouseout.fragment', function() {});
  };

  Equation.prototype.appendTo = function(container) {
    container.append(this.el);
    return this.addDropArea();
  };

  Equation.prototype.addDropArea = function(dropAreaElement, parent, hiddenIndex) {
    var dropArea, gameAreaOffset, hiddenWidth, offset,
      _this = this;
    if (dropAreaElement == null) {
      dropAreaElement = this.el;
    }
    if (parent == null) {
      parent = null;
    }
    if (hiddenIndex == null) {
      hiddenIndex = 0;
    }
    hiddenWidth = 30;
    offset = dropAreaElement.offset();
    gameAreaOffset = this.gameArea.offset();
    dropArea = {
      id: dropAreaElement.attr('id'),
      top: offset.top - gameAreaOffset.top,
      left: offset.left - gameAreaOffset.left + (hiddenIndex * hiddenWidth),
      bottom: offset.top + offset.height - gameAreaOffset.top,
      right: offset.left + (offset.width || hiddenWidth) - gameAreaOffset.left + (hiddenIndex * hiddenWidth),
      width: offset.width || hiddenWidth,
      height: offset.height,
      element: dropAreaElement,
      childAreas: []
    };
    dropArea.highlight = function(readyToDrop) {
      return _this.highlightDropArea(dropArea, readyToDrop);
    };
    dropArea.format = function(component) {
      return _this.formatDropArea(dropArea, component);
    };
    this.dropAreas.push(dropArea);
    return this.setParentChildDropAreas(dropArea, parent);
  };

  Equation.prototype.setParentChildDropAreas = function(dropArea, parent) {
    if (!(dropArea && parent)) {
      return;
    }
    parent.childAreas.push(dropArea);
    return dropArea.parentArea = parent;
  };

  Equation.prototype.highlightDropArea = function(dropArea, readyToDrop) {
    var da, _i, _len, _ref, _results;
    if (dropArea.childAreas.length) {
      _ref = dropArea.childAreas;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        da = _ref[_i];
        _results.push(this.highlightDropArea(da));
      }
      return _results;
    } else {
      if (!dropArea.element.width()) {
        dropArea.element.width(dropArea.width);
      }
      if (readyToDrop) {
        dropArea.element.addClass('component_over');
        return true;
      } else {
        return dropArea.element.addClass('accept_component');
      }
    }
  };

  Equation.prototype.formatDropArea = function(dropArea, component) {
    var acceptFragment, fragment, index, _i, _len, _ref, _results;
    fragment = component.equationFragment;
    dropArea.element.html("<div class='accept_fragment'></div>\n<div class='fragment'>" + fragment + "</div>\n<div class='accept_fragment'></div>");
    _ref = dropArea.element.find('.accept_fragment');
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      acceptFragment = _ref[index];
      _results.push(this.addDropArea($(acceptFragment), dropArea, index));
    }
    return _results;
  };

  return Equation;

})();
