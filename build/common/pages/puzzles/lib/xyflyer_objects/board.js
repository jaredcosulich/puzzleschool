// Generated by CoffeeScript 1.3.3
var board, xyflyerObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

board = typeof exports !== "undefined" && exports !== null ? exports : provide('./board', {});

xyflyerObject = require('./object');

board.Board = (function(_super) {

  __extends(Board, _super);

  Board.prototype.maxUnits = 10;

  function Board(_arg) {
    var boardElement;
    boardElement = _arg.boardElement, this.grid = _arg.grid, this.objects = _arg.objects;
    this.formulas = {};
    this.rings = [];
    this.ringFronts = [];
    this.init(boardElement);
  }

  Board.prototype.init = function(boardElement) {
    var dimensions, maxDimension;
    dimensions = boardElement.offset();
    this.paper = Raphael(dimensions.left, dimensions.top, dimensions.width, dimensions.height);
    this.width = dimensions.width;
    this.height = dimensions.height;
    this.xUnit = this.width / (this.grid.xMax - this.grid.xMin);
    this.yUnit = this.height / (this.grid.yMax - this.grid.yMin);
    this.xAxis = this.width - (this.grid.xMax * this.xUnit);
    this.yAxis = this.height + (this.grid.yMin * this.yUnit);
    maxDimension = Math.max(this.grid.xMax - this.grid.xMin, this.grid.yMax - this.grid.yMin);
    this.scale = 1 / (Math.log(Math.sqrt(maxDimension)) - 0.5);
    this.addIsland();
    this.drawGrid();
    return this.initClicks(boardElement);
  };

  Board.prototype.addImage = function(image, x, y) {
    var height, width;
    width = image.width() * this.scale;
    height = image.height() * this.scale;
    return this.paper.image(image.attr('src'), x, y, width, height);
  };

  Board.prototype.addIsland = function() {
    var height, island, width,
      _this = this;
    island = this.objects.find('.island img');
    width = island.width() * this.scale;
    height = island.height() * this.scale;
    if (!width || !height) {
      $.timeout(100, function() {
        return _this.addIsland();
      });
      return;
    }
    return this.addImage(island, this.xAxis - (width / 2), this.yAxis);
  };

  Board.prototype.addRing = function(ring) {
    var back, front, ringSet;
    front = this.paper.path(ring.frontDescription);
    front.toFront();
    back = this.paper.path(ring.backDescription);
    back.toBack();
    ringSet = this.paper.set();
    ringSet.push(front, back);
    this.ringFronts.push(front);
    this.rings.push(ringSet);
    return ringSet;
  };

  Board.prototype.setRingFronts = function() {
    var ringFront, _i, _len, _ref, _results;
    _ref = this.ringFronts;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ringFront = _ref[_i];
      _results.push(ringFront.toFront());
    }
    return _results;
  };

  Board.prototype.addPlane = function(plane) {
    this.plane = plane;
    return this.paper.path(this.plane.description);
  };

  Board.prototype.initClicks = function(boardElement) {
    var _this = this;
    boardElement.css({
      zIndex: 9999
    });
    return boardElement.bind('click', function(e) {
      var formula1, onPath, result, y;
      result = _this.findNearestXOnPath(e.offsetX, e.offsetY);
      onPath = result.x;
      if (result.formulas.length) {
        formula1 = result.formulas[0];
        y = _this.screenY(formula1.formula(_this.paperX(result.x)));
        return _this.showXY(result.x, y, true);
      } else {
        return _this.showXY(e.offsetX, e.offsetY);
      }
    });
  };

  Board.prototype.findNearestXOnPath = function(x, y, formulas, precision) {
    var avgDistance, d, distance, distance2Y, distanceY, distances, dx, factor, formula, formula2, formula2Y, formulaY, goodFormulas, id, index, index2, intersectionDistance, result, side, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1;
    if (formulas == null) {
      formulas = this.formulas;
    }
    if (precision == null) {
      precision = 0;
    }
    distances = {};
    factor = Math.pow(10, precision);
    distance = 0.5 / factor;
    result = {
      formulas: [],
      distance: distance * factor,
      x: x
    };
    for (d = _i = 0, _ref = distance / 10; 0 <= distance ? _i <= distance : _i >= distance; d = _i += _ref) {
      _ref1 = [-1, 1];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        side = _ref1[_j];
        if (side === -1 && !d) {
          continue;
        }
        dx = side * d;
        goodFormulas = [];
        for (id in formulas) {
          formula = formulas[id];
          formulaY = formula.formula(this.paperX(x) + dx);
          distanceY = Math.abs(this.paperY(y) - formulaY);
          if (distanceY <= (distance * factor)) {
            goodFormulas.push(formula);
            if (!result.intersectionDistance && distanceY < result.distance) {
              result.distance = distanceY;
              result.x = this.screenX(this.paperX(x) + dx);
              result.formulas = [formula];
            }
          }
        }
        intersectionDistance = -1;
        for (index = _k = 0, _len1 = goodFormulas.length; _k < _len1; index = ++_k) {
          formula = goodFormulas[index];
          formulaY = formula.formula(this.paperX(x) + dx);
          index2 = 0;
          avgDistance = -1;
          for (_l = 0, _len2 = goodFormulas.length; _l < _len2; _l++) {
            formula2 = goodFormulas[_l];
            if (formula === formula2) {
              continue;
            }
            formula2Y = formula2.formula(this.paperX(x) + dx);
            distance2Y = Math.abs(formulaY - formula2Y);
            avgDistance = ((avgDistance * index2) + distance2Y) / (index2 + 1);
            index2 += 1;
          }
          intersectionDistance = ((intersectionDistance * index) + avgDistance) / (index + 1);
        }
        if (-1 < intersectionDistance && (!result.intersectionDistance || result.intersectionDistance > intersectionDistance)) {
          result.intersectionDistance = intersectionDistance;
          result.x = this.screenX(this.paperX(x) + dx);
          result.formulas = goodFormulas;
        }
      }
    }
    if (precision < 4) {
      result.x = this.findNearestXOnPath(result.x, y, formulas, precision + 1).x;
    }
    return result;
  };

  Board.prototype.paperX = function(x, precision) {
    if (precision == null) {
      precision = 3;
    }
    return Math.round(Math.pow(10, precision) * (x - this.xAxis) / this.xUnit) / Math.pow(10, precision);
  };

  Board.prototype.paperY = function(y, precision) {
    if (precision == null) {
      precision = 3;
    }
    return Math.round(Math.pow(10, precision) * (this.height - y - this.yAxis) / this.yUnit) / Math.pow(10, precision);
  };

  Board.prototype.screenX = function(x) {
    return (x * this.xUnit) + this.xAxis;
  };

  Board.prototype.screenY = function(y) {
    return -1 * ((y * this.yUnit) + this.xAxis - this.height);
  };

  Board.prototype.showXY = function(x, y, onPath) {
    var dot, height, paperX, paperY, radius, text, width, xyTip,
      _this = this;
    if (onPath == null) {
      onPath = false;
    }
    width = 75;
    height = 24;
    radius = 3;
    dot = this.paper.circle(x, y, 0);
    dot.attr({
      opacity: 0
    });
    dot.animate({
      r: radius,
      opacity: 1
    }, 100);
    xyTip = this.paper.rect(x + (width / 2) + (radius * 2), y, 0, 0, 6);
    xyTip.attr({
      fill: '#FFF',
      opacity: 0
    });
    paperX = this.paperX(x);
    paperY = this.paperY(y);
    text = this.paper.text(x + (width / 2) + (radius * 2), y, "" + paperX + ", " + paperY);
    text.attr({
      opacity: 0
    });
    xyTip.animate({
      width: width,
      height: height,
      x: x + (radius * 2),
      y: y - (height / 2)
    }, 100);
    xyTip.animate({
      opacity: 1
    }, 250);
    text.animate({
      opacity: 1
    }, 250);
    return $.timeout(2000, function() {
      var removeTip;
      xyTip.animate({
        opacity: 0
      }, 100);
      text.animate({
        opacity: 0
      }, 100);
      removeTip = function() {
        xyTip.remove();
        text.remove();
        return dot.remove();
      };
      xyTip.animate({
        width: 0,
        height: 0,
        x: x + (radius * 2),
        y: y
      }, 250);
      return dot.animate({
        r: 0,
        opacity: 0
      }, 250, null, removeTip);
    });
  };

  Board.prototype.drawGrid = function() {
    var grid, gridString, increment, mark, multiple, start, stroke, text, xUnits, yUnits, _i, _j, _ref;
    gridString = "M" + this.xAxis + ",0\nL" + this.xAxis + "," + this.height + "\nM0," + this.yAxis + "\nL" + this.width + "," + this.yAxis;
    stroke = 'rgba(255,255,255,0.4)';
    xUnits = this.width / this.xUnit;
    if (xUnits < this.maxUnits) {
      xUnits = this.maxUnits;
    }
    multiple = Math.floor(xUnits / this.maxUnits);
    increment = this.xUnit * multiple;
    start = 0 - (multiple > this.grid.xMin ? (this.grid.xMin * this.xUnit) % increment : increment % (this.grid.xMin * this.xUnit));
    for (mark = _i = start, _ref = this.width; start <= _ref ? _i <= _ref : _i >= _ref; mark = _i += increment) {
      gridString += "M" + mark + "," + (this.yAxis + 10);
      gridString += "L" + mark + "," + (this.yAxis - 10);
      if (!(mark > this.width)) {
        text = this.paper.text(mark + 6, this.yAxis - 6, Math.round(this.grid.xMin + (mark / this.xUnit)));
        text.attr({
          stroke: stroke,
          fill: stroke
        });
      }
    }
    yUnits = this.height / this.yUnit;
    if (yUnits < this.maxUnits) {
      yUnits = this.maxUnits;
    }
    multiple = Math.floor(yUnits / this.maxUnits);
    increment = (this.yUnit * multiple) * -1;
    start = this.height - (multiple > this.grid.yMin ? increment % (this.grid.yMin * this.yUnit) : (this.grid.yMin * this.yUnit) % increment);
    for (mark = _j = start; start <= 0 ? _j <= 0 : _j >= 0; mark = _j += increment) {
      gridString += "M" + (this.xAxis + 10) + "," + mark;
      gridString += "L" + (this.xAxis - 10) + "," + mark;
      if (!(mark > this.height)) {
        text = this.paper.text(this.xAxis + 6, mark - 6, Math.round(this.grid.yMax - (mark / this.yUnit)));
        text.attr({
          stroke: stroke,
          fill: stroke
        });
      }
    }
    grid = this.paper.path(gridString);
    return grid.attr({
      stroke: stroke
    });
  };

  Board.prototype.plot = function(id, formula, area) {
    var brokenLine, infiniteLine, lastSlope, lastYPos, line, pathString, slope, xPos, yPos, _i, _ref, _ref1;
    if (this.formulas[id]) {
      this.formulas[id].line.remove();
    }
    if (!formula) {
      return;
    }
    this.formulas[id] = {
      formula: formula,
      area: area
    };
    this.plane.reset();
    brokenLine = 0;
    infiniteLine = 0;
    pathString = "M0," + this.height;
    for (xPos = _i = _ref = this.grid.xMin * this.xUnit, _ref1 = this.grid.xMax * this.xUnit; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; xPos = _ref <= _ref1 ? ++_i : --_i) {
      lastYPos = yPos;
      yPos = formula(xPos / this.xUnit) * this.yUnit;
      if (yPos === Number.NEGATIVE_INFINITY) {
        yPos = this.grid.yMin * this.xUnit;
        brokenLine += 1;
      } else if (yPos === Number.POSITIVE_INFINITY) {
        yPos = this.grid.yMax * this.xUnit;
        brokenLine += 1;
      }
      if (lastYPos) {
        lastSlope = slope;
        slope = yPos - lastYPos;
        if (lastSlope && Math.abs(lastSlope - slope) > Math.abs(lastSlope) && Math.abs(lastYPos - yPos) > Math.abs(lastYPos)) {
          pathString += "L" + (xPos + this.xAxis + 1) + "," + (lastSlope > 0 ? 0 : this.height);
          pathString += "M" + (xPos + this.xAxis + 1) + "," + (lastSlope > 0 ? this.height : 0);
          brokenLine += 1;
        }
      }
      if (brokenLine > 0) {
        pathString += "M" + (xPos + this.xAxis) + "," + (this.yAxis - yPos);
        brokenLine -= 1;
      } else {
        pathString += "L" + (xPos + this.xAxis) + "," + (this.yAxis - yPos);
      }
    }
    line = this.paper.path(pathString);
    line.attr({
      stroke: 'rgba(0,0,0,0.1)',
      'stroke-width': 2
    });
    this.formulas[id].line = line;
    this.plane.reset();
    return this.setRingFronts();
  };

  Board.prototype.calculatePath = function(increment) {
    var id, lastFormula, path, xPos, _i, _ref, _ref1;
    path = {};
    for (xPos = _i = _ref = this.grid.xMin * this.xUnit, _ref1 = this.grid.xMax * this.xUnit; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; xPos = _i += increment) {
      if (lastFormula && lastFormula.area(xPos / this.xUnit)) {
        path[xPos] = lastFormula.formula(xPos / this.xUnit) * this.yUnit;
        continue;
      }
      for (id in this.formulas) {
        if (!this.formulas[id].area(xPos / this.xUnit)) {
          continue;
        }
        path[xPos] = this.formulas[id].formula(xPos / this.xUnit) * this.yUnit;
        lastFormula = this.formulas[id];
        break;
      }
    }
    return path;
  };

  return Board;

})(xyflyerObject.Object);
