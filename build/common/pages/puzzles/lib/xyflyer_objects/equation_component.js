// Generated by CoffeeScript 1.3.3
var equationComponent,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

equationComponent = typeof exports !== "undefined" && exports !== null ? exports : provide('./equation_component', {});

equationComponent.EquationComponent = (function() {

  function EquationComponent(_arg) {
    this.gameArea = _arg.gameArea, this.equationFragment = _arg.equationFragment, this.equationAreas = _arg.equationAreas, this.trackDrag = _arg.trackDrag, this.endDrag = _arg.endDrag;
    this.clientY = __bind(this.clientY, this);

    this.clientX = __bind(this.clientX, this);

    this.equationAreas || (this.equationAreas = []);
    this.initElement();
    this.initMove();
  }

  EquationComponent.prototype.clientX = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientX || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageX : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageX : void 0 : void 0)) - this.gameArea.offset().left;
  };

  EquationComponent.prototype.clientY = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientY || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageY : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageY : void 0 : void 0)) - this.gameArea.offset().top;
  };

  EquationComponent.prototype.width = function() {
    return this.element.width();
  };

  EquationComponent.prototype.height = function() {
    return this.element.height();
  };

  EquationComponent.prototype.initElement = function() {
    this.element = $(document.createElement('DIV'));
    this.element.addClass('equation_component');
    this.element.addClass(this.equationAreas.join(' '));
    return this.element.html(this.equationFragment);
  };

  EquationComponent.prototype.initMove = function() {
    var mousedown,
      _this = this;
    mousedown = function(e) {
      var body, endMove, move;
      _this.gameArea.addClass('dragging');
      body = $(document.body);
      move = function(e) {
        var left, top;
        if (e.preventDefault) {
          e.preventDefault();
        }
        left = _this.clientX(e) - (_this.element.width() / 2);
        top = _this.clientY(e) - (_this.element.height() / 2);
        _this.element.css({
          position: 'absolute',
          left: left,
          top: top
        });
        if (_this.trackDrag) {
          return _this.trackDrag(left, top, _this);
        }
      };
      body.bind('mousemove.move touchmove.move', function(e) {
        return move(e);
      });
      endMove = function(e) {
        _this.element.css({
          position: 'static',
          top: 'auto',
          left: 'auto'
        });
        _this.gameArea.removeClass('dragging');
        _this.endDrag(_this);
        return body.unbind('mousemove.move touchmove.move');
      };
      return body.one('mouseup.move touchend.move', function(e) {
        return endMove(e);
      });
    };
    return this.element.bind('mousedown.move touchstart.move', function(e) {
      return mousedown(e);
    });
  };

  return EquationComponent;

})();
