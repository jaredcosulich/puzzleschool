// Generated by CoffeeScript 1.3.3
var Transformer, equationComponent,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

equationComponent = typeof exports !== "undefined" && exports !== null ? exports : provide('./equation_component', {});

Transformer = require('./transformer').Transformer;

equationComponent.EquationComponent = (function() {

  function EquationComponent(_arg) {
    this.gameArea = _arg.gameArea, this.equationFragment = _arg.equationFragment, this.trackDrag = _arg.trackDrag, this.endDrag = _arg.endDrag;
    this.clientY = __bind(this.clientY, this);

    this.clientX = __bind(this.clientX, this);

    this.initElement();
    this.initMove();
    this.inUse = false;
  }

  EquationComponent.prototype.clientX = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientX || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageX : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageX : void 0 : void 0)) - this.gameArea.offset().left;
  };

  EquationComponent.prototype.clientY = function(e) {
    var _ref, _ref1, _ref2, _ref3;
    return (e.clientY || ((_ref = e.targetTouches) != null ? (_ref1 = _ref[0]) != null ? _ref1.pageY : void 0 : void 0) || ((_ref2 = e.touches) != null ? (_ref3 = _ref2[0]) != null ? _ref3.pageY : void 0 : void 0)) - this.gameArea.offset().top;
  };

  EquationComponent.prototype.top = function() {
    return this.element.offset().top;
  };

  EquationComponent.prototype.left = function() {
    return this.element.offset().left;
  };

  EquationComponent.prototype.width = function() {
    return this.element.width();
  };

  EquationComponent.prototype.height = function() {
    return this.element.height();
  };

  EquationComponent.prototype.initElement = function() {
    this.element = $(document.createElement('DIV'));
    this.element.addClass('equation_component');
    this.element.html(this.equationFragment);
    this.placeHolder = $(document.createElement('DIV'));
    this.placeHolder.addClass('place_holder');
    this.placeHolder.hide();
    return this.transformer = new Transformer(this.element);
  };

  EquationComponent.prototype.initMove = function() {
    var _this = this;
    return this.element.bind('mousedown.drag touchstart.drag', function(e) {
      return _this.mousedown(e);
    });
  };

  EquationComponent.prototype.appendTo = function(container) {
    this.container = container;
    this.container.append(this.placeHolder);
    return this.container.append(this.element);
  };

  EquationComponent.prototype.initMeasurements = function() {
    if (this.offset) {
      return;
    }
    this.offset = this.element.offset();
    this.gameAreaOffset = this.gameArea.offset();
    return this.placeHolder.css({
      position: 'absolute',
      top: this.offset.top - this.container.offset().top,
      left: this.offset.left - this.container.offset().left
    });
  };

  EquationComponent.prototype.mousedown = function(e) {
    var body,
      _this = this;
    if (e.preventDefault) {
      e.preventDefault();
    }
    this.initMeasurements();
    this.gameArea.addClass('dragging');
    body = $(document.body);
    body.bind('mousemove.drag touchmove.drag', function(e) {
      return _this.move(e);
    });
    body.one('mouseup.drag touchend.drag', function(e) {
      return _this.endMove(e);
    });
    this.element.css({
      visibility: 'visible'
    });
    this.setDragging();
    return this.move(e);
  };

  EquationComponent.prototype.setDragging = function() {
    this.element.addClass('dragging');
    this.placeHolder.show();
    return this.placeHolder.html(this.element.html());
  };

  EquationComponent.prototype.move = function(e) {
    var dx, dy, offset, x, y;
    if (e.preventDefault) {
      e.preventDefault();
    }
    x = this.clientX(e);
    y = this.clientY(e);
    if (e.type === 'touchmove') {
      y -= 30;
    }
    offset = this.element.offset();
    dx = x - offset.left - (offset.width / 2) + this.gameAreaOffset.left;
    dy = y - offset.top - (offset.height / 2) + this.gameAreaOffset.top;
    this.transformer.translate(dx, dy);
    if (this.trackDrag) {
      return this.trackDrag(x, y, this);
    }
  };

  EquationComponent.prototype.endMove = function(e) {
    if (!this.element.hasClass('dragging')) {
      return;
    }
    this.element.removeClass('dragging');
    this.gameArea.removeClass('dragging');
    if (this.endDrag(this)) {
      this.element.css({
        visibility: 'hidden'
      });
      this.placeHolder.show();
      this.inUse = true;
    } else {
      this.reset();
    }
    this.transformer.translate(0, 0);
    return $(document.body).unbind('mousemove.drag touchmove.drag');
  };

  EquationComponent.prototype.reset = function() {
    this.element.css({
      visibility: 'visible'
    });
    this.placeHolder.hide();
    return this.inUse = false;
  };

  return EquationComponent;

})();
