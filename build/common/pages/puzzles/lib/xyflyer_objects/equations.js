// Generated by CoffeeScript 1.3.3
var Equation, EquationComponent, equations;

equations = typeof exports !== "undefined" && exports !== null ? exports : provide('./equations', {});

Equation = require('./equation').Equation;

EquationComponent = require('./equation_component').EquationComponent;

equations.Equations = (function() {

  function Equations(_arg) {
    var submit,
      _this = this;
    this.el = _arg.el, this.gameArea = _arg.gameArea, this.plot = _arg.plot, submit = _arg.submit;
    this.equationsArea = this.$('.equations');
    this.possibleFragments = this.$('.possible_fragments');
    this.equations = [];
    this.equationComponents = [];
    this.$('.launch').bind('click', function() {
      return submit();
    });
    this.initHints();
  }

  Equations.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  Equations.prototype.add = function(solution, startingFragment, solutionComponents, variables) {
    var equation, equationCount,
      _this = this;
    equationCount = this.equationsArea.find('.equation').length;
    equation = new Equation({
      id: "equation_" + (equationCount + 1),
      gameArea: this.gameArea,
      solution: solution,
      solutionComponents: solutionComponents,
      startingFragment: startingFragment,
      variables: variables,
      plot: function(eq) {
        return _this.plotFormula(eq);
      }
    });
    this.equations.push(equation);
    return equation.appendTo(this.equationsArea);
  };

  Equations.prototype.addComponent = function(equationFragment, equationAreas) {
    var equationComponent,
      _this = this;
    equationComponent = new EquationComponent({
      gameArea: this.gameArea,
      equationFragment: equationFragment,
      equationAreas: equationAreas,
      trackDrag: function(left, top, component) {
        return _this.trackComponentDragging(left, top, component);
      },
      endDrag: function(component) {
        return _this.endComponentDragging(component);
      }
    });
    equationComponent.appendTo(this.possibleFragments);
    return this.equationComponents.push(equationComponent);
  };

  Equations.prototype.trackComponentDragging = function(left, top, component) {
    var equation, x, y, _i, _len, _ref,
      _this = this;
    if (!this.el.hasClass('show_places')) {
      this.el.addClass('show_places');
    }
    x = left + (component.width() / 2);
    y = top + (component.height() / 2);
    this.selectedDropArea = null;
    _ref = this.equations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      equation = _ref[_i];
      this.selectedDropArea = equation.overlappingDropAreas({
        x: x,
        y: y,
        test: function(dropArea, over) {
          return dropArea != null ? dropArea.highlight(over) : void 0;
        }
      });
      if (this.selectedDropArea) {
        return;
      }
    }
  };

  Equations.prototype.clearDrag = function() {
    var equation, _i, _len, _ref, _results;
    this.el.removeClass('show_places');
    _ref = this.equations;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      equation = _ref[_i];
      _results.push(equation.clear());
    }
    return _results;
  };

  Equations.prototype.endComponentDragging = function(component) {
    this.clearDrag();
    if (!this.selectedDropArea) {
      return false;
    }
    this.selectedDropArea.accept(component);
    this.selectedDropArea = null;
    return true;
  };

  Equations.prototype.plotFormula = function(equation) {
    var formulaData;
    this.checkMultipleEquations();
    equation.el.removeClass('bad_formula');
    formulaData = equation.formulaData();
    if (!(this.plot(equation.id, formulaData) || !formulaData.length)) {
      return equation.el.addClass('bad_formula');
    }
  };

  Equations.prototype.checkMultipleEquations = function() {
    var equation, inUseEquations, _i, _j, _len, _len1, _ref, _ref1, _results;
    inUseEquations = 0;
    _ref = this.equations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      equation = _ref[_i];
      if (equation.el.html() !== equation.defaultText) {
        inUseEquations += 1;
        if (inUseEquations > 1) {
          break;
        }
      }
    }
    _ref1 = this.equations;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      equation = _ref1[_j];
      if (inUseEquations > 1) {
        _results.push(equation.showRange());
      } else {
        _results.push(equation.hideRange());
      }
    }
    return _results;
  };

  Equations.prototype.initHints = function() {
    var _this = this;
    return this.el.find('.hint').bind('click', function() {
      return _this.showHint();
    });
  };

  Equations.prototype.testFragment = function(fragment, solution, formula, complete) {
    var solutionIndex;
    solutionIndex = solution.indexOf(fragment);
    if (formula[solutionIndex - 1] !== solution[solutionIndex - 1]) {
      return false;
    }
    return (complete ? solutionIndex === formula.indexOf(fragment) : solutionIndex !== formula.indexOf(fragment));
  };

  Equations.prototype.displayHint = function(component, dropAreaElement, equation, solutionComponent) {
    var dragElement, dragThis, gameAreaOffset, left, offset, top,
      _this = this;
    gameAreaOffset = this.gameArea.offset();
    dragThis = this.$('.drag_this');
    if (component.top() === 0) {
      dragElement = component.dropArea.element;
    } else {
      dragElement = component.element;
    }
    offset = dragElement.offset();
    top = offset.top + offset.height - gameAreaOffset.top;
    left = offset.left + (offset.width / 2) - gameAreaOffset.left;
    dragThis.css({
      opacity: 0,
      top: top,
      left: left
    });
    return dragThis.animate({
      opacity: 1,
      duration: 250,
      complete: function() {
        return dragElement.one('mousedown.hint', function() {
          $(document.body).one('mouseup.hint', function() {
            $(document.body).unbind('mousemove.hint');
            return dragThis.animate({
              opacity: 0,
              duration: 250,
              complete: function() {
                return dragThis.css({
                  top: -1000,
                  left: -1000
                });
              }
            });
          });
          return $(document.body).one('mousemove.hint', function() {
            var dropHere;
            $(document.body).unbind('mouseup.hint');
            dragThis.animate({
              opacity: 0,
              duration: 250,
              complete: function() {
                return dragThis.css({
                  top: -1000,
                  left: -1000
                });
              }
            });
            dropHere = _this.$('.drop_here');
            if ((offset = dropAreaElement.offset()).top === 0) {
              offset = _this.findComponentDropAreaElement(equation, solutionComponent).offset();
            }
            dropHere.css({
              opacity: 0,
              top: offset.top + offset.height - gameAreaOffset.top,
              left: offset.left + (offset.width / 2) - gameAreaOffset.left
            });
            return dropHere.animate({
              opacity: 1,
              duration: 250,
              complete: function() {
                return component.element.one('mouseup.hint', function() {
                  return dropHere.animate({
                    opacity: 0,
                    duration: 250,
                    complete: function() {
                      return dropHere.css({
                        top: -1000,
                        left: -1000
                      });
                    }
                  });
                });
              }
            });
          });
        });
      }
    });
  };

  Equations.prototype.findComponentDropAreaElement = function(equation, solutionComponent) {
    var accept, p, possible, sf, _i, _len;
    possible = equation.el.find('div');
    if (solutionComponent.after.length) {
      for (_i = 0, _len = possible.length; _i < _len; _i++) {
        p = possible[_i];
        sf = equation.straightFormula($(p));
        if (sf === solutionComponent.after || sf.replace(solutionComponent.fragment, '') === solutionComponent.after) {
          accept = $(p).next();
          break;
        }
      }
    } else {
      accept = $(possible[0]);
    }
    return accept;
  };

  Equations.prototype.showHint = function() {
    var accept, c, component, components, dropArea, element, equation, existing, formula, fragment, info, solution, solutionComponent, solutionComponents, straightFormula, test, variable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1,
      _this = this;
    _ref = this.equations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      equation = _ref[_i];
      formula = equation.formula();
      straightFormula = equation.straightFormula();
      solution = equation.solution;
      if (formula !== solution) {
        if (solution !== straightFormula) {
          if ((solutionComponents = equation.solutionComponents)) {
            for (_j = 0, _len1 = solutionComponents.length; _j < _len1; _j++) {
              solutionComponent = solutionComponents[_j];
              if (!(!solutionComponent.set)) {
                continue;
              }
              component = ((function() {
                var _k, _len2, _ref1, _results;
                _ref1 = this.equationComponents;
                _results = [];
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  c = _ref1[_k];
                  if (c.equationFragment === solutionComponent.fragment) {
                    _results.push(c);
                  }
                }
                return _results;
              }).call(this))[0];
              if (component.after === solutionComponent.after) {
                continue;
              }
              accept = this.findComponentDropAreaElement(equation, solutionComponent);
              if (accept != null ? accept.length : void 0) {
                this.displayHint(component, accept, equation, solutionComponent);
                solutionComponent.set = true;
                return;
              }
            }
          } else {
            components = this.equationComponents.sort(function(a, b) {
              return b.equationFragment.length - a.equationFragment.length;
            });
            for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
              component = components[_k];
              fragment = component.equationFragment;
              if (this.testFragment(fragment, solution, formula)) {
                _ref1 = equation.dropAreas;
                for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
                  dropArea = _ref1[_l];
                  if (dropArea.component || dropArea.fixed) {
                    continue;
                  }
                  element = dropArea.element;
                  element.html(fragment);
                  test = this.testFragment(fragment, solution, equation.formula(), true);
                  element.html('');
                  if (test) {
                    this.displayHint(component, dropArea.element);
                  }
                  return;
                }
              }
            }
          }
        } else {
          for (variable in equation.variables) {
            info = equation.variables[variable];
            if (!info.element || ("" + (info.get())) === ("" + info.solution)) {
              continue;
            }
            if ((existing = this.$(".hints ." + variable + "_hint")).length) {
              existing.animate({
                opacity: 0,
                duration: 500,
                complete: function() {
                  return existing.animate({
                    opacity: 1,
                    duration: 500
                  });
                }
              });
            } else {
              this.$('.hints').append("<p class='" + variable + "_hint'>Set " + variable + " = " + info.solution + "</p>");
            }
            return;
          }
        }
      } else {
        console.log('LAUNCH!');
      }
    }
  };

  return Equations;

})();
