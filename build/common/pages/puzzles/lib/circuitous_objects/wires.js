// Generated by CoffeeScript 1.3.3
var Transformer, circuitousObject, wires,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

wires = typeof exports !== "undefined" && exports !== null ? exports : provide('./wires', {});

Transformer = require('../common_objects/transformer').Transformer;

circuitousObject = require('./object');

wires.Wires = (function(_super) {

  __extends(Wires, _super);

  Wires.prototype.resistance = 0.00001;

  Wires.prototype.electronsPerSegment = 2;

  function Wires(board) {
    this.board = board;
    this.init();
  }

  Wires.prototype.init = function() {
    var _this = this;
    this.info = {
      all: {},
      positions: {},
      nodes: {}
    };
    this.el = this.board.el;
    this.cellDimension = this.board.cellDimension;
    return this.el.bind('mousedown.draw_wire', function(e) {
      $(document.body).one('mouseup.draw_wire', function() {
        $(document.body).unbind('mousemove.draw_wire');
        delete _this.info.start;
        delete _this.info.continuation;
        delete _this.info.erasing;
        return delete _this.info.lastSegment;
      });
      $(document.body).bind('mousemove.draw_wire', function(e) {
        return _this.draw(e);
      });
      return _this.draw(e);
    });
  };

  Wires.prototype.all = function() {
    return this.info.all;
  };

  Wires.prototype.draw = function(e) {
    var coords, i, start, xDelta, xDiff, yDelta, yDiff, _i, _ref, _results;
    coords = this.board.roundedCoordinates({
      x: Client.x(e),
      y: Client.y(e)
    }, this.el.offset());
    if (start = this.info.start) {
      xDiff = Math.abs(start.x - coords.x);
      yDiff = Math.abs(start.y - coords.y);
      if (xDiff < this.cellDimension && yDiff < this.cellDimension) {
        return;
      }
      xDelta = yDelta = 0;
      if (xDiff > yDiff) {
        xDelta = this.cellDimension * (start.x > coords.x ? -1 : 1);
      } else {
        yDelta = this.cellDimension * (start.y > coords.y ? -1 : 1);
      }
      _results = [];
      for (i = _i = 1, _ref = Math.floor(Math.max(xDiff, yDiff) / this.cellDimension); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push(this.createOrErase({
          x: start.x + xDelta * i,
          y: start.y + yDelta * i
        }));
      }
      return _results;
    } else {
      return this.info.start = coords;
    }
  };

  Wires.prototype.createOrErase = function(coords) {
    var existingSegment, segment;
    existingSegment = this.find(this.info.start, coords);
    if (this.info.erasing || (existingSegment && (!this.info.continuation || (existingSegment === this.info.lastSegment)))) {
      if (existingSegment) {
        segment = this.erase(coords);
      }
    } else {
      if (!existingSegment) {
        segment = this.create(coords);
      }
    }
    this.info.lastSegment = segment;
    return this.info.start = coords;
  };

  Wires.prototype.create = function(coords) {
    var segment;
    segment = $(document.createElement('DIV'));
    segment.addClass('wire_segment');
    segment.css({
      left: Math.min(this.info.start.x, coords.x),
      top: Math.min(this.info.start.y, coords.y)
    });
    if (Math.abs(this.info.start.x - coords.x) > Math.abs(this.info.start.y - coords.y)) {
      segment.width(this.cellDimension);
      segment.addClass('horizontal');
    } else {
      segment.height(this.cellDimension);
      segment.addClass('vertical');
    }
    this.el.append(segment);
    this.recordPosition(segment, this.info.start, coords);
    this.info.continuation = true;
    return segment;
  };

  Wires.prototype.erase = function(coords) {
    var segment;
    if (!(segment = this.find(this.info.start, coords))) {
      return;
    }
    segment.el.remove();
    this.recordPosition(null, this.info.start, coords);
    if (!this.info.continuation) {
      this.info.erasing = true;
    }
    return segment.el;
  };

  Wires.prototype.recordPosition = function(element, start, end) {
    var node1, node2, segment, _base, _base1, _ref, _ref1;
    this.board.changesMade = true;
    node1 = "" + start.x + ":" + start.y;
    node2 = "" + end.x + ":" + end.y;
    if (element) {
      segment = {
        id: "wire" + node1 + node2,
        el: element,
        horizontal: element.hasClass('horizontal'),
        resistance: this.resistance,
        nodes: [start, end]
      };
      segment.setCurrent = function(current) {
        return segment.current = current;
      };
      this.info.all[segment.id] = segment;
      (_base = this.info.nodes)[node1] || (_base[node1] = {});
      this.info.nodes[node1][node2] = segment;
      (_base1 = this.info.nodes)[node2] || (_base1[node2] = {});
      return this.info.nodes[node2][node1] = segment;
    } else {
      segment = this.info.nodes[node1][node2];
      if (segment) {
        delete this.info.all[segment.id];
      }
      if ((_ref = this.info.nodes[node1]) != null) {
        delete _ref[node2];
      }
      return (_ref1 = this.info.nodes[node2]) != null ? delete _ref1[node1] : void 0;
    }
  };

  Wires.prototype.find = function(start, end) {
    var endPoint, node1, node2, segment, _ref, _ref1, _ref2, _results;
    if (end == null) {
      end = null;
    }
    node1 = "" + start.x + ":" + start.y;
    if (end) {
      node2 = "" + end.x + ":" + end.y;
      return ((_ref = this.info.nodes[node1]) != null ? _ref[node2] : void 0) || ((_ref1 = this.info.nodes[node2]) != null ? _ref1[node1] : void 0);
    } else {
      _ref2 = this.info.nodes[node1];
      _results = [];
      for (endPoint in _ref2) {
        segment = _ref2[endPoint];
        _results.push(segment);
      }
      return _results;
    }
  };

  Wires.prototype.initElectrons = function(segment) {
    var electron, electrons, i, _i, _ref;
    if (segment.electrons) {
      return;
    }
    segment.electrons = [];
    electrons = $(document.createElement('DIV'));
    electrons.addClass('electrons');
    for (i = _i = 1, _ref = this.electronsPerSegment; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      electron = $(document.createElement('DIV'));
      electron.addClass('electron');
      if (segment.horizontal) {
        electron.css({
          left: (segment.el.width() / (this.electronsPerSegment + 1)) * i
        });
      } else {
        electron.css({
          top: (segment.el.height() / (this.electronsPerSegment + 1)) * i
        });
      }
      electrons.append(electron);
      segment.electrons.push({
        el: electron,
        transformer: new Transformer(electron)
      });
    }
    return segment.el.append(electrons);
  };

  Wires.prototype.moveElectrons = function(segment, elapsedTime) {
    var electron, height, left, reverse, top, totalMovement, width, x, y, _i, _len, _ref, _results;
    totalMovement = (elapsedTime / 500) * segment.current;
    reverse = (segment.nodes[0].x < segment.nodes[1].x) || (segment.nodes[0].y < segment.nodes[1].y);
    _ref = segment.electrons;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      electron = _ref[_i];
      x = y = 0;
      if (segment.horizontal) {
        left = parseInt(electron.el.css('left'));
        width = segment.el.width();
        if (reverse) {
          x = (((width - left) - totalMovement) % width) + (width - left);
        } else {
          x = ((left + totalMovement) % width) - left;
        }
      } else {
        top = parseInt(electron.el.css('top'));
        height = segment.el.height();
        if (reverse) {
          y = (((height - top) - totalMovement) % height) + (height - top);
        } else {
          y = ((top + totalMovement) % height) - top;
        }
      }
      _results.push(electron.transformer.translate(x, y));
    }
    return _results;
  };

  Wires.prototype.clearElectrons = function(segment) {
    var electron, _i, _len, _ref;
    _ref = (segment != null ? segment.electrons : void 0) || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      electron = _ref[_i];
      electron.el.remove();
    }
    return delete segment.electrons;
  };

  Wires.prototype.showCurrent = function(elapsedTime) {
    var segment, segmentId, _ref, _results;
    _ref = this.info.all;
    _results = [];
    for (segmentId in _ref) {
      segment = _ref[segmentId];
      if (segment.current) {
        this.initElectrons(segment);
        _results.push(this.moveElectrons(segment, elapsedTime));
      } else {
        _results.push(this.clearElectrons(segment));
      }
    }
    return _results;
  };

  return Wires;

})(circuitousObject.Object);

;

