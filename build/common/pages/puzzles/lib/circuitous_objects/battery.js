// Generated by CoffeeScript 1.3.3
var battery, circuitousObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

battery = typeof exports !== "undefined" && exports !== null ? exports : provide('./battery', {});

circuitousObject = require('./object');

battery.Battery = (function(_super) {

  __extends(Battery, _super);

  Battery.prototype.dragBuffer = {
    top: 15
  };

  Battery.prototype.centerOffset = {
    x: 16,
    y: 35
  };

  Battery.prototype.nodes = [
    {
      x: -16,
      y: -35,
      positive: true
    }, {
      x: 16,
      y: -35,
      negative: true
    }
  ];

  Battery.prototype.voltage = 9;

  function Battery(_arg) {
    this.recordChange = _arg.recordChange;
    this.init();
  }

  Battery.prototype.init = function() {};

  Battery.prototype.appendTo = function(container) {
    Battery.__super__.appendTo.call(this, container);
    return this.setVoltage(this.voltage);
  };

  Battery.prototype.getInfo = function() {};

  Battery.prototype.setVoltage = function(voltage) {
    this.voltage = voltage;
    this.recordChange();
    if (!this.el) {
      return;
    }
    if (!this.voltageElement) {
      this.voltageElement = $(document.createElement('DIV'));
      this.voltageElement.addClass('voltage');
      this.el.append(this.voltageElement);
    }
    return this.voltageElement.html("" + this.voltage + "V");
  };

  return Battery;

})(circuitousObject.Object);
