// Generated by CoffeeScript 1.3.3
var circuitousObject, options,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

options = typeof exports !== "undefined" && exports !== null ? exports : provide('./options', {});

circuitousObject = require('./object');

options.Options = (function(_super) {

  __extends(Options, _super);

  function Options(_arg) {
    this.el = _arg.el, this.rows = _arg.rows, this.columns = _arg.columns, this.items = _arg.items;
    this.init();
  }

  Options.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  Options.prototype.init = function() {
    this.width = this.el.width();
    this.height = this.el.height();
    this.construct();
    this.initSelector();
    return this.addItems();
  };

  Options.prototype.construct = function() {
    var column, option, optionRow, row, _i, _j, _ref, _ref1, _results;
    _results = [];
    for (row = _i = 1, _ref = this.rows; 1 <= _ref ? _i <= _ref : _i >= _ref; row = 1 <= _ref ? ++_i : --_i) {
      optionRow = $(document.createElement('TR'));
      for (column = _j = 1, _ref1 = this.columns; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; column = 1 <= _ref1 ? ++_j : --_j) {
        option = $(document.createElement('TD'));
        option.addClass('option');
        option.addClass("option_" + (row * column));
        option.addClass('empty_option');
        option.css({
          width: this.width / this.columns,
          height: this.height / this.rows
        });
        optionRow.append(option);
      }
      _results.push(this.el.append(optionRow));
    }
    return _results;
  };

  Options.prototype.initSelector = function() {
    var _this = this;
    this.selector = new circuitous.Selector({
      add: function(item) {
        return _this.addItem(item);
      }
    });
    return this.selector.attachTo(this.$('.empty_option')[0]);
  };

  Options.prototype.addItems = function() {
    var item, _i, _len, _ref, _ref1, _results;
    if (!((_ref = this.items) != null ? _ref.length : void 0)) {
      return;
    }
    _ref1 = this.items;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      _results.push(this.addItem(item));
    }
    return _results;
  };

  Options.prototype.addItem = function(item) {
    return console.log(item);
  };

  return Options;

})(circuitousObject.Object);
