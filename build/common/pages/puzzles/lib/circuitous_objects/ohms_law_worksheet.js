// Generated by CoffeeScript 1.3.3
var circuitousObject, ohmsLawWorksheet,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ohmsLawWorksheet = typeof exports !== "undefined" && exports !== null ? exports : provide('./ohms_law_worksheet', {});

circuitousObject = require('./object');

ohmsLawWorksheet.OhmsLawWorksheet = (function(_super) {

  __extends(OhmsLawWorksheet, _super);

  OhmsLawWorksheet.prototype.nodes = [
    {
      x: 0,
      y: 0
    }
  ];

  OhmsLawWorksheet.prototype.centerOffset = {
    x: -16,
    y: 64
  };

  function OhmsLawWorksheet(_arg) {
    this.recordChange = _arg.recordChange;
  }

  OhmsLawWorksheet.prototype.initTag = function() {};

  OhmsLawWorksheet.prototype.initCurrent = function() {
    var _this = this;
    this.worksheet = $(document.createElement('DIV'));
    this.worksheet.css({
      backgroundColor: 'white',
      border: '2px solid grey',
      textAlign: 'center',
      padding: '24px 0',
      width: 507,
      height: 490
    });
    this.worksheet.html('<h2>Ohm\'s Law</h2>\n<p>\n    Try to figure out Ohm\'s Law and fill in the missing values:\n</p>\n<div>\n    Volts (V) = power &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n    Ohms (Ω) = resistance &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n    Amps (A) = current\n</div>\n<table style=\'width: 80%; font-size: 18px; margin: 12px auto 0 auto\'>\n    <tbody>\n        <th>Volts (V)</th>\n        <th>Ohms (Ω)</th>\n        <th>Amps (A)</th>\n        <tr class=\'odd\'><td>6 V</td><td>5 Ω</td><td>1.2 A</td></tr>\n        <tr><td>6 V</td><td>10 Ω</td><td>0.6 A</td></tr>\n        <tr class=\'odd\'><td>6 V</td><td>20 Ω</td><td>0.3 A</td></tr>\n        <tr><td>12 V</td><td>5 Ω</td><td>2.4 A</td></tr>\n        <tr class=\'odd\'><td>12 V</td><td>10 Ω</td><td>1.2 A</td></tr>\n        <tr><td>12 V</td><td>20 Ω</td><td>0.6 A</td></tr>\n        <tr class=\'odd\'><td>10 V</td><td>20 Ω</td><td><input class=\'missing_amps\'/> A</td></tr>\n        <tr><td><input class=\'missing_volts\'/> V</td><td>5 Ω</td><td>0.8 A</td></tr>\n        <tr class=\'odd\'><td>12 V</td><td><input class=\'missing_ohms\'/> Ω</td><td>4 A</td></tr>\n    </tbody>\n</table>');
    this.el.append(this.worksheet);
    return $.timeout(100, function() {
      _this.worksheet.find('input').css({
        width: 42,
        fontSize: 18
      });
      _this.worksheet.find('td').css({
        padding: '6px 0'
      });
      _this.worksheet.find('.odd').css({
        backgroundColor: '#ccc'
      });
      _this.worksheet.find('input').bind('click', function(e) {
        return e.currentTarget.focus();
      });
      return _this.worksheet.find('input').bind('keyup', function(e) {
        return _this.checkAnswers({
          'missing_amps': 0.5,
          'missing_volts': 4,
          'missing_ohms': 3
        });
      });
    });
  };

  OhmsLawWorksheet.prototype.checkAnswers = function(answers) {
    var allCorrect, correct, input, inputElement, _i, _len, _ref;
    allCorrect = true;
    _ref = this.worksheet.find('input');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      inputElement = _ref[_i];
      input = $(inputElement);
      correct = parseFloat(input.val()) === answers[input[0].className];
      if (!correct) {
        allCorrect = false;
      }
      if (!input.val().length) {
        input.css({
          backgroundColor: null
        });
      } else {
        input.css({
          backgroundColor: (correct ? 'green' : 'red')
        });
      }
    }
    if (allCorrect) {
      return this.setCurrent('infinite', true);
    }
  };

  OhmsLawWorksheet.prototype.setCurrent = function(current, force) {
    if (force) {
      this.current = current;
      return this.recordChange();
    }
  };

  return OhmsLawWorksheet;

})(circuitousObject.Object);
