// Generated by CoffeeScript 1.3.3
var Animation, Client, board, circuitousObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

board = typeof exports !== "undefined" && exports !== null ? exports : provide('./board', {});

circuitousObject = require('./object');

Client = require('../common_objects/client').Client;

Animation = require('../common_objects/animation').Animation;

board.Board = (function(_super) {

  __extends(Board, _super);

  Board.prototype.cellDimension = 32;

  function Board(_arg) {
    this.el = _arg.el;
    this.items = [];
    this.init();
  }

  Board.prototype.init = function() {
    this.width = this.el.width();
    this.height = this.el.height();
    this.drawGrid();
    this.initWire();
    return this.initElectricity();
  };

  Board.prototype.drawGrid = function() {
    var cell, column, columns, row, rows, _i, _results;
    rows = this.height / this.cellDimension;
    columns = this.width / this.cellDimension;
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (column = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; column = 1 <= columns ? ++_j : --_j) {
          cell = $(document.createElement('DIV'));
          cell.addClass('cell');
          cell.css({
            width: this.cellDimension - 1,
            height: this.cellDimension - 1
          });
          _results1.push(this.el.append(cell));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.addItem = function(item, x, y) {
    var boardNode, offset, onBoardX, onBoardY;
    offset = this.el.offset();
    onBoardX = (offset.left < x && x < offset.left + this.width);
    onBoardY = (offset.top < y && y < offset.top + this.height);
    if (onBoardX && onBoardY) {
      this.items.push(item);
      item.positionAt(this.roundedCoordinates({
        x: x,
        y: y
      }));
      boardNode = {
        x: item.currentX - offset.left + item.powerNodes[0].x,
        y: item.currentY - offset.top + item.powerNodes[0].y
      };
    } else {
      return false;
    }
    return true;
  };

  Board.prototype.removeItem = function(item) {
    return this.items.splice(this.items.indexOf(item), 1);
  };

  Board.prototype.initWire = function() {
    var _this = this;
    this.wireInfo = {
      positions: {},
      nodes: {}
    };
    return this.el.bind('mousedown.draw_wire', function(e) {
      $(document.body).one('mouseup.draw_wire', function() {
        _this.el.unbind('mousemove.draw_wire');
        delete _this.wireInfo.start;
        delete _this.wireInfo.continuation;
        delete _this.wireInfo.erasing;
        return delete _this.wireInfo.lastSegment;
      });
      _this.el.bind('mousemove.draw_wire', function(e) {
        return _this.drawWire(e);
      });
      return _this.drawWire(e);
    });
  };

  Board.prototype.roundedCoordinates = function(coords, offset) {
    var halfDim, offsetCoords;
    halfDim = this.cellDimension / 2;
    offsetCoords = {
      x: coords.x - ((offset != null ? offset.left : void 0) || 0) + halfDim,
      y: coords.y - ((offset != null ? offset.top : void 0) || 0) + halfDim
    };
    return {
      x: (Math.round(offsetCoords.x / this.cellDimension) * this.cellDimension) - halfDim,
      y: (Math.round(offsetCoords.y / this.cellDimension) * this.cellDimension) - halfDim
    };
  };

  Board.prototype.addDot = function(_arg) {
    var color, dot, x, y;
    x = _arg.x, y = _arg.y, color = _arg.color;
    console.log('dot', x, y);
    dot = $(document.createElement('DIV'));
    dot.html('&nbsp;');
    dot.css({
      position: 'absolute',
      backgroundColor: color || 'red',
      width: 4,
      height: 4,
      marginTop: -2,
      marginLeft: -2,
      left: x,
      top: y,
      zIndex: 9
    });
    return this.el.append(dot);
  };

  Board.prototype.recordSegmentPosition = function(element, start, end) {
    var node1, node2, segment, xCoords, yCoords, _base, _base1, _base2;
    xCoords = [start.x, end.x].sort().join(':');
    yCoords = [start.y, end.y].sort().join(':');
    node1 = "" + start.x + ":" + start.y;
    node2 = "" + end.x + ":" + end.y;
    if (element) {
      segment = {
        element: element,
        nodes: [start, end]
      };
      xCoords = [start.x, end.x].sort().join(':');
      yCoords = [start.y, end.y].sort().join(':');
      (_base = this.wireInfo.positions)[xCoords] || (_base[xCoords] = {});
      this.wireInfo.positions[xCoords][yCoords] = segment;
      (_base1 = this.wireInfo.nodes)[node1] || (_base1[node1] = {});
      this.wireInfo.nodes[node1][node2] = segment;
      (_base2 = this.wireInfo.nodes)[node2] || (_base2[node2] = {});
      return this.wireInfo.nodes[node2][node1] = segment;
    } else {
      delete this.wireInfo.positions[xCoords][yCoords];
      delete this.wireInfo.nodes[node1][node2];
      return delete this.wireInfo.nodes[node2][node1];
    }
  };

  Board.prototype.getSegmentPosition = function(start, end) {
    var _ref;
    return (_ref = this.wireInfo.positions[[start.x, end.x].sort().join(':')]) != null ? _ref[[start.y, end.y].sort().join(':')] : void 0;
  };

  Board.prototype.getSegmentsAt = function(node) {
    var endPoint, segment, _ref, _results;
    _ref = this.wireInfo.nodes["" + node.x + ":" + node.y];
    _results = [];
    for (endPoint in _ref) {
      segment = _ref[endPoint];
      _results.push(segment);
    }
    return _results;
  };

  Board.prototype.drawWire = function(e) {
    var coords, i, last, start, xDelta, xDiff, yDelta, yDiff, _i, _ref, _results;
    coords = this.roundedCoordinates({
      x: Client.x(e),
      y: Client.y(e)
    }, this.el.offset());
    if (start = this.wireInfo.start) {
      xDiff = Math.abs(start.x - coords.x);
      yDiff = Math.abs(start.y - coords.y);
      if (last = this.wireInfo.lastSegment) {
        if (last.hasClass('vertical')) {
          xDiff = xDiff * 0.75;
        } else {
          yDiff = yDiff * 0.75;
        }
      }
      if (xDiff < this.cellDimension && yDiff < this.cellDimension) {
        return;
      }
      xDelta = yDelta = 0;
      if (xDiff > yDiff) {
        xDelta = this.cellDimension * (start.x > coords.x ? -1 : 1);
      } else {
        yDelta = this.cellDimension * (start.y > coords.y ? -1 : 1);
      }
      _results = [];
      for (i = _i = 0, _ref = Math.floor(Math.max(xDiff, yDiff) / this.cellDimension); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.createOrEraseWireSegment({
          x: start.x + xDelta,
          y: start.y + yDelta
        }));
      }
      return _results;
    } else {
      return this.wireInfo.start = coords;
    }
  };

  Board.prototype.createOrEraseWireSegment = function(coords) {
    var existingSegment, segment;
    existingSegment = this.getSegmentPosition(this.wireInfo.start, coords);
    if (this.wireInfo.erasing || (existingSegment && (!this.wireInfo.continuation || (existingSegment === this.wireInfo.lastSegment)))) {
      if (existingSegment) {
        segment = this.eraseWireSegment(coords);
      }
    } else {
      if (!existingSegment) {
        segment = this.createWireSegment(coords);
      }
    }
    this.wireInfo.lastSegment = segment;
    return this.wireInfo.start = coords;
  };

  Board.prototype.createWireSegment = function(coords) {
    var segment;
    segment = $(document.createElement('DIV'));
    segment.addClass('wire_segment');
    segment.css({
      left: Math.min(this.wireInfo.start.x, coords.x),
      top: Math.min(this.wireInfo.start.y, coords.y)
    });
    if (Math.abs(this.wireInfo.start.x - coords.x) > Math.abs(this.wireInfo.start.y - coords.y)) {
      segment.width(this.cellDimension);
      segment.addClass('horizontal');
    } else {
      segment.height(this.cellDimension);
      segment.addClass('vertical');
    }
    this.el.append(segment);
    this.recordSegmentPosition(segment, this.wireInfo.start, coords);
    this.wireInfo.continuation = true;
    return segment;
  };

  Board.prototype.eraseWireSegment = function(coords) {
    var segment;
    if (!(segment = this.getSegmentPosition(this.wireInfo.start, coords))) {
      return;
    }
    segment.element.remove();
    this.recordSegmentPosition(null, this.wireInfo.start, coords);
    if (!this.wireInfo.continuation) {
      this.wireInfo.erasing = true;
    }
    return segment;
  };

  Board.prototype.initElectricity = function() {
    var _this = this;
    this.electricalAnimation = new Animation();
    return this.electricalAnimation.start({
      method: function(_arg) {
        var deltaTime, elapsed;
        deltaTime = _arg.deltaTime, elapsed = _arg.elapsed;
        return _this.moveElectricity(deltaTime, elapsed);
      }
    });
  };

  Board.prototype.moveElectricity = function(deltaTime, elapsed) {
    var boardNode, connection, item, offset, powerNode, _i, _len, _ref, _results;
    if (parseInt(elapsed) % 100 !== 0) {
      return;
    }
    offset = this.el.offset();
    _ref = this.items;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.powerSource) {
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = item.powerNodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            powerNode = _ref1[_j];
            boardNode = {
              x: item.currentX - offset.left + powerNode.x,
              y: item.currentY - offset.top + powerNode.y
            };
            _results1.push((function() {
              var _k, _len2, _ref2, _results2;
              _ref2 = this.findConnections(boardNode);
              _results2 = [];
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                connection = _ref2[_k];
                _results2.push(console.log('connection', connection));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
    }
    return _results;
  };

  Board.prototype.findConnections = function(node) {
    console.log('looking for connection at', node, this.getSegmentsAt(node), this.wireInfo.nodes);
    return [];
  };

  return Board;

})(circuitousObject.Object);
