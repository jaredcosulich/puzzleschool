// Generated by CoffeeScript 1.3.3
var Client, board, circuitousObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

board = typeof exports !== "undefined" && exports !== null ? exports : provide('./board', {});

circuitousObject = require('./object');

Client = require('../common_objects/client').Client;

board.Board = (function(_super) {

  __extends(Board, _super);

  Board.prototype.cellDimension = 20;

  function Board(_arg) {
    this.el = _arg.el;
    this.items = [];
    this.init();
  }

  Board.prototype.init = function() {
    this.width = this.el.width();
    this.height = this.el.height();
    this.drawGrid();
    return this.initWire();
  };

  Board.prototype.drawGrid = function() {
    var cell, column, columns, row, rows, _i, _results;
    rows = this.height / this.cellDimension;
    columns = this.width / this.cellDimension;
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (column = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; column = 1 <= columns ? ++_j : --_j) {
          cell = $(document.createElement('DIV'));
          cell.addClass('cell');
          cell.css({
            width: this.cellDimension - 1,
            height: this.cellDimension - 1
          });
          _results1.push(this.el.append(cell));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.addItem = function(item, x, y) {
    var offset, onBoardX, onBoardY;
    offset = this.el.offset();
    onBoardX = (offset.left < x && x < offset.left + this.width);
    onBoardY = (offset.top < y && y < offset.top + this.height);
    if (onBoardX && onBoardY) {
      return this.items.push(item);
    } else {
      return false;
    }
  };

  Board.prototype.initWire = function() {
    var _this = this;
    this.wireInfo = {};
    return this.el.bind('mousedown.draw_wire', function(e) {
      $(document.body).one('mouseup.draw_wire', function() {
        _this.el.unbind('mousemove.draw_wire');
        return delete _this.wireInfo.active;
      });
      _this.el.bind('mousemove.draw_wire', function(e) {
        return _this.drawWire(e);
      });
      return _this.drawWire(e);
    });
  };

  Board.prototype.drawWire = function(e) {
    var active, offset, rightOffset, x, xDiff, y, yDiff;
    x = Math.round(Client.x(e) / this.cellDimension) * this.cellDimension;
    y = Math.round(Client.y(e) / this.cellDimension) * this.cellDimension;
    active = this.wireInfo.active;
    offset = this.el.offset();
    if (active) {
      xDiff = Math.abs(active.position.x - x);
      yDiff = Math.abs(active.position.y - y);
      if (xDiff < this.cellDimension && yDiff < this.cellDimension) {
        return;
      }
      if ((active.direction === 'horizontal' && yDiff > xDiff) || (active.direction === 'vertical' && xDiff > yDiff)) {
        x = active.position.x;
        y = active.position.y;
        if (!(active.element.height() && active.element.width())) {
          active.element.remove();
        }
        delete this.wireInfo.active;
        active = null;
      }
    }
    if (!active) {
      this.createWire(x, y);
      return;
    }
    if (!active.direction) {
      active.direction = (xDiff > yDiff ? 'horizontal' : 'vertical');
      active.element.addClass(active.direction);
    }
    if (active.direction === 'horizontal') {
      rightOffset = this.el.closest('.circuitous').width() - this.width;
      active.element.css({
        left: (active.start.x < x ? active.start.x - offset.left : null),
        right: (active.start.x > x ? this.width - (active.start.x - offset.left) + rightOffset : null),
        width: Math.abs(x - active.start.x)
      });
      return active.position.x = x;
    } else {
      active.element.css({
        top: (active.start.y < y ? active.start.y - offset.top : null),
        bottom: (active.start.y > y ? this.height - (active.start.y - offset.top) : null),
        height: Math.abs(y - active.start.y)
      });
      return active.position.y = y;
    }
  };

  Board.prototype.createWire = function(x, y) {
    var active, offset;
    offset = this.el.offset();
    x = Math.round(x / this.cellDimension) * this.cellDimension;
    y = Math.round(y / this.cellDimension) * this.cellDimension;
    active = this.wireInfo.active = {
      start: {
        x: x,
        y: y
      },
      position: {
        x: x,
        y: y
      },
      element: $(document.createElement('DIV'))
    };
    active.element.addClass('wire');
    active.element.css({
      left: active.start.x - offset.left,
      top: active.start.y - offset.top
    });
    return this.el.append(active.element);
  };

  return Board;

})(circuitousObject.Object);
