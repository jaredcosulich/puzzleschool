// Generated by CoffeeScript 1.3.3
var board, circuitousObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

board = typeof exports !== "undefined" && exports !== null ? exports : provide('./board', {});

circuitousObject = require('./object');

board.Board = (function(_super) {

  __extends(Board, _super);

  Board.prototype.cellDimension = 20;

  function Board(_arg) {
    this.el = _arg.el;
    this.items = [];
    this.init();
  }

  Board.prototype.init = function() {
    this.width = this.el.width();
    this.height = this.el.height();
    return this.drawGrid();
  };

  Board.prototype.drawGrid = function() {
    var cell, column, columns, row, rows, _i, _results;
    rows = this.height / this.cellDimension;
    columns = this.width / this.cellDimension;
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (column = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; column = 1 <= columns ? ++_j : --_j) {
          cell = $(document.createElement('DIV'));
          cell.addClass('cell');
          cell.css({
            width: this.cellDimension - 1,
            height: this.cellDimension - 1
          });
          _results1.push(this.el.append(cell));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.addItem = function(item, x, y) {
    var offset, onBoardX, onBoardY;
    offset = this.el.offset();
    onBoardX = (offset.left < x && x < offset.left + this.width);
    onBoardY = (offset.top < y && y < offset.top + this.height);
    if (onBoardX && onBoardY) {
      return this.items.push(item);
    } else {
      return false;
    }
  };

  Board.prototype.drawWire = function() {};

  return Board;

})(circuitousObject.Object);
