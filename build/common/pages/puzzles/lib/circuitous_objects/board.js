// Generated by CoffeeScript 1.3.3
var Animation, Client, board, circuitousObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

board = typeof exports !== "undefined" && exports !== null ? exports : provide('./board', {});

circuitousObject = require('./object');

Client = require('../common_objects/client').Client;

Animation = require('../common_objects/animation').Animation;

board.Board = (function(_super) {

  __extends(Board, _super);

  Board.prototype.cellDimension = 32;

  function Board(_arg) {
    this.el = _arg.el;
    this.components = [];
    this.init();
  }

  Board.prototype.init = function() {
    this.width = this.el.width();
    this.height = this.el.height();
    this.drawGrid();
    this.initWire();
    return this.initElectricity();
  };

  Board.prototype.drawGrid = function() {
    var cell, column, columns, row, rows, _i, _results;
    rows = this.height / this.cellDimension;
    columns = this.width / this.cellDimension;
    _results = [];
    for (row = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; row = 1 <= rows ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (column = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; column = 1 <= columns ? ++_j : --_j) {
          cell = $(document.createElement('DIV'));
          cell.addClass('cell');
          cell.css({
            width: this.cellDimension - 1,
            height: this.cellDimension - 1
          });
          _results1.push(this.el.append(cell));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.componentsAndWires = function() {
    var nodes, wireSegment, wireSegments, xCoords, yCoords, _ref;
    wireSegments = [];
    _ref = this.wireInfo.positions;
    for (yCoords in _ref) {
      nodes = _ref[yCoords];
      wireSegments.push.apply(wireSegments, (function() {
        var _results;
        _results = [];
        for (xCoords in nodes) {
          wireSegment = nodes[xCoords];
          _results.push(wireSegment);
        }
        return _results;
      })());
    }
    return __slice.call(this.components).concat(__slice.call(wireSegments));
  };

  Board.prototype.addComponent = function(component, x, y) {
    var offset, onBoardX, onBoardY;
    offset = this.el.offset();
    onBoardX = (offset.left < x && x < offset.left + this.width);
    onBoardY = (offset.top < y && y < offset.top + this.height);
    if (onBoardX && onBoardY) {
      this.components.push(component);
      component.positionAt(this.roundedCoordinates({
        x: x,
        y: y
      }));
    } else {
      return false;
    }
    return true;
  };

  Board.prototype.removeComponent = function(component) {
    return this.components.splice(this.components.indexOf(component), 1);
  };

  Board.prototype.initWire = function() {
    var _this = this;
    this.wireInfo = {
      positions: {},
      nodes: {}
    };
    return this.el.bind('mousedown.draw_wire', function(e) {
      $(document.body).one('mouseup.draw_wire', function() {
        $(document.body).unbind('mousemove.draw_wire');
        delete _this.wireInfo.start;
        delete _this.wireInfo.continuation;
        delete _this.wireInfo.erasing;
        return delete _this.wireInfo.lastSegment;
      });
      $(document.body).bind('mousemove.draw_wire', function(e) {
        return _this.drawWire(e);
      });
      return _this.drawWire(e);
    });
  };

  Board.prototype.roundedCoordinates = function(coords, offset) {
    var halfDim, offsetCoords;
    halfDim = this.cellDimension / 2;
    offsetCoords = {
      x: coords.x - ((offset != null ? offset.left : void 0) || 0) + halfDim,
      y: coords.y - ((offset != null ? offset.top : void 0) || 0) + halfDim
    };
    return {
      x: (Math.round(offsetCoords.x / this.cellDimension) * this.cellDimension) - halfDim,
      y: (Math.round(offsetCoords.y / this.cellDimension) * this.cellDimension) - halfDim
    };
  };

  Board.prototype.addDot = function(_arg) {
    var color, dot, x, y;
    x = _arg.x, y = _arg.y, color = _arg.color;
    dot = $(document.createElement('DIV'));
    dot.html('&nbsp;');
    dot.css({
      position: 'absolute',
      backgroundColor: color || 'red',
      width: 4,
      height: 4,
      marginTop: -2,
      marginLeft: -2,
      left: x,
      top: y,
      zIndex: 9
    });
    this.el.append(dot);
    return console.log('dot', x, y, dot);
  };

  Board.prototype.recordSegmentPosition = function(element, start, end) {
    var node1, node2, segment, xCoords, yCoords, _base, _base1, _base2;
    xCoords = [start.x, end.x].sort().join(':');
    yCoords = [start.y, end.y].sort().join(':');
    node1 = "" + start.x + ":" + start.y;
    node2 = "" + end.x + ":" + end.y;
    if (element) {
      segment = {
        el: element,
        nodes: [start, end]
      };
      xCoords = [start.x, end.x].sort().join(':');
      yCoords = [start.y, end.y].sort().join(':');
      (_base = this.wireInfo.positions)[xCoords] || (_base[xCoords] = {});
      this.wireInfo.positions[xCoords][yCoords] = segment;
      (_base1 = this.wireInfo.nodes)[node1] || (_base1[node1] = {});
      this.wireInfo.nodes[node1][node2] = segment;
      (_base2 = this.wireInfo.nodes)[node2] || (_base2[node2] = {});
      return this.wireInfo.nodes[node2][node1] = segment;
    } else {
      delete this.wireInfo.positions[xCoords][yCoords];
      delete this.wireInfo.nodes[node1][node2];
      return delete this.wireInfo.nodes[node2][node1];
    }
  };

  Board.prototype.getSegmentPosition = function(start, end) {
    var _ref;
    return (_ref = this.wireInfo.positions[[start.x, end.x].sort().join(':')]) != null ? _ref[[start.y, end.y].sort().join(':')] : void 0;
  };

  Board.prototype.getSegmentsAt = function(node) {
    var endPoint, segment, _ref, _results;
    _ref = this.wireInfo.nodes["" + node.x + ":" + node.y];
    _results = [];
    for (endPoint in _ref) {
      segment = _ref[endPoint];
      _results.push(segment);
    }
    return _results;
  };

  Board.prototype.drawWire = function(e) {
    var coords, i, start, xDelta, xDiff, yDelta, yDiff, _i, _ref, _results;
    coords = this.roundedCoordinates({
      x: Client.x(e),
      y: Client.y(e)
    }, this.el.offset());
    if (start = this.wireInfo.start) {
      xDiff = Math.abs(start.x - coords.x);
      yDiff = Math.abs(start.y - coords.y);
      if (xDiff < this.cellDimension && yDiff < this.cellDimension) {
        return;
      }
      xDelta = yDelta = 0;
      if (xDiff > yDiff) {
        xDelta = this.cellDimension * (start.x > coords.x ? -1 : 1);
      } else {
        yDelta = this.cellDimension * (start.y > coords.y ? -1 : 1);
      }
      _results = [];
      for (i = _i = 0, _ref = Math.floor(Math.max(xDiff, yDiff) / this.cellDimension); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.createOrEraseWireSegment({
          x: start.x + xDelta,
          y: start.y + yDelta
        }));
      }
      return _results;
    } else {
      return this.wireInfo.start = coords;
    }
  };

  Board.prototype.createOrEraseWireSegment = function(coords) {
    var existingSegment, segment;
    existingSegment = this.getSegmentPosition(this.wireInfo.start, coords);
    if (this.wireInfo.erasing || (existingSegment && (!this.wireInfo.continuation || (existingSegment === this.wireInfo.lastSegment)))) {
      if (existingSegment) {
        segment = this.eraseWireSegment(coords);
      }
    } else {
      if (!existingSegment) {
        segment = this.createWireSegment(coords);
      }
    }
    this.wireInfo.lastSegment = segment;
    return this.wireInfo.start = coords;
  };

  Board.prototype.createWireSegment = function(coords) {
    var segment;
    segment = $(document.createElement('DIV'));
    segment.addClass('wire_segment');
    segment.css({
      left: Math.min(this.wireInfo.start.x, coords.x),
      top: Math.min(this.wireInfo.start.y, coords.y)
    });
    if (Math.abs(this.wireInfo.start.x - coords.x) > Math.abs(this.wireInfo.start.y - coords.y)) {
      segment.width(this.cellDimension);
      segment.addClass('horizontal');
    } else {
      segment.height(this.cellDimension);
      segment.addClass('vertical');
    }
    this.el.append(segment);
    this.recordSegmentPosition(segment, this.wireInfo.start, coords);
    this.wireInfo.continuation = true;
    return segment;
  };

  Board.prototype.eraseWireSegment = function(coords) {
    var segment;
    if (!(segment = this.getSegmentPosition(this.wireInfo.start, coords))) {
      return;
    }
    segment.el.remove();
    this.recordSegmentPosition(null, this.wireInfo.start, coords);
    if (!this.wireInfo.continuation) {
      this.wireInfo.erasing = true;
    }
    return segment.el;
  };

  Board.prototype.initElectricity = function() {
    var _this = this;
    this.electricalAnimation = new Animation();
    return this.electricalAnimation.start({
      method: function(_arg) {
        var deltaTime, elapsed;
        deltaTime = _arg.deltaTime, elapsed = _arg.elapsed;
        return _this.moveElectricity(deltaTime, elapsed);
      }
    });
  };

  Board.prototype.moveElectricity = function(deltaTime, elapsed) {
    var amps, c, circuit, component, negativeTerminal, piece, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
    _ref = this.componentsAndWires();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      piece = _ref[_i];
      piece.receivingCurrent = false;
      piece.excessiveCurrent = false;
    }
    _ref1 = this.components;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      component = _ref1[_j];
      if (component.powerSource) {
        _ref2 = component.currentTerminals('negative');
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          negativeTerminal = _ref2[_k];
          if ((circuit = this.traceConnections(this.boardPosition(negativeTerminal), component)).complete) {
            if (circuit.totalResistance > 0) {
              amps = component.voltage / circuit.totalResistance;
              _ref3 = circuit.components;
              for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                c = _ref3[_l];
                c.receivingCurrent = true;
                if (typeof c.setCurrent === "function") {
                  c.setCurrent(amps);
                }
              }
            } else {
              amps = 'infinite';
              _ref4 = circuit.components;
              for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                c = _ref4[_m];
                c.excessiveCurrent = true;
                c.el.addClass('excessive_current');
              }
            }
          } else {

          }
        }
      }
    }
    _ref5 = this.componentsAndWires();
    _results = [];
    for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
      piece = _ref5[_n];
      if (!piece.excessiveCurrent) {
        piece.el.removeClass('excessive_current');
      }
      if (!piece.receivingCurrent) {
        _results.push(typeof piece.setCurrent === "function" ? piece.setCurrent(0) : void 0);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Board.prototype.boardPosition = function(componentNode) {
    var offset;
    offset = this.el.offset();
    return {
      x: componentNode.x - offset.left,
      y: componentNode.y - offset.top
    };
  };

  Board.prototype.compareNodes = function(node1, node2) {
    return node1.x === node2.x && node1.y === node2.y;
  };

  Board.prototype.traceConnections = function(node, component, circuit) {
    var nextNodeInfo;
    if (circuit == null) {
      circuit = {
        totalResistance: 0,
        components: []
      };
    }
    if (!circuit.id) {
      circuit.id = "" + (new Date().getTime()) + (Math.random());
    }
    if ((nextNodeInfo = this.findConnection(node, component, circuit.id))) {
      circuit.totalResistance += nextNodeInfo.component.resistance || 0;
      circuit.components.push(nextNodeInfo.component);
      if (nextNodeInfo.component.powerSource) {
        circuit.complete = true;
      } else {
        return this.traceConnections(nextNodeInfo.otherNode, nextNodeInfo.component, circuit);
      }
    } else {
      circuit.complete = false;
    }
    return circuit;
  };

  Board.prototype.findConnection = function(node, component, circuitId) {
    var c, n, otherNode, positiveTerminal, segment, wireSegment, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
    _ref = this.components;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      if (c !== component) {
        if (c.powerSource) {
          _ref1 = c.currentTerminals('positive');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            positiveTerminal = _ref1[_j];
            if (this.compareNodes(this.boardPosition(positiveTerminal), node)) {
              return {
                component: c
              };
            }
          }
        } else {
          _ref2 = c.currentNodes();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            n = _ref2[_k];
            if (!(this.compareNodes(this.boardPosition(n), node))) {
              continue;
            }
            if (c.soloNode) {
              c.setComingFrom(circuitId, component);
              otherNode = n;
            } else {
              otherNode = ((function() {
                var _l, _len3, _ref3, _results;
                _ref3 = c.currentNodes();
                _results = [];
                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                  otherNode = _ref3[_l];
                  if (!this.compareNodes(this.boardPosition(n), otherNode)) {
                    _results.push(otherNode);
                  }
                }
                return _results;
              }).call(this))[0];
            }
            return {
              component: c,
              otherNode: this.boardPosition(otherNode)
            };
          }
        }
      }
    }
    _ref3 = this.getSegmentsAt(node);
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      segment = _ref3[_l];
      if (segment.el === component.el) {
        continue;
      }
      if (segment.el === (typeof component.comingFrom === "function" ? (_ref4 = component.comingFrom(circuitId)) != null ? _ref4.el : void 0 : void 0)) {
        continue;
      }
      wireSegment = segment;
      break;
    }
    if (!wireSegment) {
      return false;
    }
    otherNode = ((function() {
      var _len4, _m, _ref5, _results;
      _ref5 = wireSegment.nodes;
      _results = [];
      for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
        n = _ref5[_m];
        if (!this.compareNodes(n, node)) {
          _results.push(n);
        }
      }
      return _results;
    }).call(this))[0];
    return {
      component: wireSegment,
      otherNode: otherNode
    };
  };

  return Board;

})(circuitousObject.Object);
