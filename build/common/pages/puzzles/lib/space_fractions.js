// Generated by CoffeeScript 1.3.3
var LASER_HEIGHT, OBJECTS, direction, direction2, directions, index, index2, object, objectType, spaceFractions, _i, _j, _len, _len1,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

spaceFractions = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/space_fractions', {});

LASER_HEIGHT = 24;

OBJECTS = {
  rock1: {
    image: 'rock1',
    index: 999999
  },
  rock2: {
    image: 'rock2',
    index: 1000000
  }
};

directions = ['up', 'down', 'left', 'right'];

for (index = _i = 0, _len = directions.length; _i < _len; index = ++_i) {
  direction = directions[index];
  OBJECTS["laser_" + direction] = {
    index: 10 + index,
    image: "laser_" + direction,
    distribute: true,
    distributeDirections: [direction],
    accept: false
  };
  for (index2 = _j = 0, _len1 = directions.length; _j < _len1; index2 = ++_j) {
    direction2 = directions[index2];
    if ((index < 2 && index2 < 2) || (index > 1 && index2 > 1)) {
      continue;
    }
    OBJECTS["turn_" + direction + "_" + direction2] = {
      index: 100 + index2,
      image: "turn_" + direction + "_" + direction2,
      distribute: true,
      distributeDirections: [direction2],
      accept: true,
      acceptDirections: [direction]
    };
  }
}

for (objectType in OBJECTS) {
  object = OBJECTS[objectType];
  object.image = "/assets/images/puzzles/space_fractions/" + object.image + ".png";
}

spaceFractions.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

spaceFractions.ViewHelper = (function() {

  ViewHelper.prototype.objects = OBJECTS;

  function ViewHelper(_arg) {
    var column, row, square, _k, _l, _ref, _ref1;
    this.el = _arg.el, this.rows = _arg.rows, this.columns = _arg.columns;
    this.board = this.$('.board');
    this.board.html('');
    for (row = _k = 0, _ref = this.rows; 0 <= _ref ? _k < _ref : _k > _ref; row = 0 <= _ref ? ++_k : --_k) {
      for (column = _l = 0, _ref1 = this.columns; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; column = 0 <= _ref1 ? ++_l : --_l) {
        index = (row * this.rows) + column;
        square = $(document.createElement('DIV'));
        square.addClass('square');
        square.data('index', index);
        square.addClass("index" + index);
        this.board.append(square);
      }
    }
  }

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  ViewHelper.prototype.addObjectToBoard = function(objectType, square) {
    var laserData, objectContainer, _k, _len2, _ref;
    square = $(square);
    square.html('');
    this.removeExistingLasers(square);
    square.addClass('occupied');
    square.data('object_type', objectType);
    object = this.objects[objectType];
    objectContainer = $(document.createElement('IMG'));
    objectContainer.attr('src', object.image);
    square.append(objectContainer);
    if (object.accept) {
      square.data('acceptDirections', JSON.stringify(object.acceptDirections));
      if ((laserData = JSON.parse(square.data('lasers') || null))) {
        _ref = object.acceptDirections;
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          direction = _ref[_k];
          if (laserData[direction]) {
            square.data('numerator', laserData[direction].numerator);
            square.data('denominator', laserData[direction].denominator);
            this.fireLaser(this.board.find(".square.index" + laserData[direction].index));
          }
        }
      }
    }
    if (object.distribute) {
      square.data('distributeDirections', JSON.stringify(object.distributeDirections));
      return this.fireLaser(square);
    }
  };

  ViewHelper.prototype.removeObjectFromBoard = function(square) {
    var laserData, _results;
    this.removeExistingLasers(square);
    square.html('');
    square.removeClass('occupied');
    square.data('object_type', null);
    laserData = JSON.parse(square.data('lasers') || '{}');
    _results = [];
    for (direction in laserData) {
      _results.push(this.fireLaser(this.$(".index" + laserData[direction].index)));
    }
    return _results;
  };

  ViewHelper.prototype.removeExistingLasers = function(square) {
    var existingLasers, laserSquare, _k, _len2, _ref, _results;
    square = $(square);
    index = square.data('index');
    if ((existingLasers = this.board.find(".laser.laser" + index)).length) {
      existingLasers.remove();
      _ref = this.board.find(".square.laser" + index);
      _results = [];
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        laserSquare = _ref[_k];
        laserSquare = $(laserSquare);
        laserSquare.removeClass("laser" + index + "}}");
        laserSquare.data('lasers')[laserSquare.data("laser{index}")] = null;
        laserSquare.data("laser{index}", null);
        if (laserSquare.hasClass('occupied')) {
          _results.push(this.removeExistingLasers(laserSquare));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  ViewHelper.prototype.fireLaser = function(square) {
    var acceptDirections, checkPath, checkSquare, denominator, distributeDirections, end, height, increment, laser, laserData, numerator, offset, squareIndex, start, width, _k, _l, _len2, _len3, _m, _n, _results,
      _this = this;
    square = $(square);
    this.removeExistingLasers(square);
    if (!(distributeDirections = JSON.parse(square.data('distributeDirections') || null))) {
      return;
    }
    if ((acceptDirections = JSON.parse(square.data('acceptDirections') || null))) {
      if (!(laserData = JSON.parse(square.data('lasers') || null))) {
        return;
      }
      for (_k = 0, _len2 = acceptDirections.length; _k < _len2; _k++) {
        direction = acceptDirections[_k];
        if (!laserData[direction]) {
          return;
        }
      }
    }
    numerator = square.data('numerator') || 1;
    denominator = square.data('denominator') || 1;
    squareIndex = square.data('index');
    checkPath = function(checkSquare, squareIndex, direction) {
      var acceptDirection, occupied;
      occupied = checkSquare.hasClass('occupied');
      acceptDirection = JSON.parse(checkSquare.data('acceptDirection') || null);
      if (occupied && !acceptDirection) {
        return false;
      }
      laserData = JSON.parse(checkSquare.data('lasers') || '{}');
      laserData[direction] = {
        index: squareIndex,
        numerator: numerator,
        denominator: denominator
      };
      checkSquare.data('lasers', JSON.stringify(laserData));
      checkSquare.data("laser" + squareIndex, direction);
      checkSquare.addClass("laser" + squareIndex);
      if (__indexOf.call(JSON.parse(checkSquare.data('acceptDirection') || '[]'), direction) >= 0) {
        checkSquare.data('numerator', numerator);
        checkSquare.data('denominator', denominator);
        _this.fireLaser(checkSquare);
      }
      if (occupied) {
        return false;
      }
      return true;
    };
    _results = [];
    for (_l = 0, _len3 = distributeDirections.length; _l < _len3; _l++) {
      direction = distributeDirections[_l];
      laser = $(document.createElement('DIV'));
      laser.addClass('laser');
      laser.addClass("laser" + squareIndex);
      laser.data('numerator', numerator);
      laser.data('denominator', denominator);
      increment = (function() {
        switch (direction) {
          case 'up':
            return -1 * this.columns;
          case 'down':
            return this.columns;
          case 'left':
            return -1;
          case 'right':
            return 1;
        }
      }).call(this);
      start = square.data('index') + increment;
      end = (function() {
        switch (direction) {
          case 'up':
            return 0;
          case 'down':
            return this.board.find('.square').length;
          case 'left':
            return (Math.floor(start / this.columns) * this.columns) - 1;
          case 'right':
            return Math.ceil(start / this.columns) * this.columns;
        }
      }).call(this);
      offset = square.offset();
      if (direction === 'left' || direction === 'right') {
        height = LASER_HEIGHT * (numerator / denominator);
        width = 0;
        for (index = _m = start; start <= end ? _m < end : _m > end; index = _m += increment) {
          checkSquare = this.board.find(".square.index" + index);
          if (!checkPath(checkSquare, squareIndex, direction)) {
            break;
          }
          width += checkSquare.width();
        }
      } else {
        width = LASER_HEIGHT * (numerator / denominator);
        height = 0;
        for (index = _n = start; start <= end ? _n < end : _n > end; index = _n += increment) {
          checkSquare = this.board.find(".square.index" + index);
          if (!checkPath(checkSquare, squareIndex, direction)) {
            break;
          }
          height += checkSquare.height();
        }
      }
      laser.css({
        height: height,
        width: width
      });
      if (direction === 'right') {
        laser.css({
          top: offset.top + ((offset.height - height) / 2),
          left: offset.left + offset.width
        });
      } else if (direction === 'left') {
        laser.css({
          top: offset.top + ((offset.height - height) / 2),
          left: offset.left - width
        });
      } else if (direction === 'up') {
        laser.css({
          top: offset.top - height,
          left: offset.left + ((offset.width - width) / 2)
        });
      } else if (direction === 'down') {
        laser.css({
          top: offset.top + offset.height,
          left: offset.left + ((offset.width - width) / 2)
        });
      }
      _results.push(this.board.append(laser));
    }
    return _results;
  };

  return ViewHelper;

})();
