// Generated by CoffeeScript 1.3.3
var LASER_HEIGHT, OBJECTS, direction, direction2, directions, index, index2, spaceFractions, _i, _j, _len, _len1,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

spaceFractions = typeof exports !== "undefined" && exports !== null ? exports : provide('./lib/space_fractions', {});

LASER_HEIGHT = 20;

OBJECTS = {
  rock1: {
    image: 'rock1',
    index: -1
  },
  rock2: {
    image: 'rock2',
    index: -2
  }
};

directions = ['up', 'down', 'left', 'right'];

for (index = _i = 0, _len = directions.length; _i < _len; index = ++_i) {
  direction = directions[index];
  OBJECTS["ship_" + direction] = {
    index: index,
    image: "ship_" + direction,
    accept: true,
    acceptDirections: [direction],
    states: true,
    showFraction: true
  };
  OBJECTS["laser_" + direction] = {
    index: 10 + index,
    image: "laser_" + direction,
    distribute: true,
    distributeDirections: [direction],
    accept: false,
    showFraction: true
  };
  for (index2 = _j = 0, _len1 = directions.length; _j < _len1; index2 = ++_j) {
    direction2 = directions[index2];
    if ((index < 2 && index2 < 2) || (index > 1 && index2 > 1)) {
      continue;
    }
    OBJECTS["turn_" + direction + "_" + direction2] = {
      index: 100 + index2,
      image: "turn_" + direction + "_" + direction2,
      distribute: true,
      distributeDirections: [direction2],
      accept: true,
      acceptDirections: [direction],
      movable: true
    };
    OBJECTS["two_split_" + direction + "_" + direction2] = {
      index: 1000 + index2,
      image: "two_split_" + direction + "_" + direction2,
      distribute: true,
      distributeDirections: [direction, direction2],
      accept: true,
      acceptDirections: [direction],
      denominatorMultiplier: 2,
      movable: true
    };
  }
}

spaceFractions.ChunkHelper = (function() {

  function ChunkHelper() {}

  return ChunkHelper;

})();

spaceFractions.ViewHelper = (function() {

  ViewHelper.prototype.objects = OBJECTS;

  ViewHelper.prototype.baseFolder = '/assets/images/puzzles/space_fractions/';

  function ViewHelper(_arg) {
    var _this = this;
    this.el = _arg.el, this.rows = _arg.rows, this.columns = _arg.columns;
    this.initBoard();
    this.initOptions();
    window.onresize = function() {
      var square, _k, _len2, _ref, _results;
      _ref = _this.board.find('.square.occupied');
      _results = [];
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        square = _ref[_k];
        _results.push(_this.fireLaser(square));
      }
      return _results;
    };
  }

  ViewHelper.prototype.$ = function(selector) {
    return $(selector, this.el);
  };

  ViewHelper.prototype.initBoard = function() {
    var column, row, square, _k, _ref, _results;
    this.board = this.$('.board');
    this.board.html('');
    _results = [];
    for (row = _k = 0, _ref = this.rows; 0 <= _ref ? _k < _ref : _k > _ref; row = 0 <= _ref ? ++_k : --_k) {
      _results.push((function() {
        var _l, _ref1, _results1;
        _results1 = [];
        for (column = _l = 0, _ref1 = this.columns; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; column = 0 <= _ref1 ? ++_l : --_l) {
          index = (row * this.rows) + column;
          square = $(document.createElement('DIV'));
          square.addClass('square');
          square.data('index', index);
          square.addClass("index" + index);
          _results1.push(this.board.append(square));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  ViewHelper.prototype.initOptions = function() {
    var column, row, square, _k, _results;
    this.options = this.$('.options');
    this.options.html('');
    _results = [];
    for (row = _k = 0; _k < 7; row = ++_k) {
      _results.push((function() {
        var _l, _results1;
        _results1 = [];
        for (column = _l = 0; _l < 4; column = ++_l) {
          index = (row * 3) + column;
          square = $(document.createElement('DIV'));
          square.addClass('square');
          square.data('index', index);
          square.addClass("index" + index);
          _results1.push(this.options.append(square));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  ViewHelper.prototype.setObjectImage = function(square) {
    var acceptedLaser, fraction, laserData, object, state, totalLaser;
    object = this.objects[square.data('object_type')];
    if (!object) {
      return;
    }
    if (object.states) {
      laserData = JSON.parse(square.data('lasers') || '{}');
      acceptedLaser = laserData[object.acceptDirections[0]];
      totalLaser = acceptedLaser ? acceptedLaser.numerator / acceptedLaser.denominator : 0;
      fraction = parseInt(square.data('fullNumerator')) / parseInt(square.data('fullDenominator'));
      if (isNaN(fraction)) {
        fraction = 1;
      }
      if (totalLaser === 0) {
        state = 'empty';
      } else if (totalLaser < fraction) {
        state = 'under';
      } else if (totalLaser === fraction) {
        state = 'full';
      } else if (totalLaser > fraction) {
        state = 'over';
      }
      return square.find('img').attr('src', this.baseFolder + object.image + '_' + state + '.png');
    } else {
      return square.find('img').attr('src', this.baseFolder + object.image + '.png');
    }
  };

  ViewHelper.prototype.setObjectFraction = function(square) {
    var fraction;
    square.find('.fraction').remove();
    fraction = $(document.createElement('DIV'));
    fraction.html("" + (square.data('fullNumerator') || square.data('numerator') || 1) + "/" + (square.data('fullDenominator') || square.data('denominator') || 1));
    fraction.addClass('fraction');
    return square.append(fraction);
  };

  ViewHelper.prototype.initMovableObject = function(square) {
    var objectMeta, objectType,
      _this = this;
    objectType = square.data('object_type');
    objectMeta = this.objects[objectType];
    return square.bind('mousedown', function(e) {
      var body, movingObject;
      _this.removeObjectFromSquare(square);
      movingObject = $(document.createElement('IMG'));
      movingObject.addClass('movable_object');
      movingObject.attr('src', _this.baseFolder + objectMeta.image + '.png');
      _this.el.append(movingObject);
      movingObject.css({
        left: e.clientX - (square.width() / 2),
        top: e.clientY - (square.height() / 2)
      });
      body = $(document.body);
      body.bind('mousemove', function(e) {
        var boardSquare, left, offset, top, _k, _len2, _ref, _results;
        left = e.clientX - (square.width() / 2);
        top = e.clientY - (square.height() / 2);
        movingObject.css({
          left: left,
          top: top
        });
        _ref = _this.board.find('.square:not(.occupied)');
        _results = [];
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          boardSquare = _ref[_k];
          offset = $(boardSquare).offset();
          if (e.clientX >= offset.left && e.clientX < offset.left + offset.width && e.clientY >= offset.top && e.clientY < offset.top + offset.height) {
            _results.push($(boardSquare).addClass('selected'));
          } else {
            _results.push($(boardSquare).removeClass('selected'));
          }
        }
        return _results;
      });
      return body.bind('mouseup', function(e) {
        var selectedSquare;
        _this.el.find('.movable_object').remove();
        body.unbind('mousemove');
        body.unbind('mouseup');
        selectedSquare = _this.board.find('.square.selected');
        if (!(selectedSquare != null ? selectedSquare.length : void 0)) {
          selectedSquare = square;
        }
        _this.addObjectToSquare(objectType, selectedSquare);
        return selectedSquare.removeClass('selected');
      });
    });
  };

  ViewHelper.prototype.addObjectToSquare = function(objectType, square) {
    var laserData, object, objectContainer, _k, _len2, _ref;
    square = $(square);
    square.html('');
    this.removeExistingLasers(square);
    square.addClass('occupied');
    square.data('object_type', objectType);
    object = this.objects[objectType];
    objectContainer = $(document.createElement('IMG'));
    square.append(objectContainer);
    if (object.showFraction) {
      this.setObjectFraction(square);
    }
    laserData = JSON.parse(square.data('lasers') || '{}');
    if (object.accept) {
      square.data('acceptDirections', JSON.stringify(object.acceptDirections));
      square.data('numeratorMultiplier', object.numeratorMultiplier || 1);
      square.data('denominatorMultiplier', object.denominatorMultiplier || 1);
      _ref = object.acceptDirections;
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        direction = _ref[_k];
        if (laserData[direction]) {
          square.data('numerator', laserData[direction].numerator);
          square.data('denominator', laserData[direction].denominator);
        }
      }
    }
    for (direction in laserData) {
      this.fireLaser(this.board.find(".square.index" + laserData[direction].index));
    }
    if (object.distribute) {
      square.data('distributeDirections', JSON.stringify(object.distributeDirections));
      this.fireLaser(square);
    }
    if (object.movable) {
      this.initMovableObject(square);
    }
    return this.setObjectImage(square);
  };

  ViewHelper.prototype.removeObjectFromSquare = function(square) {
    var attr, laserData, _k, _len2, _ref, _results;
    square = $(square);
    if (!square.data('object_type')) {
      return;
    }
    this.removeExistingLasers(square);
    square.html('');
    square.removeClass('occupied');
    _ref = ['object_type', 'acceptDirections', 'numerator', 'denominator'];
    for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
      attr = _ref[_k];
      square.data(attr, null);
    }
    laserData = JSON.parse(square.data('lasers') || '{}');
    _results = [];
    for (direction in laserData) {
      _results.push(this.fireLaser(this.$(".index" + laserData[direction].index)));
    }
    return _results;
  };

  ViewHelper.prototype.removeExistingLasers = function(square) {
    var existingLasers, laserData, laserSquare, squareIndex, _k, _len2, _ref, _results;
    square = $(square);
    squareIndex = square.data('index');
    if ((existingLasers = this.board.find(".laser.laser" + squareIndex)).length) {
      existingLasers.remove();
      _ref = this.board.find(".square.laser" + squareIndex);
      _results = [];
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        laserSquare = _ref[_k];
        laserSquare = $(laserSquare);
        laserSquare.removeClass("laser" + squareIndex);
        laserData = JSON.parse(laserSquare.data('lasers'));
        delete laserData[laserSquare.data("laser" + squareIndex)];
        laserSquare.data('lasers', JSON.stringify(laserData));
        laserSquare.data("laser" + squareIndex, null);
        if (laserSquare.hasClass('occupied')) {
          this.setObjectImage(laserSquare);
          _results.push(this.removeExistingLasers(laserSquare));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  ViewHelper.prototype.checkLaserPath = function(checkSquare, squareIndex, direction, numerator, denominator) {
    var acceptDirections, laserData, occupied;
    occupied = checkSquare.hasClass('occupied');
    acceptDirections = JSON.parse(checkSquare.data('acceptDirections') || null);
    if (occupied && !acceptDirections) {
      return false;
    }
    laserData = JSON.parse(checkSquare.data('lasers') || '{}');
    laserData[direction] = {
      index: squareIndex,
      numerator: numerator,
      denominator: denominator
    };
    checkSquare.data('lasers', JSON.stringify(laserData));
    checkSquare.data("laser" + squareIndex, direction);
    checkSquare.addClass("laser" + squareIndex);
    if (__indexOf.call(acceptDirections || [], direction) >= 0) {
      checkSquare.data('numerator', numerator);
      checkSquare.data('denominator', denominator);
      this.setObjectImage(checkSquare);
      this.fireLaser(checkSquare);
    }
    if (occupied) {
      return false;
    }
    return true;
  };

  ViewHelper.prototype.loadToPlay = function(data) {
    var attr, json, movableObjectIndex, object, objectMeta, square, _k, _len2, _ref, _results;
    json = JSON.parse(data);
    movableObjectIndex = 0;
    _ref = json.objects;
    _results = [];
    for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
      object = _ref[_k];
      objectMeta = this.objects[object.type];
      if (objectMeta.movable) {
        square = this.options.find(".square.index" + (movableObjectIndex++));
        _results.push(this.addObjectToSquare(object.type, square));
      } else {
        square = this.board.find(".square.index" + object.index);
        this.addObjectToSquare(object.type, square);
        for (attr in object) {
          if (attr !== 'type' && attr !== 'index') {
            square.data(attr, object[attr]);
          }
        }
        this.setObjectFraction(square);
        this.setObjectImage(square);
        _results.push(this.fireLaser(square));
      }
    }
    return _results;
  };

  ViewHelper.prototype.fireLaser = function(square) {
    var acceptDirection, acceptDirections, beam, checkSquare, denominator, distributeDirection, distributeDirections, end, height, increment, laser, laserData, numerator, offset, squareIndex, start, width, _k, _l, _len2, _len3, _m, _n, _results;
    square = $(square);
    this.removeExistingLasers(square);
    if (!(distributeDirections = JSON.parse(square.data('distributeDirections') || null))) {
      return;
    }
    if ((acceptDirections = JSON.parse(square.data('acceptDirections') || null))) {
      if (!(laserData = JSON.parse(square.data('lasers') || null))) {
        return;
      }
      for (_k = 0, _len2 = acceptDirections.length; _k < _len2; _k++) {
        acceptDirection = acceptDirections[_k];
        if (!laserData[acceptDirection]) {
          return;
        }
      }
    }
    numerator = (square.data('numerator') || 1) * (square.data('numeratorMultiplier') || 1);
    denominator = (square.data('denominator') || 1) * (square.data('denominatorMultiplier') || 1);
    squareIndex = square.data('index');
    _results = [];
    for (_l = 0, _len3 = distributeDirections.length; _l < _len3; _l++) {
      distributeDirection = distributeDirections[_l];
      laser = $(document.createElement('DIV'));
      laser.html('<div class=\'beam\'></div>');
      laser.addClass('laser');
      laser.addClass("laser" + squareIndex);
      laser.addClass(distributeDirection);
      laser.data('numerator', numerator);
      laser.data('denominator', denominator);
      increment = (function() {
        switch (distributeDirection) {
          case 'up':
            return -1 * this.columns;
          case 'down':
            return this.columns;
          case 'left':
            return -1;
          case 'right':
            return 1;
        }
      }).call(this);
      start = square.data('index') + increment;
      end = (function() {
        switch (distributeDirection) {
          case 'up':
            return 0;
          case 'down':
            return this.board.find('.square').length;
          case 'left':
            return (Math.floor(start / this.columns) * this.columns) - 1;
          case 'right':
            return Math.ceil(start / this.columns) * this.columns;
        }
      }).call(this);
      offset = square.offset();
      beam = laser.find('.beam');
      if (distributeDirection === 'left' || distributeDirection === 'right') {
        height = LASER_HEIGHT * (numerator / denominator);
        width = 0;
        for (index = _m = start; start <= end ? _m < end : _m > end; index = _m += increment) {
          checkSquare = this.board.find(".square.index" + index);
          if (!this.checkLaserPath(checkSquare, squareIndex, distributeDirection, numerator, denominator)) {
            break;
          }
          width += checkSquare.width();
        }
      } else {
        width = LASER_HEIGHT * (numerator / denominator);
        height = 0;
        for (index = _n = start; start <= end ? _n < end : _n > end; index = _n += increment) {
          checkSquare = this.board.find(".square.index" + index);
          if (!this.checkLaserPath(checkSquare, squareIndex, distributeDirection, numerator, denominator)) {
            break;
          }
          height += checkSquare.height();
        }
      }
      beam.addClass(distributeDirection);
      beam.css({
        height: height,
        width: width
      });
      if (distributeDirection === 'right') {
        laser.css({
          top: offset.top + ((offset.height - height) / 2) - LASER_HEIGHT,
          left: offset.left + offset.width
        });
      } else if (distributeDirection === 'left') {
        laser.css({
          top: offset.top + ((offset.height - height) / 2) - LASER_HEIGHT,
          left: offset.left - width
        });
      } else if (distributeDirection === 'up') {
        laser.css({
          top: offset.top - height,
          left: offset.left + ((offset.width - width) / 2) - LASER_HEIGHT
        });
      } else if (distributeDirection === 'down') {
        laser.css({
          top: offset.top + offset.height,
          left: offset.left + ((offset.width - width) / 2) - LASER_HEIGHT
        });
      }
      _results.push(this.board.append(laser));
    }
    return _results;
  };

  return ViewHelper;

})();
