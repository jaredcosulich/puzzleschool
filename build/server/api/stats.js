// Generated by CoffeeScript 1.3.3
var Line, db, requireUser, soma;

Line = require('line').Line;

soma = require('soma');

db = require('../lib/db');

requireUser = require('./lib/decorators').requireUser;

soma.routes({
  '/api/stats/update': requireUser(function() {
    var l, statUpdateInfo, _fn, _i, _len, _ref,
      _this = this;
    l = new Line({
      error: function(err) {
        console.log('Saving stats failed:', err);
        return _this.sendError();
      }
    });
    _ref = this.data.updates;
    _fn = function(statUpdateInfo) {
      var action, update, _j, _len1, _ref1;
      statUpdateInfo = JSON.parse(statUpdateInfo);
      update = {
        objectType: statUpdateInfo.objectType,
        objectId: statUpdateInfo.objectId
      };
      _ref1 = statUpdateInfo.actions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        action = _ref1[_j];
        update[action.attribute] = {};
        update[action.attribute][action.action] = action.value;
      }
      return l.add(function() {
        return db.update('stats', "" + update.objectType + "/" + update.objectId, update, l.wait());
      });
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      statUpdateInfo = _ref[_i];
      _fn(statUpdateInfo);
    }
    return l.add(function() {
      return _this.send();
    });
  }),
  '/api/stats': requireUser(function() {
    var l, objectIds, objectInfo, _i, _len, _ref,
      _this = this;
    objectIds = [];
    _ref = this.data.objectInfos;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      objectInfo = _ref[_i];
      objectIds.push("" + objectInfo.objectType + "/" + objectInfo.objectId);
    }
    return l = new Line({
      error: function(err) {
        console.log('Retrieving stats failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.multiget('stats', objectIds, l.wait());
    }, function(stats) {
      return _this.send(stats);
    });
  })
});
