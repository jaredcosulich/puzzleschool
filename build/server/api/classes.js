// Generated by CoffeeScript 1.3.3
var Line, db, requireUser, soma;

Line = require('line').Line;

soma = require('soma');

db = require('../lib/db');

requireUser = require('./lib/decorators').requireUser;

soma.routes({
  '/api/classes/update': requireUser(function() {
    var classInfo, l, _ref,
      _this = this;
    classInfo = {
      name: this.data.name,
      user: this.user.id
    };
    if (!((_ref = this.data.id) != null ? _ref.length : void 0)) {
      delete this.data.id;
    }
    return l = new Line({
      error: function(err) {
        console.log('Saving class failed:', err);
        return _this.sendError();
      }
    }, function() {
      if (_this.data.id) {
        return db.update('classes', _this.data.id, classInfo, l.wait());
      } else {
        return db.put('classes', classInfo, l.wait());
      }
    }, function(classInfo) {
      return _this.send(classInfo);
    });
  }),
  '/api/classes/info/:id': requireUser(function(_arg) {
    var id, l,
      _this = this;
    id = _arg.id;
    return l = new Line({
      error: function(err) {
        console.log('Retrieving class failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.get('classes', id, l.wait());
    }, function(classInfo) {
      var _ref;
      _this.classInfo = classInfo;
      if (!((_ref = _this.classInfo.levels) != null ? _ref.length : void 0)) {
        _this.send(_this.classInfo);
        l.stop();
        return;
      }
      return db.multiget('puzzle_levels', _this.classInfo.levels, l.wait());
    }, function(levelInfo) {
      _this.classInfo.levels = levelInfo.puzzle_levels;
      return _this.send(_this.classInfo);
    });
  }),
  '/api/classes/levels/:action/:classId': requireUser(function(_arg) {
    var action, classId, l, update,
      _this = this;
    action = _arg.action, classId = _arg.classId;
    update = {
      levels: {}
    };
    update.levels[action] = [this.data.level];
    return l = new Line({
      error: function(err) {
        console.log('Saving level to class failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.update('classes', classId, update, l.wait());
    }, function(classInfo) {
      return _this.send({
        levels: classInfo.levels || []
      });
    });
  }),
  '/api/classes/students/:action': requireUser(function(_arg) {
    var action, l, update,
      _this = this;
    action = _arg.action;
    update = {
      students: {}
    };
    update.students[action] = [this.user.id];
    return l = new Line({
      error: function(err) {
        console.log('Saving student for class failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.update('classes', id, update, l.wait());
    }, function(classInfo) {
      return _this.send({
        students: classInfo.students || []
      });
    });
  })
});
