// Generated by CoffeeScript 1.3.1
var bcrypt, crypto, db, line;

bcrypt = require('bcrypt');

crypto = require('crypto');

line = require('line');

db = require('../../lib/db');

exports.checkPassword = function(fn) {
  return function() {
    var args,
      _this = this;
    args = Array.prototype.slice.call(arguments);
    if (this.user && !this.data.email) {
      this.data.email = this.user.email;
    }
    if (!(this.data.email && /.+@.+\..+/.test(this.data.email))) {
      return this.sendError();
    }
    if (!(this.data.password && /\S{3,}/.test(this.data.password))) {
      return this.sendError();
    }
    line(function() {
      return db.get('login', _this.data.email, line.wait());
    });
    line(function(login) {
      _this.login = login;
      if (!_this.login.id) {
        return line.fail();
      }
      return bcrypt.compare(_this.data.password, _this.login.password, line.wait());
    });
    line(function(result) {
      if (!result) {
        return line.fail();
      }
    });
    line.error(function() {
      return _this.sendError();
    });
    return line.run(function() {
      return fn.apply(_this, args);
    });
  };
};

exports.requireUser = function(fn) {
  return function() {
    var args, userCookie,
      _this = this;
    args = Array.prototype.slice.call(arguments);
    userCookie = JSON.parse(this.jar.get('user') || 'null');
    if (!userCookie) {
      line(function() {
        return db.put('users', {
          status: 1
        }, line.wait());
      });
    } else {
      line(function() {
        return db.get('users', userCookie.id, line.wait());
      });
    }
    line(function(user) {
      _this.user = user;
      if (userCookie && _this.user.session !== userCookie.session) {
        _this.jar.set('user', null, {
          signed: true,
          httpOnly: false
        });
        return _this.redirect('/');
      } else {
        _this.jar.set('user', JSON.stringify(_this.user), {
          signed: true,
          httpOnly: false
        });
        return fn.apply(_this, args);
      }
    });
    line.error(function(err) {
      throw err;
    });
    return line.run();
  };
};
