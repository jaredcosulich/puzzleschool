// Generated by CoffeeScript 1.3.3
var Line, bcrypt, crypto, db;

bcrypt = require('bcrypt');

crypto = require('crypto');

Line = require('line').Line;

db = require('../../lib/db');

exports.checkPassword = function(fn) {
  return function() {
    var args, l,
      _this = this;
    args = Array.prototype.slice.call(arguments);
    if (this.user && !this.data.email) {
      this.data.email = this.user.email;
    }
    if (!(this.data.email && /.+@.+\..+/.test(this.data.email))) {
      return this.sendError();
    }
    if (!(this.data.password && /\S{3,}/.test(this.data.password))) {
      return this.sendError();
    }
    return l = new Line({
      error: function(err) {
        console.log('checkPassword failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.get('login', _this.data.email.toLowerCase(), l.wait());
    }, function(login) {
      _this.login = login;
      if (!_this.login) {
        return line.fail('Login failed, email not on record.');
      }
      return bcrypt.compare(_this.data.password, _this.login.password, l.wait());
    }, function(result) {
      if (!result) {
        return l.fail('Login failed, invalid password');
      }
    }, function() {
      return fn.apply(_this, args);
    });
  };
};

exports.requireUser = function(fn) {
  return function() {
    var args, l, userCookie,
      _this = this;
    args = Array.prototype.slice.call(arguments);
    userCookie = this.cookies.get('user', {
      signed: true
    });
    if (!userCookie) {
      return this.go('/');
    }
    return l = new Line({
      error: function(err) {
        console.log('checkUser failed:', err);
        return _this.sendError();
      }
    }, function() {
      return db.get('users', userCookie.id, l.wait());
    }, function(user) {
      _this.user = user;
      if (!_this.user || _this.user.session !== userCookie.session) {
        _this.cookies.set('user', null);
        return _this.go('/');
      } else {
        _this.cookies.set('user', _this.user, {
          signed: true
        });
        return fn.apply(_this, args);
      }
    });
  };
};
