// Generated by CoffeeScript 1.3.1
var crypto, db, knox, knoxClient, util;

crypto = require('crypto');

knox = require('knox');

util = require('../util');

db = exports;

knoxClient = knox.createClient({
  key: 'AKIAJJEYLSPOX3CMVWOQ',
  secret: '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',
  bucket: 'mingl-data'
});

db.putFile = function(path, data, mimetype, callback) {
  var request;
  request = knoxClient.put(path, {
    'Content-Length': data.length,
    'Content-Type': mimetype
  });
  request.on('response', function(response) {
    if (response.statusCode !== 200) {
      return callback(response.statusCode);
    } else {
      return callback(null, path);
    }
  });
  return request.end(data);
};

db.getFile = function(path, callback) {
  var chunks, request;
  chunks = [];
  request = knoxClient.get(path);
  request.on('response', function(response) {
    if (response.statusCode !== 200) {
      return callback(response.statusCode);
    } else {
      response.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return response.on('end', function() {
        return callback(null, util.combineChunks(chunks));
      });
    }
  });
  return request.end();
};

db.putImage = function(data, callback) {
  return crypto.randomBytes(6, function(err, buf) {
    var path;
    path = (Date.now() + buf.toString('hex')).replace(/^(......)(..)(..)(...)(.*)$/g, 'images/$1/$2/$3/$4/$5.jpg');
    return db.putFile(path, data, 'image/jpeg', callback);
  });
};

db.getImage = function(path, callback) {
  return db.getFile(path, callback);
};
