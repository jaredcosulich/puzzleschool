// Generated by CoffeeScript 1.3.1
var db, dynode, dynodeClient,
  __slice = [].slice;

dynode = require('dynode');

db = exports;

dynodeClient = new dynode.Client({
  accessKeyId: 'AKIAJJEYLSPOX3CMVWOQ',
  secretAccessKey: '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'
});

db.createTable = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return dynodeClient.createTable.apply(dynodeClient, args);
};

db.deleteTable = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return dynodeClient.deleteTable.apply(dynodeClient, args);
};

db.updateTable = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return dynodeClient.updateTable.apply(dynodeClient, args);
};

db.nextId = function(table, callback) {
  return dynodeClient.updateItem('ids', table, {
    id: {
      add: 1
    }
  }, {
    ReturnValues: "ALL_NEW"
  }, function(err, ret) {
    if (err) {
      return callback.apply(this, arguments);
    }
    return callback(err, ret.Attributes.id.toString());
  });
};

db.put = function(table, item, callback) {
  if (item.createdAt == null) {
    item.createdAt = new Date();
  }
  if (item.id) {
    return dynodeClient.putItem(table, item, function() {
      return callback(null, item);
    });
  } else {
    return db.nextId(table, function(err, id) {
      if (err) {
        return callback.apply(this, arguments);
      }
      item['id'] = id;
      return dynodeClient.putItem(table, item, function() {
        return callback(null, item);
      });
    });
  }
};

db.get = function(table, id, callback) {
  return dynodeClient.getItem(table, id, callback);
};

db.update = function(table, id, attributes, callback) {
  var restoreId;
  attributes.updatedAt = new Date();
  if ('id' in attributes) {
    if (attributes.id !== id) {
      return callback('Can\'t update id attribute');
    }
    restoreId = true;
    delete attributes.id;
  }
  dynodeClient.updateItem(table, id, attributes, {
    ReturnValues: "ALL_NEW"
  }, function(err, ret) {
    if (err) {
      return callback.apply(this, arguments);
    }
    return callback(err, ret.Attributes);
  });
  if (restoreId) {
    return attributes.id = id;
  }
};

db["delete"] = function(table, id, callback) {
  return dynode.deleteItem(table, id, {
    ReturnValues: "ALL_OLD"
  }, function(err, ret) {
    if (err) {
      return callback.apply(this, arguments);
    }
    return callback(err, ret.Attributes);
  });
};

db.multiget = function(table, ids, callback) {
  var id, query, tables, _i, _len;
  if (typeof table === 'object') {
    tables = table;
    callback = ids;
  } else {
    tables = {};
    tables[table] = ids;
  }
  query = {};
  for (table in tables) {
    ids = tables[table];
    query[table] = {
      keys: []
    };
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      id = ids[_i];
      query[table].keys.push({
        hash: id
      });
    }
  }
  return dynodeClient.batchGetItem(query, callback);
};
