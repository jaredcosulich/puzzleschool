// Generated by CoffeeScript 1.3.1
var Context, Cookies, KeyMaster, Route, crypto, db, events, keymaster, querystring, routes, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

events = require('events');

querystring = require('querystring');

url = require('url');

Cookies = require('cookies');

db = require('./db');

keymaster = null;

exports.init = function(callback) {
  keymaster = new KeyMaster;
  return keymaster.init(callback);
};

routes = [];

exports.add = function(_routes) {
  var expr, fn;
  for (expr in _routes) {
    fn = _routes[expr];
    routes.push(new Route(expr, fn));
  }
};

exports.handle = function(request, response) {
  var context;
  context = new Context(request, response);
  context.on('route', function() {
    var m, matched, route, _i, _len;
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      if ((m = route.pattern.exec(context.path))) {
        matched = true;
        route.fn.apply(context, m.slice(1));
      }
    }
    if (!matched) {
      return context.sendNotFound();
    }
  });
  context.begin();
};

KeyMaster = (function() {

  KeyMaster.name = 'KeyMaster';

  function KeyMaster() {}

  KeyMaster.prototype.init = function(callback) {
    this.keys = ['sadasfas'];
    process.nextTick(callback);
  };

  KeyMaster.prototype.sign = function(data, key) {
    if (key == null) {
      key = this.keys[0];
    }
    return crypto.createHmac('sha1', key).update(data).digest('hex');
  };

  KeyMaster.prototype.verify = function(data, hash) {
    return this.keys.some(function(key) {
      return this.sign(data, key) === hash;
    });
  };

  return KeyMaster;

})();

Route = (function() {

  Route.name = 'Route';

  Route.prototype._transformations = [[/([?=,\/])/g, '\\$1'], [/:([\w\d]+)/g, '([^/]*)'], [/\*([\w\d]+)/g, '(.*?)']];

  function Route(expr, fn) {
    var pattern, replacement, transformer, _i, _len, _ref, _ref1;
    this.expr = expr;
    this.fn = fn;
    pattern = this.expr;
    _ref = this._transformations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], transformer = _ref1[0], replacement = _ref1[1];
      pattern = pattern.replace(transformer, replacement);
    }
    this.pattern = new RegExp("^" + pattern + "$");
  }

  return Route;

})();

Context = (function(_super) {

  __extends(Context, _super);

  Context.name = 'Context';

  function Context(request, response) {
    var key, urlParsed;
    this.request = request;
    this.response = response;
    urlParsed = url.parse(this.request.url, true);
    for (key in urlParsed) {
      this[key] = urlParsed[key];
    }
    this.cookies = new Cookies(this.request, this.response, keymaster);
    this.uid = this.cookies.get('uid');
    return;
  }

  Context.prototype.begin = function() {
    var contentType;
    contentType = this.request.headers['content-type'];
    if (contentType) {
      contentType = contentType.split(/;/)[0];
    }
    switch (contentType) {
      case void 0:
      case 'application/x-www-form-urlencoded':
        this._readUrlEncoded();
        break;
      case 'application/json':
        this._readJSON();
        break;
      case 'application/octet-stream':
      case 'multipart/form-data':
        this._readFiles();
    }
  };

  Context.prototype.sendJSON = function(obj) {
    var body;
    body = JSON.stringify(obj);
    this.response.setHeader('Content-Type', 'application/json');
    this.response.setHeader('Content-Length', Buffer.byteLength(body));
    this.response.end(body);
  };

  Context.prototype.sendText = function(body, contentType) {
    if (body == null) {
      body = '';
    }
    if (contentType == null) {
      contentType = 'text/html';
    }
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', Buffer.byteLength(body));
    this.response.end(body);
  };

  Context.prototype.sendBinary = function(body, contentType) {
    if (contentType == null) {
      contentType = 'application/octet-stream';
    }
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', body.length);
    this.response.end(body);
  };

  Context.prototype.sendError = function(err, body) {
    if (body == null) {
      body = '';
    }
    if (err) {
      console.log(err, err.stack);
    }
    this.response.statusCode = 500;
    this.response.setHeader('Content-Type', 'text/plain');
    this.response.setHeader('Content-Length', Buffer.byteLength(body));
    this.response.end(body);
  };

  Context.prototype.sendNotFound = function(body, contentType) {
    if (body == null) {
      body = '';
    }
    if (contentType == null) {
      contentType = 'text/html';
    }
    console.log("404", body);
    this.response.statusCode = 404;
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', Buffer.byteLength(body));
    this.response.end(body);
  };

  Context.prototype.redirect = function(path) {
    this.response.statusCode = 303;
    this.response.setHeader('Location', path);
    this.response.end();
  };

  Context.prototype._readJSON = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.emit('route', (_this.data = JSON.parse(chunks.join(""))));
    });
  };

  Context.prototype._readUrlEncoded = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.emit('route', (_this.data = querystring.parse(chunks.join(""))));
    });
  };

  return Context;

})(events.EventEmitter);
