// Generated by CoffeeScript 1.3.1
var loadUser, soma, wings;

soma = require('soma');

wings = require('wings');

loadUser = function(user) {
  if (user == null) {
    user = {};
  }
  console.log("LOADING", user);
  if (user.name == null) {
    user.name = 'guest';
  }
  if (user.levels == null) {
    user.levels = {};
  }
  return user;
};

soma.chunks({
  LanguageScramble: {
    meta: function() {
      return new soma.chunks.Base({
        content: this
      });
    },
    prepare: function(_arg) {
      this.languages = _arg.languages, this.levelName = _arg.levelName;
      this.template = this.loadTemplate('/build/client/templates/puzzles/language_scramble.html');
      this.loadScript('/build/client/pages/puzzles/language_scramble.js');
      this.loadScript('/build/client/pages/puzzles/lib/language_scramble.js');
      return this.loadStylesheet('/build/client/css/puzzles/language_scramble.css');
    },
    build: function() {
      var languageScramble;
      languageScramble = require('./lib/language_scramble');
      this.user = loadUser(this.cookies.get('user'));
      if (!(this.languages && this.languages.length)) {
        this.languages = this.user.lastLanguages || 'english_italian';
      }
      if (!(this.levelName && this.levelName.length)) {
        this.levelName = this.user.lastLevelPlayed || 'top10words';
      }
      this.chunkHelper = new languageScramble.ChunkHelper(this.languages, this.levelName);
      return this.html = wings.renderTemplate(this.template, {
        languages: this.languages,
        displayLanguages: this.chunkHelper.displayLanguages(),
        title: this.chunkHelper.level.title,
        subtitle: this.chunkHelper.level.subtitle,
        data: this.chunkHelper.level.data,
        levelName: this.levelName,
        allLevels: this.chunkHelper.allLevels()
      });
    }
  }
});

soma.views({
  LanguageScramble: {
    selector: '#content .language_scramble',
    create: function() {
      var languageScramble;
      languageScramble = require('./lib/language_scramble');
      this.languages = this.el.data('languages');
      this.levelName = this.el.data('level_name');
      this.user = loadUser(this.cookies.get('user'));
      this.viewHelper = new languageScramble.ViewHelper({
        el: $(this.selector),
        user: this.user,
        languages: this.languages,
        go: this.go,
        cookies: this.cookies
      });
      this.viewHelper.setLevel(this.levelName);
      this.viewHelper.bindWindow();
      this.viewHelper.bindKeyPress();
      return this.viewHelper.newScramble();
    }
  }
});

soma.routes({
  '/puzzles/language_scramble': function() {
    return new soma.chunks.LanguageScramble;
  },
  '/puzzles/language_scramble/:languages': function(languages) {
    return new soma.chunks.LanguageScramble({
      languages: languages
    });
  },
  '/puzzles/language_scramble/:languages/:levelName': function(languages, levelName) {
    return new soma.chunks.LanguageScramble({
      languages: languages,
      levelName: levelName
    });
  }
});
